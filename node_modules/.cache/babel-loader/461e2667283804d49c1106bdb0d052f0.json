{"ast":null,"code":"var _jsxFileName = \"/data/test/saitaClientGit/src/pages/Trade/Exchange.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Col, Tabs, Tab } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport SwapModal from \"../../components/SwapModal/SwapModal\";\nimport ArrowDown from \"../../assets/images/Arrow-Down-Icon.svg\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport BNBIcon from \"../../assets/images/token_icons/WBNB-Token-Icon.svg\";\nimport SwitchIcon from \"../../assets/images/Switch-Icon.svg\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH, LIQUIDITY_PROVIDER_FEE, USD, Saitama } from \"../../assets/tokens\";\nimport defaultImg from \"../../assets/images/token_icons/default.svg\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { BigNumber } from \"bignumber.js\";\nimport { searchTokenByNameOrAddress, addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport Button from \"../../components/Button/Button\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport iconTimer from \"../../assets/images/ionic-ios-timer.svg\";\nimport { EVENTS, LS_KEYS, MIN_NATIVE_CURRENCY_FOR_GAS } from \"../../constant\";\nimport { formatDown, formatUp, isEmpty } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Exchange = props => {\n  _s();\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const [show1, setShow1] = useState(false);\n\n  const handleClose1 = () => setShow1(false);\n\n  const handleShow1 = () => setShow1(true);\n\n  const [settingShow, setsettingShow] = useState(false);\n\n  const settingClose = () => setsettingShow(false);\n\n  const settinghandleShow = () => setsettingShow(true);\n\n  const [classToggle, setClassToggle] = useState(false);\n  const lock = useRef(!0);\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const tokenList = useSelector(state => state.persist.tokenList);\n  const deadline = useSelector(state => state.persist.deadline);\n  const slippagePercentage = useSelector(state => state.persist.slippagePercentage);\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [selectedTokenDecimal, setSelectedTokenDecimal] = useState(18);\n  const [sharePoolValue, setSharePoolValue] = useState();\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(TOKEN_LIST[0].symbol);\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] = useState(\"Select a token\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [walletShow, setWalletShow] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const [slippageTolerance, setSlippageTolerance] = useState(\"\");\n  const [amountIn, setAmountIn] = useState(\"\");\n  const [isDisabled, setDisabled] = useState(true);\n  const [btnText, setBtnText] = useState(\"Enter an amount\");\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [openSwapModal, setSwapModal] = useState(false);\n  const [priceImpact, setPriceImpact] = useState(\"\");\n  const [minimumReceived, setMinReceived] = useState(0);\n  const [existingPair, setPairAddress] = useState([]);\n  const [tokenOneIcon, setTokenOneIcon] = useState(TOKEN_LIST[0].icon);\n  const [tokenTwoIcon, setTokenTwoIcon] = useState(defaultImg);\n  const [max, setMax] = useState(true);\n  const [isWalletSelected, setIsWalletSelected] = useState(!1);\n  useEffect(_ => {\n    // onload check if wallet is selected\n    const selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\n\n    if (!selWalletType) {\n      setIsWalletSelected(!1);\n    } else {\n      setIsWalletSelected(!0);\n    }\n  }, []);\n  useEffect(() => {\n    if (isWalletSelected) {\n      setFilteredTokenList(tokenList === null || tokenList === void 0 ? void 0 : tokenList.filter(token => token === null || token === void 0 ? void 0 : token.name.toLowerCase().includes(search.toLowerCase())));\n      init();\n    }\n  }, [search, tokenList]);\n  useEffect(() => {\n    if (tokenOneValue) {\n      handleTokenValue(tokenOneValue, \"TK1\");\n    }\n  }, [tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n    }\n  };\n\n  document.addEventListener(EVENTS.LOGIN_SUCCESS, async e => {\n    e.preventDefault();\n    e.stopPropagation(); // console.log(\"##FUCK##\");\n\n    await init();\n  });\n\n  const onHandleOpenModal = tokenType => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    } // console.log(\"### changing symbol\");\n    // dispatch(startLoading());\n\n\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency);\n    setModalCurrency({\n      modalCurrency: true\n    });\n    setTokenType(tokenType); // dispatch(stopLoading());\n  };\n\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const {\n      address,\n      symbol,\n      icon\n    } = token;\n\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n\n    let a1,\n        a2,\n        oneBalance = 0,\n        twoBalance = 0;\n\n    if (selecting === \"TK1\") {\n      a1 = address;\n\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      setTokenOneIcon(icon);\n      setTokenOneValue(0.0);\n      setTokenTwoValue(0.0);\n      setMax(true);\n\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n\n    if (selecting === \"TK2\") {\n      a2 = address;\n\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      setTokenTwoIcon(icon);\n      setTokenOneValue(0.0);\n      setTokenTwoValue(0.0);\n\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        setBtnText(\"Enter an amount\");\n        setDisabled(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n        setDisabled(true);\n        setBtnText(\"Insufficient liquidity\");\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(tokenOne.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals);\n\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(tokenTwo.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals);\n\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n\n    return true;\n  };\n\n  const handleMaxBalance = async amountIn => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n\n    if (tokenOne.address === \"BNB\") {\n      // .002 BNB is reserved for saving gas fee\n      const bnbBalance = (await ContractServices.getBNBBalanceForMax(isUserConnected)) / 10 ** 18 - MIN_NATIVE_CURRENCY_FOR_GAS;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed\n      const tokenBalance = await ContractServices.getTokenBalanceForMax(tokenOne.address, isUserConnected);\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n\n  const checkPairWithBNBOrUSDT = async (token1, token2) => {\n    // debugger;\n    // const pOne = await ExchangeService.getPair(token1, Saitama);\n    // const pTwo = await ExchangeService.getPair(token2, Saitama);\n    // if (\n    //   pOne !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pTwo !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, Saitama, token2];\n    // }\n    // const pair1 = await ExchangeService.getPair(token1, WETH);\n    // const pair2 = await ExchangeService.getPair(token2, WETH);\n    // if (\n    //   pair1 !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pair2 !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, WETH, token2];\n    // }\n    // const pairOne = await ExchangeService.getPair(token1, USD);\n    // const pairTwo = await ExchangeService.getPair(token2, USD);\n    // if (\n    //   pairOne !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pairTwo !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, USD, token2];\n    // }\n    const pOne = await ExchangeService.getPair(token1, Saitama);\n    const pTwo = await ExchangeService.getPair(token2, Saitama);\n    const pair1 = await ExchangeService.getPair(token1, WETH);\n    const pair2 = await ExchangeService.getPair(token2, WETH);\n    const pairOne = await ExchangeService.getPair(token1, USD);\n    const pairTwo = await ExchangeService.getPair(token2, USD); // console.log(\"pOne\", pOne, \"pTwo\", pTwo, \"pair1\", pair1, \"pair2\", pair2);\n\n    if (pairOne !== \"0x0000000000000000000000000000000000000000\" && pairTwo !== \"0x0000000000000000000000000000000000000000\") {\n      return [token1, USD, token2];\n    } else if (pOne !== \"0x0000000000000000000000000000000000000000\" && pTwo !== \"0x0000000000000000000000000000000000000000\") {\n      // alert(\"saitama\");\n      return [token1, Saitama, token2];\n    } else if (pair1 !== \"0x0000000000000000000000000000000000000000\" && pair2 !== \"0x0000000000000000000000000000000000000000\") {\n      // alert(\"weth\");\n      return [token1, WETH, Saitama, token2];\n    }\n\n    return false;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    try {\n      if (!isUserConnected) {\n        return;\n      } // if (\n      //   tokenOne.address.toLowerCase() !==\n      //     TOKEN_LIST[0].address.toLowerCase() &&\n      //   tokenOne.address.toLowerCase() !==\n      //     TOKEN_LIST[1].address.toLowerCase() &&\n      //   tokenTwo.address.toLowerCase() !==\n      //     TOKEN_LIST[0].address.toLowerCase() &&\n      //   tokenTwo.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase()\n      // ) {\n      //   toast.error(\"One token should be either Eth or Saitama\");\n      //   return;\n      // }\n      // const acc = await ContractServices.getDefaultAccount();\n\n\n      const acc = isUserConnected; // console.log(\"ASDAC\", acc);\n      // if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      //   return toast.error(\"Wallet address doesn`t match!\");\n      // }\n\n      console.log(\"###max balance \", amount);\n      setMax(!0);\n      let add1ForPriceImpact, add2ForPriceImpact;\n\n      if (tokenType === \"TK1\") {\n        setTokenOneValue(amount);\n        if (isEmpty(amount)) return setTokenTwoValue(\"\");\n\n        if (tokenTwoCurrency === \"Select a token\") {\n          setBtnText(\"Select token\");\n          return;\n        }\n\n        dispatch(startLoading());\n        const balance = await checkTokenORCurrencyBalance(tokenOne.address);\n\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenOne.symbol} balance`);\n          dispatch(stopLoading());\n          return;\n        }\n\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          var _result;\n\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === \"BNB\") {\n            tokenTwoAddress = WETH;\n          }\n\n          if (tokenOne.address === \"BNB\") {\n            tokenOneAddress = WETH;\n          }\n\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(tokenOneAddress, tokenTwoAddress);\n\n          if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n            // console.log(\"checkPair\", checkPair);\n            // alert(\"c\");\n            // console.log(\n            //   \"tokenOneAddress\",\n            //   tokenOneAddress,\n            //   \"tokenTwoAddress\",\n            //   tokenTwoAddress,\n            //   \"amount\",\n            //   amount\n            // );\n            result = await ExchangeService.getAmountsOut(amount, [tokenOneAddress, tokenTwoAddress]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n            console.log(\"this is result--------------\", result);\n            const dollarValue = await ExchangeService.tryGetDollarDenomination(tokenOneAddress, tokenTwoAddress, tokenOneValue, tokenTwoValue);\n            console.log(\"dollarvalue--------------\", dollarValue);\n          } else {\n            // alert(\"in for pair\");\n            const pair = await checkPairWithBNBOrUSDT(tokenOneAddress, tokenTwoAddress); // console.log(\"pair\", pair);\n\n            if (pair) {\n              if (!result) {\n                // alert(\"x\");\n                try {\n                  result = await ExchangeService.getAmountsOut(amount, pair);\n                  add1ForPriceImpact = pair[0];\n                  add2ForPriceImpact = pair[1];\n                  isPriceImpact = true;\n                } catch (err) {\n                  // console.log(\"this iiiiii\", err);\n                  toast.error(err);\n                  dispatch(stopLoading());\n                }\n              }\n            }\n          } // console.log(\"resultresultresult\", result);\n\n\n          if (((_result = result) === null || _result === void 0 ? void 0 : _result.length) > 0) {\n            const a = Number(result[result.length - 1].toFixed(5));\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            const dollarValue = ExchangeService.tryGetDollarDenomination(tokenOneAddress, tokenTwoAddress, amount, result[result.length - 1]);\n            console.log(\"in token1\", dollarValue);\n            setTokenTwoValue(a);\n            setAmountIn(\"TK1\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived = Number(amountOut) - Number(amountOut) * slippagePercentage / 100;\n            setMinReceived(minimumReceived);\n            calculatePriceImpact(tokenType, amount, add1ForPriceImpact, add2ForPriceImpact, isPriceImpact);\n          }\n        }\n      }\n\n      console.log(\"this is minimium recieved\", minimumReceived);\n\n      if (tokenType === \"TK2\") {\n        setTokenTwoValue(amount);\n        if (isEmpty(amount)) return setTokenOneValue(\"\");\n\n        if (tokenOneCurrency === \"Select a token\") {\n          setBtnText(\"Select token\");\n          return;\n        }\n\n        dispatch(startLoading());\n        const balance = await checkTokenORCurrencyBalance(tokenTwo.address);\n\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenTwo.symbol} balance`);\n          dispatch(stopLoading());\n          return;\n        }\n\n        const r = await getAllowance(amount, tokenType);\n\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === \"BNB\") {\n            tokenTwoAddress = WETH;\n          }\n\n          if (tokenOne.address === \"BNB\") {\n            tokenOneAddress = WETH;\n          }\n\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(tokenTwoAddress, tokenOneAddress);\n\n          if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n            result = await ExchangeService.getAmountsIn(amount, [tokenOneAddress, tokenTwoAddress]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            const pair = await checkPairWithBNBOrUSDT(tokenTwoAddress, tokenOneAddress);\n\n            if (pair) {\n              result = await ExchangeService.getAmountsIn(amount, pair);\n              add1ForPriceImpact = pair[0];\n              add2ForPriceImpact = pair[1];\n              isPriceImpact = true;\n            }\n          }\n\n          if (result) {\n            const a = Number(result).toFixed(9);\n            const dollarValue = await ExchangeService.tryGetDollarDenomination(tokenOneAddress, tokenTwoAddress, result, amount);\n            console.log(\"in token2\", dollarValue);\n            setTokenOneValue(a);\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            setAmountIn(\"TK2\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived = Number(amountOut) - Number(amountOut) * slippagePercentage / 100;\n            setMinReceived(minimumReceived);\n            await calculatePriceImpact(tokenType, a, add2ForPriceImpact, add1ForPriceImpact, isPriceImpact);\n          }\n        }\n      }\n\n      if (tokenOne.address && tokenTwo.address) {\n        let dec = 0;\n\n        if (tokenTwo.address === \"BNB\") {\n          // alert(\"here\");\n          dec = await ContractServices.getDecimals(WETH); // console.log(\"deccc\", dec);\n        } else {\n          dec = await ContractServices.getDecimals(tokenTwo.address);\n        }\n\n        console.log(\"[###] dec\", dec);\n        setSelectedTokenDecimal(dec);\n        setDisabled(false);\n        let a1 = add1ForPriceImpact,\n            a2 = add2ForPriceImpact;\n        let currentPairAddress;\n\n        if (a1 === \"BNB\") {\n          a1 = WETH; //WETH\n\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else if (a2 === \"BNB\") {\n          a2 = WETH; //WETH\n\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else {\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        }\n\n        if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n          setCurrentPairAddress(currentPairAddress);\n          const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n          setLpTokenBalance(lpTokenBalance); //const reserves = await ExchangeService.getReserves(currentPairAddress);\n          //setSharePoolValue(ratio.toFixed(2));\n\n          setFirstProvider(false);\n          setShowPoolShare(true);\n          setDisabled(false);\n        } else {\n          setCurrentPairAddress(\"\");\n          setFirstProvider(true);\n          setShowPoolShare(true);\n          setLpTokenBalance(0);\n          setDisabled(true);\n        }\n      }\n\n      dispatch(stopLoading());\n    } catch (e) {\n      console.log(e);\n      toast.error(\"Something went wrong!\");\n      dispatch(stopLoading());\n    }\n  };\n\n  const calculatePriceImpact = async (tokenType, amount, a1, a2, isPriceImpact) => {\n    let calPriceImpact;\n    let priceImpact;\n    const currentPairAddress = await ExchangeService.getPair(a1, a2);\n    const reserve = await ExchangeService.getReserves(currentPairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(currentPairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(currentPairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n\n    if (tokenZero.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[0]) / 10 ** decimalZero;\n      calPriceImpact = amount / res * 100;\n      priceImpact = calPriceImpact - calPriceImpact * LIQUIDITY_PROVIDER_FEE / 100;\n\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n\n    if (tokenOne.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[1]) / 10 ** decimalOne;\n      calPriceImpact = amount / res * 100;\n      priceImpact = calPriceImpact - calPriceImpact * LIQUIDITY_PROVIDER_FEE / 100;\n\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n  };\n\n  const handleSearchToken = async data => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n\n  const handleCloseSettings = () => setShowSettings(false);\n\n  const handleCloseRecent = () => setShowRecent(false);\n\n  const handleBalance = async () => {\n    const address = amountIn === \"TK1\" ? tokenTwo.address : tokenOne.address;\n    let balance;\n\n    if (address === \"BNB\") {\n      balance = await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      balance = await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n\n    if (amountIn === \"TK1\") {\n      setTokenTwoBalance(balance);\n    }\n\n    if (amountIn === \"TK2\") {\n      setTokenOneBalance(balance);\n    }\n  };\n\n  const handleSwap = async () => {\n    // alert(\"kkk\");\n    // debugger;\n    // const acc = await ContractServices.getDefaultAccount();\n    const acc = isUserConnected;\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    setSwapModal(false);\n    let value = 0,\n        checkBNBforTK1 = false,\n        checkBNBforTK2 = false;\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n    let a1 = tokenOne.address,\n        a2 = tokenTwo.address;\n\n    if (tokenOne.address === \"BNB\") {\n      a1 = WETH;\n      checkBNBforTK1 = true;\n      value = tokenOneValue;\n    }\n\n    if (tokenTwo.address === \"BNB\") {\n      a2 = WETH;\n      checkBNBforTK2 = true;\n      value = tokenTwoValue;\n    }\n\n    if (value > 0) {\n      value = BigNumber(value * 10 ** 18).toFixed();\n    }\n\n    if (checkBNBforTK1) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK1(dl, value);\n\n      try {\n        // console.log(\"ww\", isUserConnected.toString());\n        const result = amountIn === \"TK1\" ? await ExchangeService.swapExactETHForTokens(data, handleBalance, a1, a2) : await ExchangeService.swapETHForExactTokens(data);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else if (checkBNBforTK2) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK2(value);\n\n      try {\n        const result = amountIn === \"TK1\" ? await ExchangeService.swapExactTokensForETH(data, a1, a2) : await ExchangeService.swapTokensForExactETH(data, a1, a2);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      dispatch(startLoading());\n      let pair;\n      const checkPair = await ExchangeService.getPair(a1, a2);\n\n      if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n        pair = [a1, a2];\n      } else {\n        const pairs = await checkPairWithBNBOrUSDT(a1, a2);\n\n        if (pairs) {\n          pair = pairs;\n        }\n      }\n\n      let data = await handleSwapAmoutnIn(value);\n      data.path = pair;\n\n      try {\n        const result = amountIn === \"TK1\" ? await ExchangeService.swapExactTokensForTokens(data, a1, a2) : await ExchangeService.swapTokensForExactTokens(data, a1, a2);\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n\n  const handleSwapAmoutnIn = async value => {\n    let amountAMin;\n    let amountBMin;\n\n    if (amountIn == \"TK1\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(amountBDesired - amountBDesired * slippagePercentage / 100).toFixed();\n    }\n\n    if (amountIn == \"TK2\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(amountBDesired + amountBDesired * slippagePercentage / 100).toFixed();\n    }\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n    return {\n      amountIn: amountAMin.toString(),\n      amountOutMin: amountBMin.toString(),\n      path: [tokenOne.address, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value: value.toString()\n    };\n  };\n\n  const handleBNBSwapForTK1 = async (dl, value) => {\n    var _amountOutMin;\n\n    let amountOutMin;\n\n    if (amountIn === \"TK1\") {\n      let amountOut = BigNumber(Math.floor(tokenTwoValue * 10 ** tokenTwo.decimals)).toFixed();\n      amountOutMin = BigNumber(Math.floor(Number(amountOut) - Number(amountOut) * slippagePercentage / 100)).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountOut = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      amountOutMin = BigNumber(Math.floor(amountOut)).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    return {\n      amountOutMin: (_amountOutMin = amountOutMin) === null || _amountOutMin === void 0 ? void 0 : _amountOutMin.toString(),\n      path: [WETH, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value\n    };\n  };\n\n  const handleBNBSwapForTK2 = async value => {\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (amountIn === \"TK1\") {\n      let amountOut = tokenTwoValue * 10 ** tokenOne.decimals;\n      let amountIn = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      let amountOutMin = BigNumber(Math.floor(amountOut - amountOut * slippagePercentage / 100)).toFixed(); // const amount = Math.floor(value);\n\n      return {\n        amountIn,\n        amountOutMin,\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountIn = tokenTwoValue * 10 ** tokenTwo.decimals;\n      let amountOut = BigNumber(Math.floor(tokenOneValue * 10 ** tokenOne.decimals)).toFixed();\n      let amountInMax = BigNumber(Math.floor(amountIn + amountIn * slippagePercentage / 100)).toFixed(); // const amount = Math.floor(value);\n\n      return {\n        amountOut: amountOut.toString(),\n        amountInMax: amountInMax.toString(),\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n    }\n  };\n\n  const handleSwitchCurrencies = () => {\n    setTokenOneValue(tokenTwoValue);\n    setTokenTwoValue(tokenOneValue);\n    setCurrencyNameForTokenOne(tokenTwoCurrency);\n    setCurrencyNameForTokenTwo(tokenOneCurrency);\n    setTokenOneBalance(tokenTwoBalance);\n    setTokenTwoBalance(tokenOneBalance);\n    setTokenOneIcon(tokenTwoIcon);\n    setTokenTwoIcon(tokenOneIcon);\n    setTokenOne(tokenTwo);\n    setTokenTwo(tokenOne);\n    amountIn == \"TK1\" ? setAmountIn(\"TK2\") : setAmountIn(\"TK1\");\n  }; //call web3 approval function\n\n\n  const handleTokenApproval = async tokenType => {\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    } // const value = (2*256 - 1).toString();\n\n\n    const value = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.router.address, tokenAddress);\n\n      if (r.code === 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash\n        };\n\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n\n  const handleApprovalButton = tokenType => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return /*#__PURE__*/_jsxDEV(Col, {\n        className: \"swapBtn_col\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenOne.symbol}`,\n          onClick: () => handleTokenApproval(tokenType),\n          disabled: approvalConfirmation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return /*#__PURE__*/_jsxDEV(Col, {\n        className: \"swapBtn_col\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenTwo.symbol}`,\n          onClick: () => handleTokenApproval(tokenType),\n          disabled: approvalConfirmation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 9\n      }, this);\n    } //dead code\n\n\n    return null;\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false); //props.backBtn();\n    //window.location.reload();\n  };\n\n  useEffect(async () => {\n    await checkTokenORCurrencyBalance(\"BNB\");\n  }, []);\n\n  const checkTokenORCurrencyBalance = async address => {\n    if (address === \"BNB\") {\n      return await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      return await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n  };\n\n  const liquidityProviderFee = () => {\n    const value = amountIn === \"TK1\" ? tokenOneValue : tokenTwoValue;\n    const tokenCurrency = amountIn === \"TK1\" ? tokenOneCurrency : tokenTwoCurrency;\n    let lpf = Number(value) * 2 / 1000;\n    lpf = BigNumber(lpf).toFixed(9);\n    const calLpf = lpf + \" \" + tokenCurrency;\n    return calLpf;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"swapScreen comnSection\",\n      children: [/*#__PURE__*/_jsxDEV(CardCustom, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settingSec\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Exchange\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settingIcon\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: iconTimer,\n              onClick: () => setShowRecent(true),\n              className: \"timerImg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: SettingIcon,\n              onClick: () => settinghandleShow(true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1116,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SelectCoin, {\n          label: `Balance: ${tokenOneBalance}`,\n          coinImage: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon,\n          value: tokenOneCurrency,\n          onClick: () => onHandleOpenModal(\"TK1\"),\n          inputLabel: \"Input\",\n          className: \"mb-0\",\n          placeholder: \"0.0\",\n          onChange: e => handleTokenValue(e.target.value, \"TK1\"),\n          max: max,\n          onMax: () => handleMaxBalance(\"TK1\"),\n          defaultValue: tokenOneValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"convert_plus\",\n          onClick: handleSwitchCurrencies,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: ArrowDown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SelectCoin, {\n          label: `Balance: ${tokenTwoBalance}`,\n          coinImage: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon,\n          value: tokenTwoCurrency,\n          onClick: () => onHandleOpenModal(\"TK2\"),\n          inputLabel: \"Input\",\n          className: \"mb-0\",\n          placeholder: \"0.0\",\n          onChange: e => handleTokenValue(e.target.value, \"TK2\"),\n          max: false,\n          defaultValue: tokenTwoValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1135,\n          columnNumber: 11\n        }, this), slippagePercentage && /*#__PURE__*/_jsxDEV(Col, {\n          className: \"priceSec_col\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [!isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 52\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Slippage Tolerance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-end\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: !isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [sharePoolValue, \" \", tokenOneCurrency, \" per \", tokenTwoCurrency]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: `${slippagePercentage}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1166,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1153,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1148,\n          columnNumber: 13\n        }, this), handleApprovalButton(\"TK1\"), handleApprovalButton(\"TK2\"), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"swapBtn_col\",\n          children: [isDisabled && !isUserConnected && /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            className: \"swapBtn\",\n            onClick: () => setWalletShow(true),\n            title: \"Unlock Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1186,\n            columnNumber: 15\n          }, this), isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            disabled: true,\n            className: \"swapBtn\",\n            title: btnText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1196,\n            columnNumber: 15\n          }, this), !isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            className: \"swapBtn\",\n            onClick: () => setSwapModal(!openSwapModal),\n            title: \"Swap\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 9\n      }, this), !isDisabled && isUserConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card_style card_style_bottom\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Minimum received:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: formatDown(minimumReceived, selectedTokenDecimal).toFixed(9)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1212,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Price impact:\", /*#__PURE__*/_jsxDEV(\"sapn\", {\n              children: [priceImpact, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1217,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Liquidity provider fee:\", /*#__PURE__*/_jsxDEV(\"sapn\", {\n              children: liquidityProviderFee()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1220,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1219,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1209,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalCurrency, {\n      show: modalCurrency,\n      handleShow: setModalCurrency,\n      handleClose: setModalCurrency,\n      tokenList: filteredTokenList,\n      selectCurrency: onHandleSelectCurrency,\n      searchToken: handleSearchToken,\n      searchByName: setSearch,\n      tokenType: tokenType,\n      handleOrder: setFilteredTokenList,\n      currencyName: selectedCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConnectWallet, {\n      show: walletShow,\n      handleShow: handleShow1,\n      handleClose: handleClose1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingModal, {\n      show: settingShow,\n      handleShow: settinghandleShow,\n      handleClose: settingClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1243,\n      columnNumber: 7\n    }, this), openSwapModal && /*#__PURE__*/_jsxDEV(SwapModal, {\n      handleSwap: handleSwap,\n      closeModal: () => setSwapModal(!openSwapModal),\n      tokenOneCurrency: tokenOneCurrency,\n      tokenTwoCurrency: tokenTwoCurrency,\n      tokenOneValue: tokenOneValue,\n      tokenTwoValue: tokenTwoValue,\n      tokenOneIcon: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon,\n      tokenTwoIcon: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon,\n      sharePoolValue: sharePoolValue,\n      priceImpact: priceImpact,\n      liquidityProviderFee: liquidityProviderFee(),\n      show: openSwapModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1249,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(RecentTransactions, {\n      show: showRecent,\n      handleClose: handleCloseRecent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionalModal, {\n      show: showTransactionModal,\n      handleClose: closeTransactionModal,\n      txHash: txHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Exchange, \"zY3bzU19SU1aZd5jhgLn+VC2mAA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Exchange;\nexport default Exchange;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exchange\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useDispatch","useSelector","Container","Col","Tabs","Tab","ConnectWallet","CardCustom","ButtonPrimary","SelectCoin","SwapModal","ModalCurrency","SettingModal","MAIN_CONTRACT_LIST","TOKEN_LIST","WETH","LIQUIDITY_PROVIDER_FEE","USD","Saitama","ContractServices","toast","ExchangeService","BigNumber","searchTokenByNameOrAddress","addTransaction","startLoading","stopLoading","Button","RecentTransactions","TransactionalModal","EVENTS","LS_KEYS","MIN_NATIVE_CURRENCY_FOR_GAS","formatDown","formatUp","isEmpty","Exchange","props","show","setShow","handleClose","handleShow","show1","setShow1","handleClose1","handleShow1","settingShow","setsettingShow","settingClose","settinghandleShow","classToggle","setClassToggle","lock","dispatch","isUserConnected","state","persist","tokenList","deadline","slippagePercentage","modalCurrency","setModalCurrency","tokenOne","setTokenOne","tokenTwo","setTokenTwo","tokenOneValue","setTokenOneValue","tokenTwoValue","setTokenTwoValue","selectedTokenDecimal","setSelectedTokenDecimal","sharePoolValue","setSharePoolValue","tokenOneCurrency","setCurrencyNameForTokenOne","symbol","tokenTwoCurrency","setCurrencyNameForTokenTwo","tokenOneBalance","setTokenOneBalance","tokenTwoBalance","setTokenTwoBalance","tokenOneApproval","setTokenOneApproval","tokenTwoApproval","setTokenTwoApproval","tokenOneApproved","setTokenOneApproved","tokenTwoApproved","setTokenTwoApproved","lpTokenBalance","setLpTokenBalance","tokenType","setTokenType","showSupplyModal","setShowSupplyModal","search","setSearch","filteredTokenList","setFilteredTokenList","liquidityConfirmation","setLiquidityConfirmation","selectedCurrency","setSelectedCurrency","currentPairAddress","setCurrentPairAddress","firstProvider","setFirstProvider","showPoolShare","setShowPoolShare","showTransactionModal","setShowTransactionModal","txHash","setTxHash","walletShow","setWalletShow","showSettings","setShowSettings","showRecent","setShowRecent","slippageTolerance","setSlippageTolerance","amountIn","setAmountIn","isDisabled","setDisabled","btnText","setBtnText","approvalConfirmation","setApprovalConfirmation","openSwapModal","setSwapModal","priceImpact","setPriceImpact","minimumReceived","setMinReceived","existingPair","setPairAddress","tokenOneIcon","setTokenOneIcon","icon","tokenTwoIcon","setTokenTwoIcon","defaultImg","max","setMax","isWalletSelected","setIsWalletSelected","_","selWalletType","localStorage","getItem","WALLET_TYPE","filter","token","name","toLowerCase","includes","init","handleTokenValue","oneBalance","getBNBBalance","document","addEventListener","LOGIN_SUCCESS","e","preventDefault","stopPropagation","onHandleOpenModal","error","onHandleSelectCurrency","selecting","address","a1","a2","twoBalance","getTokenBalance","r","getAllowance","getPair","amount","allowance","allowanceToken","router","Number","decimals","handleMaxBalance","bnbBalance","getBNBBalanceForMax","tokenBalance","getTokenBalanceForMax","checkPairWithBNBOrUSDT","token1","token2","pOne","pTwo","pair1","pair2","pairOne","pairTwo","acc","console","log","add1ForPriceImpact","add2ForPriceImpact","balance","checkTokenORCurrencyBalance","tokenTwoAddress","tokenOneAddress","result","isPriceImpact","checkPair","getAmountsOut","dollarValue","tryGetDollarDenomination","pair","err","length","a","toFixed","ratio","amountOut","calculatePriceImpact","getAmountsIn","dec","getDecimals","calPriceImpact","reserve","getReserves","tokenZero","getTokenZero","getTokenOne","decimalZero","decimalOne","res","handleSearchToken","data","handleCloseSettings","handleCloseRecent","handleBalance","handleSwap","value","checkBNBforTK1","checkBNBforTK2","dl","Math","floor","Date","getTime","handleBNBSwapForTK1","swapExactETHForTokens","swapETHForExactTokens","message","tx","web3ErrorHandle","handleBNBSwapForTK2","swapExactTokensForETH","swapTokensForExactETH","pairs","handleSwapAmoutnIn","path","swapExactTokensForTokens","swapTokensForExactTokens","amountAMin","amountBMin","amountADesired","amountBDesired","toString","amountOutMin","to","amountInMax","handleSwitchCurrencies","handleTokenApproval","info","tokenAddress","approveToken","code","transactionHash","handleApprovalButton","closeTransactionModal","liquidityProviderFee","tokenCurrency","lpf","calLpf","iconTimer","SettingIcon","target","ArrowDown"],"sources":["/data/test/saitaClientGit/src/pages/Trade/Exchange.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Col, Tabs, Tab } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport SwapModal from \"../../components/SwapModal/SwapModal\";\nimport ArrowDown from \"../../assets/images/Arrow-Down-Icon.svg\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport BNBIcon from \"../../assets/images/token_icons/WBNB-Token-Icon.svg\";\nimport SwitchIcon from \"../../assets/images/Switch-Icon.svg\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport {\n  MAIN_CONTRACT_LIST,\n  TOKEN_LIST,\n  WETH,\n  LIQUIDITY_PROVIDER_FEE,\n  USD,\n  Saitama,\n} from \"../../assets/tokens\";\nimport defaultImg from \"../../assets/images/token_icons/default.svg\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { BigNumber } from \"bignumber.js\";\nimport {\n  searchTokenByNameOrAddress,\n  addTransaction,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport Button from \"../../components/Button/Button\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport iconTimer from \"../../assets/images/ionic-ios-timer.svg\";\nimport { EVENTS, LS_KEYS, MIN_NATIVE_CURRENCY_FOR_GAS } from \"../../constant\";\nimport { formatDown, formatUp, isEmpty } from \"../../utils\";\n\nconst Exchange = (props) => {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n  const [settingShow, setsettingShow] = useState(false);\n  const settingClose = () => setsettingShow(false);\n  const settinghandleShow = () => setsettingShow(true);\n  const [classToggle, setClassToggle] = useState(false);\n  const lock = useRef(!0);\n\n  const dispatch = useDispatch();\n\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const tokenList = useSelector((state) => state.persist.tokenList);\n  const deadline = useSelector((state) => state.persist.deadline);\n  const slippagePercentage = useSelector(\n    (state) => state.persist.slippagePercentage\n  );\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [selectedTokenDecimal, setSelectedTokenDecimal] = useState(18);\n  const [sharePoolValue, setSharePoolValue] = useState();\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(\n    TOKEN_LIST[0].symbol\n  );\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] =\n    useState(\"Select a token\");\n\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n\n  const [search, setSearch] = useState(\"\");\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [walletShow, setWalletShow] = useState(false);\n\n  const [showSettings, setShowSettings] = useState(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const [slippageTolerance, setSlippageTolerance] = useState(\"\");\n  const [amountIn, setAmountIn] = useState(\"\");\n  const [isDisabled, setDisabled] = useState(true);\n  const [btnText, setBtnText] = useState(\"Enter an amount\");\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [openSwapModal, setSwapModal] = useState(false);\n  const [priceImpact, setPriceImpact] = useState(\"\");\n  const [minimumReceived, setMinReceived] = useState(0);\n  const [existingPair, setPairAddress] = useState([]);\n  const [tokenOneIcon, setTokenOneIcon] = useState(TOKEN_LIST[0].icon);\n  const [tokenTwoIcon, setTokenTwoIcon] = useState(defaultImg);\n  const [max, setMax] = useState(true);\n\n  const [isWalletSelected, setIsWalletSelected] = useState(!1);\n\n  useEffect((_) => {\n    // onload check if wallet is selected\n    const selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\n    if (!selWalletType) {\n      setIsWalletSelected(!1);\n    } else {\n      setIsWalletSelected(!0);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isWalletSelected) {\n      setFilteredTokenList(\n        tokenList?.filter((token) =>\n          token?.name.toLowerCase().includes(search.toLowerCase())\n        )\n      );\n      init();\n    }\n  }, [search, tokenList]);\n\n  useEffect(() => {\n    if (tokenOneValue) {\n      handleTokenValue(tokenOneValue, \"TK1\");\n    }\n  }, [tokenTwo, tokenTwoCurrency, tokenTwoBalance, tokenTwoIcon]);\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n    }\n  };\n\n  document.addEventListener(EVENTS.LOGIN_SUCCESS, async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    // console.log(\"##FUCK##\");\n    await init();\n  });\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    // console.log(\"### changing symbol\");\n    // dispatch(startLoading());\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(\n      tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency\n    );\n    setModalCurrency({\n      modalCurrency: true,\n    });\n    setTokenType(tokenType);\n    // dispatch(stopLoading());\n  };\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const { address, symbol, icon } = token;\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    let a1,\n      a2,\n      oneBalance = 0,\n      twoBalance = 0;\n    if (selecting === \"TK1\") {\n      a1 = address;\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      setTokenOneIcon(icon);\n      setTokenOneValue(0.0);\n      setTokenTwoValue(0.0);\n      setMax(true);\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n    if (selecting === \"TK2\") {\n      a2 = address;\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      setTokenTwoIcon(icon);\n      setTokenOneValue(0.0);\n      setTokenTwoValue(0.0);\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        setBtnText(\"Enter an amount\");\n        setDisabled(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n        setDisabled(true);\n        setBtnText(\"Insufficient liquidity\");\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenOne.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals);\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenTwo.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals);\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n    return true;\n  };\n  const handleMaxBalance = async (amountIn) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    if (tokenOne.address === \"BNB\") {\n      // .002 BNB is reserved for saving gas fee\n      const bnbBalance =\n        (await ContractServices.getBNBBalanceForMax(isUserConnected)) /\n          10 ** 18 -\n        MIN_NATIVE_CURRENCY_FOR_GAS;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed\n      const tokenBalance = await ContractServices.getTokenBalanceForMax(\n        tokenOne.address,\n        isUserConnected\n      );\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n\n  const checkPairWithBNBOrUSDT = async (token1, token2) => {\n    // debugger;\n    // const pOne = await ExchangeService.getPair(token1, Saitama);\n    // const pTwo = await ExchangeService.getPair(token2, Saitama);\n    // if (\n    //   pOne !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pTwo !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, Saitama, token2];\n    // }\n    // const pair1 = await ExchangeService.getPair(token1, WETH);\n    // const pair2 = await ExchangeService.getPair(token2, WETH);\n    // if (\n    //   pair1 !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pair2 !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, WETH, token2];\n    // }\n    // const pairOne = await ExchangeService.getPair(token1, USD);\n    // const pairTwo = await ExchangeService.getPair(token2, USD);\n    // if (\n    //   pairOne !== \"0x0000000000000000000000000000000000000000\" &&\n    //   pairTwo !== \"0x0000000000000000000000000000000000000000\"\n    // ) {\n    //   return [token1, USD, token2];\n    // }\n    const pOne = await ExchangeService.getPair(token1, Saitama);\n    const pTwo = await ExchangeService.getPair(token2, Saitama);\n    const pair1 = await ExchangeService.getPair(token1, WETH);\n    const pair2 = await ExchangeService.getPair(token2, WETH);\n    const pairOne = await ExchangeService.getPair(token1, USD);\n    const pairTwo = await ExchangeService.getPair(token2, USD);\n    // console.log(\"pOne\", pOne, \"pTwo\", pTwo, \"pair1\", pair1, \"pair2\", pair2);\n    if (\n      pairOne !== \"0x0000000000000000000000000000000000000000\" &&\n      pairTwo !== \"0x0000000000000000000000000000000000000000\"\n    ) {\n      return [token1, USD, token2];\n    } else if (\n      pOne !== \"0x0000000000000000000000000000000000000000\" &&\n      pTwo !== \"0x0000000000000000000000000000000000000000\"\n    ) {\n      // alert(\"saitama\");\n      return [token1, Saitama, token2];\n    } else if (\n      pair1 !== \"0x0000000000000000000000000000000000000000\" &&\n      pair2 !== \"0x0000000000000000000000000000000000000000\"\n    ) {\n      // alert(\"weth\");\n      return [token1, WETH, Saitama, token2];\n    }\n\n    return false;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    try {\n      if (!isUserConnected) {\n        return;\n      }\n      // if (\n      //   tokenOne.address.toLowerCase() !==\n      //     TOKEN_LIST[0].address.toLowerCase() &&\n      //   tokenOne.address.toLowerCase() !==\n      //     TOKEN_LIST[1].address.toLowerCase() &&\n      //   tokenTwo.address.toLowerCase() !==\n      //     TOKEN_LIST[0].address.toLowerCase() &&\n      //   tokenTwo.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase()\n      // ) {\n      //   toast.error(\"One token should be either Eth or Saitama\");\n      //   return;\n      // }\n      // const acc = await ContractServices.getDefaultAccount();\n\n      const acc = isUserConnected;\n      // console.log(\"ASDAC\", acc);\n      // if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      //   return toast.error(\"Wallet address doesn`t match!\");\n      // }\n      console.log(\"###max balance \", amount);\n      setMax(!0);\n\n      let add1ForPriceImpact, add2ForPriceImpact;\n      if (tokenType === \"TK1\") {\n        setTokenOneValue(amount);\n        if (isEmpty(amount)) return setTokenTwoValue(\"\");\n\n        if (tokenTwoCurrency === \"Select a token\") {\n          setBtnText(\"Select token\");\n          return;\n        }\n        dispatch(startLoading());\n        const balance = await checkTokenORCurrencyBalance(tokenOne.address);\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenOne.symbol} balance`);\n          dispatch(stopLoading());\n          return;\n        }\n\n        setDisabled(false);\n        const r = await getAllowance(amount, tokenType);\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === \"BNB\") {\n            tokenTwoAddress = WETH;\n          }\n          if (tokenOne.address === \"BNB\") {\n            tokenOneAddress = WETH;\n          }\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(\n            tokenOneAddress,\n            tokenTwoAddress\n          );\n          if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n            // console.log(\"checkPair\", checkPair);\n            // alert(\"c\");\n            // console.log(\n            //   \"tokenOneAddress\",\n            //   tokenOneAddress,\n            //   \"tokenTwoAddress\",\n            //   tokenTwoAddress,\n            //   \"amount\",\n            //   amount\n            // );\n            result = await ExchangeService.getAmountsOut(amount, [\n              tokenOneAddress,\n              tokenTwoAddress,\n            ]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n            console.log(\"this is result--------------\", result);\n            const dollarValue = await ExchangeService.tryGetDollarDenomination(\n              tokenOneAddress,\n              tokenTwoAddress,\n              tokenOneValue,\n              tokenTwoValue\n            );\n            console.log(\"dollarvalue--------------\", dollarValue);\n          } else {\n            // alert(\"in for pair\");\n            const pair = await checkPairWithBNBOrUSDT(\n              tokenOneAddress,\n              tokenTwoAddress\n            );\n            // console.log(\"pair\", pair);\n            if (pair) {\n              if (!result) {\n                // alert(\"x\");\n                try {\n                  result = await ExchangeService.getAmountsOut(amount, pair);\n\n                  add1ForPriceImpact = pair[0];\n                  add2ForPriceImpact = pair[1];\n                  isPriceImpact = true;\n                } catch (err) {\n                  // console.log(\"this iiiiii\", err);\n                  toast.error(err);\n                  dispatch(stopLoading());\n                }\n              }\n            }\n          }\n          // console.log(\"resultresultresult\", result);\n          if (result?.length > 0) {\n            const a = Number(result[result.length - 1].toFixed(5));\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            const dollarValue = ExchangeService.tryGetDollarDenomination(\n              tokenOneAddress,\n              tokenTwoAddress,\n              amount,\n              result[result.length - 1]\n            );\n            console.log(\"in token1\", dollarValue);\n            setTokenTwoValue(a);\n            setAmountIn(\"TK1\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived =\n              Number(amountOut) -\n              (Number(amountOut) * slippagePercentage) / 100;\n            setMinReceived(minimumReceived);\n            calculatePriceImpact(\n              tokenType,\n              amount,\n              add1ForPriceImpact,\n              add2ForPriceImpact,\n              isPriceImpact\n            );\n          }\n        }\n      }\n      console.log(\"this is minimium recieved\", minimumReceived);\n      if (tokenType === \"TK2\") {\n        setTokenTwoValue(amount);\n        if (isEmpty(amount)) return setTokenOneValue(\"\");\n        if (tokenOneCurrency === \"Select a token\") {\n          setBtnText(\"Select token\");\n          return;\n        }\n        dispatch(startLoading());\n        const balance = await checkTokenORCurrencyBalance(tokenTwo.address);\n        if (amount > balance) {\n          setDisabled(true);\n          setBtnText(`Insufficient ${tokenTwo.symbol} balance`);\n          dispatch(stopLoading());\n          return;\n        }\n\n        const r = await getAllowance(amount, tokenType);\n        if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n          let tokenTwoAddress = tokenTwo.address;\n          let tokenOneAddress = tokenOne.address;\n\n          if (tokenTwo.address === \"BNB\") {\n            tokenTwoAddress = WETH;\n          }\n          if (tokenOne.address === \"BNB\") {\n            tokenOneAddress = WETH;\n          }\n          let result;\n          let isPriceImpact = false;\n          const checkPair = await ExchangeService.getPair(\n            tokenTwoAddress,\n            tokenOneAddress\n          );\n          if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n            result = await ExchangeService.getAmountsIn(amount, [\n              tokenOneAddress,\n              tokenTwoAddress,\n            ]);\n            add1ForPriceImpact = tokenOneAddress;\n            add2ForPriceImpact = tokenTwoAddress;\n          } else {\n            const pair = await checkPairWithBNBOrUSDT(\n              tokenTwoAddress,\n              tokenOneAddress\n            );\n            if (pair) {\n              result = await ExchangeService.getAmountsIn(amount, pair);\n              add1ForPriceImpact = pair[0];\n              add2ForPriceImpact = pair[1];\n              isPriceImpact = true;\n            }\n          }\n          if (result) {\n            const a = Number(result).toFixed(9);\n            const dollarValue = await ExchangeService.tryGetDollarDenomination(\n              tokenOneAddress,\n              tokenTwoAddress,\n              result,\n              amount\n            );\n            console.log(\"in token2\", dollarValue);\n            setTokenOneValue(a);\n            const ratio = Number(amount) / Number(a);\n            setSharePoolValue(ratio.toFixed(10));\n            setAmountIn(\"TK2\");\n            let amountOut = BigNumber(a * 10 ** tokenTwo.decimals).toFixed();\n            const minimumReceived =\n              Number(amountOut) -\n              (Number(amountOut) * slippagePercentage) / 100;\n            setMinReceived(minimumReceived);\n            await calculatePriceImpact(\n              tokenType,\n              a,\n              add2ForPriceImpact,\n              add1ForPriceImpact,\n              isPriceImpact\n            );\n          }\n        }\n      }\n      if (tokenOne.address && tokenTwo.address) {\n        let dec = 0;\n        if (tokenTwo.address === \"BNB\") {\n          // alert(\"here\");\n          dec = await ContractServices.getDecimals(WETH);\n          // console.log(\"deccc\", dec);\n        } else {\n          dec = await ContractServices.getDecimals(tokenTwo.address);\n        }\n\n        console.log(\"[###] dec\", dec);\n        setSelectedTokenDecimal(dec);\n        setDisabled(false);\n        let a1 = add1ForPriceImpact,\n          a2 = add2ForPriceImpact;\n        let currentPairAddress;\n        if (a1 === \"BNB\") {\n          a1 = WETH; //WETH\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else if (a2 === \"BNB\") {\n          a2 = WETH; //WETH\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        } else {\n          currentPairAddress = await ExchangeService.getPair(a1, a2);\n        }\n        if (\n          currentPairAddress !== \"0x0000000000000000000000000000000000000000\"\n        ) {\n          setCurrentPairAddress(currentPairAddress);\n          const lpTokenBalance = await ContractServices.getTokenBalance(\n            currentPairAddress,\n            isUserConnected\n          );\n          setLpTokenBalance(lpTokenBalance);\n          //const reserves = await ExchangeService.getReserves(currentPairAddress);\n          //setSharePoolValue(ratio.toFixed(2));\n          setFirstProvider(false);\n          setShowPoolShare(true);\n          setDisabled(false);\n        } else {\n          setCurrentPairAddress(\"\");\n          setFirstProvider(true);\n          setShowPoolShare(true);\n          setLpTokenBalance(0);\n          setDisabled(true);\n        }\n      }\n      dispatch(stopLoading());\n    } catch (e) {\n      console.log(e);\n      toast.error(\"Something went wrong!\");\n      dispatch(stopLoading());\n    }\n  };\n\n  const calculatePriceImpact = async (\n    tokenType,\n    amount,\n    a1,\n    a2,\n    isPriceImpact\n  ) => {\n    let calPriceImpact;\n    let priceImpact;\n\n    const currentPairAddress = await ExchangeService.getPair(a1, a2);\n    const reserve = await ExchangeService.getReserves(currentPairAddress);\n    const tokenZero = await ExchangeService.getTokenZero(currentPairAddress);\n    const tokenOne = await ExchangeService.getTokenOne(currentPairAddress);\n    const decimalZero = await ContractServices.getDecimals(tokenZero);\n    const decimalOne = await ContractServices.getDecimals(tokenOne);\n    if (tokenZero.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[0]) / 10 ** decimalZero;\n\n      calPriceImpact = (amount / res) * 100;\n      priceImpact =\n        calPriceImpact - (calPriceImpact * LIQUIDITY_PROVIDER_FEE) / 100;\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n    if (tokenOne.toLowerCase() === a1.toLowerCase()) {\n      const res = Number(reserve[1]) / 10 ** decimalOne;\n\n      calPriceImpact = (amount / res) * 100;\n      priceImpact =\n        calPriceImpact - (calPriceImpact * LIQUIDITY_PROVIDER_FEE) / 100;\n      if (isPriceImpact) {\n        Number(priceImpact * 2);\n      }\n      setPriceImpact(priceImpact.toFixed(5));\n    }\n  };\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n  const handleCloseSettings = () => setShowSettings(false);\n  const handleCloseRecent = () => setShowRecent(false);\n  const handleBalance = async () => {\n    const address = amountIn === \"TK1\" ? tokenTwo.address : tokenOne.address;\n\n    let balance;\n\n    if (address === \"BNB\") {\n      balance = await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      balance = await ContractServices.getTokenBalance(\n        address,\n        isUserConnected\n      );\n    }\n    if (amountIn === \"TK1\") {\n      setTokenTwoBalance(balance);\n    }\n    if (amountIn === \"TK2\") {\n      setTokenOneBalance(balance);\n    }\n  };\n  const handleSwap = async () => {\n    // alert(\"kkk\");\n    // debugger;\n    // const acc = await ContractServices.getDefaultAccount();\n    const acc = isUserConnected;\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    setSwapModal(false);\n    let value = 0,\n      checkBNBforTK1 = false,\n      checkBNBforTK2 = false;\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    let a1 = tokenOne.address,\n      a2 = tokenTwo.address;\n\n    if (tokenOne.address === \"BNB\") {\n      a1 = WETH;\n      checkBNBforTK1 = true;\n      value = tokenOneValue;\n    }\n    if (tokenTwo.address === \"BNB\") {\n      a2 = WETH;\n      checkBNBforTK2 = true;\n      value = tokenTwoValue;\n    }\n    if (value > 0) {\n      value = BigNumber(value * 10 ** 18).toFixed();\n    }\n    if (checkBNBforTK1) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK1(dl, value);\n      try {\n        // console.log(\"ww\", isUserConnected.toString());\n\n        const result =\n          amountIn === \"TK1\"\n            ? await ExchangeService.swapExactETHForTokens(\n                data,\n                handleBalance,\n                a1,\n                a2\n              )\n            : await ExchangeService.swapETHForExactTokens(data);\n\n        dispatch(stopLoading());\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else if (checkBNBforTK2) {\n      dispatch(startLoading());\n      const data = await handleBNBSwapForTK2(value);\n      try {\n        const result =\n          amountIn === \"TK1\"\n            ? await ExchangeService.swapExactTokensForETH(data, a1, a2)\n            : await ExchangeService.swapTokensForExactETH(data, a1, a2);\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      dispatch(startLoading());\n      let pair;\n      const checkPair = await ExchangeService.getPair(a1, a2);\n\n      if (checkPair !== \"0x0000000000000000000000000000000000000000\") {\n        pair = [a1, a2];\n      } else {\n        const pairs = await checkPairWithBNBOrUSDT(a1, a2);\n        if (pairs) {\n          pair = pairs;\n        }\n      }\n      let data = await handleSwapAmoutnIn(value);\n      data.path = pair;\n      try {\n        const result =\n          amountIn === \"TK1\"\n            ? await ExchangeService.swapExactTokensForTokens(data, a1, a2)\n            : await ExchangeService.swapTokensForExactTokens(data, a1, a2);\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Swap ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n\n  const handleSwapAmoutnIn = async (value) => {\n    let amountAMin;\n    let amountBMin;\n\n    if (amountIn == \"TK1\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(\n        amountBDesired - (amountBDesired * slippagePercentage) / 100\n      ).toFixed();\n    }\n\n    if (amountIn == \"TK2\") {\n      let amountADesired = tokenOneValue * 10 ** tokenOne.decimals;\n      let amountBDesired = tokenTwoValue * 10 ** tokenTwo.decimals;\n\n      amountAMin = BigNumber(amountADesired).toFixed();\n      amountBMin = BigNumber(\n        amountBDesired + (amountBDesired * slippagePercentage) / 100\n      ).toFixed();\n    }\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    return {\n      amountIn: amountAMin.toString(),\n      amountOutMin: amountBMin.toString(),\n      path: [tokenOne.address, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value: value.toString(),\n    };\n  };\n  const handleBNBSwapForTK1 = async (dl, value) => {\n    let amountOutMin;\n    if (amountIn === \"TK1\") {\n      let amountOut = BigNumber(\n        Math.floor(tokenTwoValue * 10 ** tokenTwo.decimals)\n      ).toFixed();\n\n      amountOutMin = BigNumber(\n        Math.floor(\n          Number(amountOut) - (Number(amountOut) * slippagePercentage) / 100\n        )\n      ).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountOut = BigNumber(\n        Math.floor(tokenOneValue * 10 ** tokenOne.decimals)\n      ).toFixed();\n      amountOutMin = BigNumber(Math.floor(amountOut)).toFixed();\n      amountOutMin = amountOutMin.toString();\n    }\n\n    return {\n      amountOutMin: amountOutMin?.toString(),\n      path: [WETH, tokenTwo.address],\n      to: isUserConnected,\n      deadline: dl,\n      value,\n    };\n  };\n\n  const handleBNBSwapForTK2 = async (value) => {\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (amountIn === \"TK1\") {\n      let amountOut = tokenTwoValue * 10 ** tokenOne.decimals;\n      let amountIn = BigNumber(\n        Math.floor(tokenOneValue * 10 ** tokenOne.decimals)\n      ).toFixed();\n      let amountOutMin = BigNumber(\n        Math.floor(amountOut - (amountOut * slippagePercentage) / 100)\n      ).toFixed();\n      // const amount = Math.floor(value);\n      return {\n        amountIn,\n        amountOutMin,\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n    }\n\n    if (amountIn === \"TK2\") {\n      let amountIn = tokenTwoValue * 10 ** tokenTwo.decimals;\n      let amountOut = BigNumber(\n        Math.floor(tokenOneValue * 10 ** tokenOne.decimals)\n      ).toFixed();\n      let amountInMax = BigNumber(\n        Math.floor(amountIn + (amountIn * slippagePercentage) / 100)\n      ).toFixed();\n      // const amount = Math.floor(value);\n      return {\n        amountOut: amountOut.toString(),\n        amountInMax: amountInMax.toString(),\n        path: [tokenOne.address, WETH],\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n    }\n  };\n  const handleSwitchCurrencies = () => {\n    setTokenOneValue(tokenTwoValue);\n    setTokenTwoValue(tokenOneValue);\n    setCurrencyNameForTokenOne(tokenTwoCurrency);\n    setCurrencyNameForTokenTwo(tokenOneCurrency);\n    setTokenOneBalance(tokenTwoBalance);\n    setTokenTwoBalance(tokenOneBalance);\n    setTokenOneIcon(tokenTwoIcon);\n    setTokenTwoIcon(tokenOneIcon);\n    setTokenOne(tokenTwo);\n    setTokenTwo(tokenOne);\n    amountIn == \"TK1\" ? setAmountIn(\"TK2\") : setAmountIn(\"TK1\");\n  };\n  //call web3 approval function\n  const handleTokenApproval = async (tokenType) => {\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // const value = (2*256 - 1).toString();\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(\n        isUserConnected,\n        value,\n        MAIN_CONTRACT_LIST.router.address,\n        tokenAddress\n      );\n      if (r.code === 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash,\n        };\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n  const handleApprovalButton = (tokenType) => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return (\n        <Col className=\"swapBtn_col\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenOne.symbol}`}\n            onClick={() => handleTokenApproval(tokenType)}\n            disabled={approvalConfirmation}\n          />\n        </Col>\n      );\n    }\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return (\n        <Col className=\"swapBtn_col\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenTwo.symbol}`}\n            onClick={() => handleTokenApproval(tokenType)}\n            disabled={approvalConfirmation}\n          />\n        </Col>\n      );\n    }\n    //dead code\n    return null;\n  };\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    //props.backBtn();\n    //window.location.reload();\n  };\n  useEffect(async () => {\n    await checkTokenORCurrencyBalance(\"BNB\");\n  }, []);\n  const checkTokenORCurrencyBalance = async (address) => {\n    if (address === \"BNB\") {\n      return await ContractServices.getBNBBalance(isUserConnected);\n    } else {\n      return await ContractServices.getTokenBalance(address, isUserConnected);\n    }\n  };\n  const liquidityProviderFee = () => {\n    const value = amountIn === \"TK1\" ? tokenOneValue : tokenTwoValue;\n    const tokenCurrency =\n      amountIn === \"TK1\" ? tokenOneCurrency : tokenTwoCurrency;\n    let lpf = (Number(value) * 2) / 1000;\n    lpf = BigNumber(lpf).toFixed(9);\n    const calLpf = lpf + \" \" + tokenCurrency;\n    return calLpf;\n  };\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection\">\n        <CardCustom>\n          <div className=\"settingSec\">\n            <h4>Exchange</h4>\n            <div className=\"settingIcon\">\n              <img\n                src={iconTimer}\n                onClick={() => setShowRecent(true)}\n                className=\"timerImg\"\n              />\n              <img src={SettingIcon} onClick={() => settinghandleShow(true)} />\n            </div>\n          </div>\n          <SelectCoin\n            label={`Balance: ${tokenOneBalance}`}\n            coinImage={tokenOne?.icon}\n            value={tokenOneCurrency}\n            onClick={() => onHandleOpenModal(\"TK1\")}\n            inputLabel=\"Input\"\n            className=\"mb-0\"\n            placeholder=\"0.0\"\n            onChange={(e) => handleTokenValue(e.target.value, \"TK1\")}\n            max={max}\n            onMax={() => handleMaxBalance(\"TK1\")}\n            defaultValue={tokenOneValue}\n          />\n          <div className=\"convert_plus\" onClick={handleSwitchCurrencies}>\n            <img src={ArrowDown} />\n          </div>\n          <SelectCoin\n            label={`Balance: ${tokenTwoBalance}`}\n            coinImage={tokenTwo?.icon}\n            value={tokenTwoCurrency}\n            onClick={() => onHandleOpenModal(\"TK2\")}\n            inputLabel=\"Input\"\n            className=\"mb-0\"\n            placeholder=\"0.0\"\n            onChange={(e) => handleTokenValue(e.target.value, \"TK2\")}\n            max={false}\n            defaultValue={tokenTwoValue}\n          />\n          {slippagePercentage && (\n            <Col className=\"priceSec_col\">\n              <div>\n                {!isDisabled && isUserConnected && <h5>Price</h5>}\n                <h5>Slippage Tolerance</h5>\n              </div>\n              <div className=\"text-end\">\n                <h5>\n                  {!isDisabled && isUserConnected && (\n                    <>\n                      {sharePoolValue} {tokenOneCurrency} per {tokenTwoCurrency}\n                    </>\n                  )}\n                  {/* <img\n                    src={SwitchIcon}\n                    alt=\"swap_icon\"\n                    className=\"ms-2\"\n                  /> */}\n                </h5>\n                <h5>{`${slippagePercentage}%`}</h5>\n              </div>\n            </Col>\n          )}\n          {handleApprovalButton(\"TK1\")}\n          {handleApprovalButton(\"TK2\")}\n          {/* <Col className=\"swapBtn_col\">\n            <ButtonPrimary\n              className=\"swapBtn\"\n              title=\"Approve\"\n              onClick={() => handleShow1(true)}\n            />\n            <ButtonPrimary\n              className=\"swapBtn dismissBtn\"\n              title=\"Dismiss\"\n              onClick={() => handleShow1(true)}\n            />\n          </Col> */}\n          <Col className=\"swapBtn_col\">\n            {isDisabled && !isUserConnected && (\n              <ButtonPrimary\n                className=\"swapBtn\"\n                onClick={() => setWalletShow(true)}\n                title={\"Unlock Wallet\"}\n              />\n            )}\n            {/* ******* delete below button while enabling swap ******* */}\n            {/* {<ButtonPrimary disabled className=\"swapBtn\" title={'Swap'} />} */}\n            {/* ******* uncomment both of the below buttons while enabling swap ******* */}\n            {isDisabled && isUserConnected && (\n              <ButtonPrimary disabled className=\"swapBtn\" title={btnText} />\n            )}\n            {!isDisabled && isUserConnected && (\n              <ButtonPrimary\n                className=\"swapBtn\"\n                onClick={() => setSwapModal(!openSwapModal)}\n                title={\"Swap\"}\n              />\n            )}\n          </Col>\n        </CardCustom>\n        {!isDisabled && isUserConnected && (\n          <div className=\"card_style card_style_bottom\">\n            <ul>\n              <li>\n                Minimum received:\n                <span>\n                  {formatDown(minimumReceived, selectedTokenDecimal).toFixed(9)}\n                </span>\n              </li>\n              <li>\n                Price impact:<sapn>{priceImpact}%</sapn>\n              </li>\n              <li>\n                Liquidity provider fee:<sapn>{liquidityProviderFee()}</sapn>\n              </li>\n            </ul>\n          </div>\n        )}\n      </Container>\n      <ModalCurrency\n        show={modalCurrency}\n        handleShow={setModalCurrency}\n        handleClose={setModalCurrency}\n        tokenList={filteredTokenList}\n        selectCurrency={onHandleSelectCurrency}\n        searchToken={handleSearchToken}\n        searchByName={setSearch}\n        tokenType={tokenType}\n        handleOrder={setFilteredTokenList}\n        currencyName={selectedCurrency}\n      />\n      <ConnectWallet\n        show={walletShow}\n        handleShow={handleShow1}\n        handleClose={handleClose1}\n      />\n      <SettingModal\n        show={settingShow}\n        handleShow={settinghandleShow}\n        handleClose={settingClose}\n      />\n      {openSwapModal && (\n        <SwapModal\n          handleSwap={handleSwap}\n          closeModal={() => setSwapModal(!openSwapModal)}\n          tokenOneCurrency={tokenOneCurrency}\n          tokenTwoCurrency={tokenTwoCurrency}\n          tokenOneValue={tokenOneValue}\n          tokenTwoValue={tokenTwoValue}\n          tokenOneIcon={tokenOne?.icon}\n          tokenTwoIcon={tokenTwo?.icon}\n          sharePoolValue={sharePoolValue}\n          priceImpact={priceImpact}\n          liquidityProviderFee={liquidityProviderFee()}\n          show={openSwapModal}\n        />\n      )}\n      <RecentTransactions show={showRecent} handleClose={handleCloseRecent} />\n      <TransactionalModal\n        show={showTransactionModal}\n        handleClose={closeTransactionModal}\n        txHash={txHash}\n      />\n    </>\n  );\n};\n\nexport default Exchange;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}