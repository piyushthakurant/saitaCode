{"ast":null,"code":"import Web3 from \"web3\";\nimport TOKEN_ABI from \"../assets/ABI/tokenContract.ABI.json\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { ERRORS, LS_KEYS, NETWORK_CHAIN_ID, NETWORK_CHAIN_NAME, NETWORK_LINK, NETWORK_NATIVE_CURRENCY_DECIMALS, NETWORK_NATIVE_CURRENCY_NAME, NETWORK_NATIVE_CURRENCY_SYMBOL, NETWORK_RPC_URL, WALLET_TYPE } from \"../constant\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // import { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\n\nlet web3Object;\nlet contractOjbect;\nlet currentContractAddress;\nlet tokenContractObject;\nlet currentTokenAddress;\nconst selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\nlet walletTypeObject = selWalletType || WALLET_TYPE.NONE;\nlet walletConnectProvider; // const callWeb3ForCoinBase = async (provider) {\n// }\n\nconst callWeb3ForWalletConnect = async provider => {\n  // alert(\"in waaa\");\n  provider = new WalletConnectProvider({\n    rpc: {\n      // 97: \"https://data-seed-prebsc-2-s3.binance.org:8545/\",\n      // 56: \"https://bsc-dataseed.binance.org/\",\n      1: \"https://eth.getblock.io/dedicated/mainnet/1cd01716-7d96-44f5-9a90-7416a4ac657b/\"\n    } // chainId: 1,\n    // network: \"mainnet\",\n    // qrcode: true,\n    // qrcodeModalOptions: {\n    //   mobileLinks: [\"metamask\", \"walletConnect\"],\n    //   desktopLinks: [\"encrypted ink\"],\n    // },\n\n  }); // debugger;\n\n  provider.on(\"accountsChanged\", accounts => {\n    console.log(accounts);\n  });\n  provider.on(\"chainChanged\", chainId => {\n    console.log(chainId);\n  });\n  provider.on(\"disconnect\", (code, reason) => {\n    console.log(code, reason);\n  });\n  const results = await provider.enable();\n  console.log(\"[tur461] setting web3object to walletconnect provider\");\n  web3Object = new Web3(provider); // const contract = new web3Object.eth.Contract(\n  //   TOKEN_ABI,\n  //   \"0xaC0DBd7a6f4D50B51aca4e8D363875922CBBE29C\"\n  // );\n  // const txHash = await contract.methods\n  //   .approve(provider.accounts[0], \"1000000000000000000000\")\n  //   .send({\n  //     from: provider.accounts[0],\n  //   });\n  // const txHash = await web3Object.eth.sendTransaction({\n  //   from: provider.accounts[0],\n  //   data: web3Object.eth.abi.encodeFunctionCall(\n  //     TOKEN_ABI.filter((o) => o.type === \"function\" && o.name === \"approve\")[0],\n  //     [provider.accounts[0], \"1000000000000000000000\"]\n  //   ),\n  // });\n  // console.log(\"got an web3 instance and called approve:\", txHash);\n\n  return {\n    provider,\n    web3: web3Object\n  };\n}; //only for lp tokens\n\n\nconst convertToDecimals = async value => {\n  const decimals = 18;\n  return Number(value) / 10 ** decimals;\n};\n\nconst isMetamaskInstalled = async type => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const {\n    ethereum,\n    web3\n  } = window;\n  const result = Boolean(ethereum && ethereum.isMetaMask);\n  walletTypeObject = WALLET_TYPE.META_MASK;\n\n  if (result) {\n    //metamask\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (ethereum) {\n    //trust wallet\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (web3) {\n    //trustwallet\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n  } else {\n    if (type) {\n      toast.error(`Install ${type} extension first!`);\n    }\n\n    return false;\n  }\n};\n\nconst isBinanceChainInstalled = async () => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const {\n    BinanceChain\n  } = window;\n\n  if (BinanceChain) {\n    walletTypeObject = WALLET_TYPE.BSC;\n\n    try {\n      const accounts = await BinanceChain.request({\n        method: \"eth_requestAccounts\"\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else {\n    toast.error(\"Install BinanceChain extension first!\");\n    return false;\n  }\n};\n\nconst walletWindowListener = async () => {\n  const {\n    BinanceChain,\n    ethereum\n  } = window;\n\n  if (walletTypeObject === WALLET_TYPE.META_MASK) {\n    const result = Boolean(ethereum && ethereum.isMetaMask);\n\n    if (result) {\n      if (ethereum.chainId !== NETWORK_CHAIN_ID) {\n        try {\n          const chain = await ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{\n              chainId: NETWORK_CHAIN_ID\n            }]\n          });\n        } catch (error) {\n          console.log(\"metamask error\", error);\n\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4902) {\n            try {\n              const addChain = await ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [{\n                  chainId: NETWORK_CHAIN_ID,\n                  chainName: NETWORK_CHAIN_NAME,\n                  nativeCurrency: {\n                    name: NETWORK_NATIVE_CURRENCY_NAME,\n                    symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                    decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS)\n                  },\n                  rpcUrls: [NETWORK_RPC_URL],\n                  blockExplorerUrls: [NETWORK_LINK]\n                }]\n              });\n              window.location.reload();\n            } catch (error) {}\n          }\n        }\n      }\n\n      ethereum.on(\"chainChanged\", async chainId => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await ethereum.request({\n              method: \"wallet_switchEthereumChain\",\n              params: [{\n                chainId: NETWORK_CHAIN_ID\n              }]\n            });\n          } catch (error) {\n            console.log(\"metamask error\", error);\n\n            if ((error === null || error === void 0 ? void 0 : error.code) === 4902) {\n              try {\n                const addChain = await ethereum.request({\n                  method: \"wallet_addEthereumChain\",\n                  params: [{\n                    chainId: await window.ethereum.chainId,\n                    chainName: NETWORK_CHAIN_NAME,\n                    nativeCurrency: {\n                      name: NETWORK_NATIVE_CURRENCY_NAME,\n                      symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                      decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS)\n                    },\n                    rpcUrls: [NETWORK_RPC_URL],\n                    blockExplorerUrls: [NETWORK_LINK]\n                  }]\n                });\n              } catch (error) {}\n            }\n          }\n        }\n      });\n    }\n  }\n\n  if (walletTypeObject === WALLET_TYPE.BSC) {\n    if (BinanceChain) {\n      BinanceChain.on(\"chainChanged\", async chainId => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await BinanceChain.request({\n              method: \"wallet_switchEthereumChain\",\n              params: [{\n                chainId: NETWORK_CHAIN_ID\n              }]\n            });\n          } catch (error) {\n            console.log(\"binance error\", error);\n          }\n        }\n      });\n    }\n  }\n}; // this function sets global provider\n\n\nconst callWeb3 = async () => {\n  if (web3Object) {\n    // if provider is already set\n    console.log(\"we already have web3Object\", web3Object);\n    return web3Object;\n  } // if not, then set the provider as per wallet selected\n\n\n  const {\n    ethereum,\n    web3,\n    BinanceChain\n  } = window; // if wallet type is metamask\n\n  if (walletTypeObject === WALLET_TYPE.META_MASK) {\n    console.log(\"[tur461] metamask\");\n\n    if (ethereum && ethereum.isMetaMask) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (ethereum) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (web3) {\n      web3Object = new Web3(web3.currentProvider);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  } else if (walletTypeObject === WALLET_TYPE.BSC) {\n    console.log(\"[tur461] bsc\");\n\n    if (BinanceChain) {\n      web3Object = new Web3(BinanceChain);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n      return null;\n    }\n  } else if (walletTypeObject === WALLET_TYPE.WALLET_CONNECT) {\n    web3Object = (await callWeb3ForWalletConnect()).web3;\n  } else {\n    console.log(\"[tur461] callWeb3 unhandled wallet type: \" + walletTypeObject);\n    return null;\n  }\n}; // this function uses that global provider\n// by calling above function\n// this function is used to get contract instance\n\n\nconst callContract = async (contractAddress, contractABI) => {\n  if (contractOjbect && currentContractAddress && currentContractAddress.toLowerCase() === contractAddress.toLowerCase()) {\n    return contractOjbect;\n  }\n\n  const web3Object = await callWeb3();\n\n  if (web3Object) {\n    currentContractAddress = contractAddress;\n    contractOjbect = new web3Object.eth.Contract(contractABI, contractAddress);\n    return contractOjbect;\n  }\n}; // this function does same as the above function\n// but is for token contract instance\n\n\nconst callTokenContract = async tokenAddress => {\n  if (tokenContractObject && currentContractAddress && currentTokenAddress.toLowerCase() === tokenAddress.toLowerCase()) {\n    return tokenContractObject;\n  }\n\n  const web3Object = await callWeb3();\n\n  if (web3Object) {\n    currentTokenAddress = tokenAddress;\n    tokenContractObject = new web3Object.eth.Contract(TOKEN_ABI, currentTokenAddress);\n    return tokenContractObject;\n  }\n};\n\nconst calculateGasPrice = async () => {\n  const web3 = await callWeb3();\n\n  if (web3) {\n    const safeGasPrice = 1.2 * (await web3.eth.getGasPrice());\n    return safeGasPrice.toFixed();\n  }\n};\n\nconst getDefaultAccount = async () => {\n  const web3 = await callWeb3();\n\n  if (web3) {\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"accounts sss\", accounts);\n    return accounts[0];\n  }\n};\n\nconst approveToken = async (address, value, mainContractAddress, tokenAddress) => {\n  try {\n    const gasPrice = await calculateGasPrice();\n    const contract = await callTokenContract(tokenAddress); //calculate estimate gas limit\n\n    const gas = await contract.methods.approve(mainContractAddress, value).estimateGas({\n      from: address\n    });\n    return await contract.methods.approve(mainContractAddress, value).send({\n      from: address,\n      gasPrice,\n      gas\n    });\n  } catch (error) {\n    return error;\n  }\n};\n\nconst allowanceToken = async (tokenAddress, mainContractAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods.allowance(address, mainContractAddress).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenBalanceForMax = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n\n    if (contract) {\n      console.log(\"### addr:\", tokenAddress, address);\n      const decimals = await contract.methods.decimals().call();\n      let result = await contract.methods.balanceOf(address).call();\n      result = Number(result) / 10 ** decimals;\n      return Number(result);\n    }\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return 0;\n  }\n};\n\nconst getTokenBalance = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress); // if (!contract) return toast.error(ERRORS.SEL_WALLET);\n\n    if (contract) {\n      console.log(\"### addr:\", tokenAddress, address);\n      const decimals = await contract.methods.decimals().call();\n      let result = await contract.methods.balanceOf(address).call();\n      result = (Number(result) / 10 ** decimals).toFixed(5);\n      console.log(result);\n      return Number(result);\n    }\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return 0;\n  }\n};\n\nconst getTokenBalanceFull = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.balanceOf(address).call();\n    result = result / 10 ** decimals;\n    return result;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return 0;\n  }\n};\n\nconst getDecimals = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.decimals().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenName = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.name().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenSymbol = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.symbol().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getBNBBalanceForMax = async address => {\n  try {\n    const web3 = await callWeb3();\n\n    if (web3) {\n      let result = await web3.eth.getBalance(address); //result = (Number(result) / 10 ** 18).toFixed(5);\n\n      return Number(result);\n    }\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getBNBBalance = async address => {\n  try {\n    const web3 = await callWeb3();\n\n    if (web3) {\n      let result = await web3.eth.getBalance(address);\n      result = (Number(result) / 10 ** 18).toFixed(5);\n      return Number(result);\n    }\n  } catch (error) {\n    return error;\n  }\n};\n\nconst setWalletType = async walletType => {\n  walletTypeObject = walletType;\n};\n\nconst getTotalSupply = async tokenAddress => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n\n    if (contract) {\n      let result = await contract.methods.totalSupply().call();\n      const decimals = await contract.methods.decimals().call();\n      result = Number(result) / 10 ** Number(decimals);\n      return result;\n    }\n  } catch (error) {\n    return error;\n  }\n};\n\nconst web3ErrorHandle = async err => {\n  let message = \"Transaction Reverted!\";\n\n  if (err.message.indexOf(\"Rejected\") > -1) {\n    message = \"User denied the transaction!\";\n  } else if (err.message && err.message.indexOf(\"User denied\") > -1) {\n    message = \"User denied the transaction!\";\n  } else if (err.message && err.message.indexOf(\"INSUFFICIENT_B\") > -1) {\n    message = \"Insufficient value of second token!\";\n  } else if (err.message && err.message.indexOf(\"INSUFFICIENT_A\") > -1) {\n    message = \"Insufficient value of first token!\";\n  } else {\n    console.log(err, err.message);\n  }\n\n  return message;\n};\n\nconst getLiquidity100Value = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.balanceOf(address).call();\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n}; //exporting functions\n\n\nexport const ContractServices = {\n  isMetamaskInstalled,\n  isBinanceChainInstalled,\n  callWeb3,\n  web3Object,\n  callContract,\n  calculateGasPrice,\n  approveToken,\n  getTokenBalance,\n  getBNBBalanceForMax,\n  getTokenBalanceFull,\n  getDecimals,\n  getTokenName,\n  getTokenSymbol,\n  getBNBBalance,\n  setWalletType,\n  allowanceToken,\n  getTotalSupply,\n  convertToDecimals,\n  getTokenBalanceForMax,\n  web3ErrorHandle,\n  getDefaultAccount,\n  callTokenContract,\n  walletWindowListener,\n  walletTypeObject,\n  getLiquidity100Value,\n  callWeb3ForWalletConnect\n};","map":{"version":3,"names":["Web3","TOKEN_ABI","toast","ERRORS","LS_KEYS","NETWORK_CHAIN_ID","NETWORK_CHAIN_NAME","NETWORK_LINK","NETWORK_NATIVE_CURRENCY_DECIMALS","NETWORK_NATIVE_CURRENCY_NAME","NETWORK_NATIVE_CURRENCY_SYMBOL","NETWORK_RPC_URL","WALLET_TYPE","WalletConnectProvider","web3Object","contractOjbect","currentContractAddress","tokenContractObject","currentTokenAddress","selWalletType","localStorage","getItem","walletTypeObject","NONE","walletConnectProvider","callWeb3ForWalletConnect","provider","rpc","on","accounts","console","log","chainId","code","reason","results","enable","web3","convertToDecimals","value","decimals","Number","isMetamaskInstalled","type","ethereum","window","result","Boolean","isMetaMask","META_MASK","request","method","err","error","message","eth","getAccounts","isBinanceChainInstalled","BinanceChain","BSC","walletWindowListener","chain","params","addChain","chainName","nativeCurrency","name","symbol","rpcUrls","blockExplorerUrls","location","reload","callWeb3","currentProvider","WALLET_CONNECT","callContract","contractAddress","contractABI","toLowerCase","Contract","callTokenContract","tokenAddress","calculateGasPrice","safeGasPrice","getGasPrice","toFixed","getDefaultAccount","approveToken","address","mainContractAddress","gasPrice","contract","gas","methods","approve","estimateGas","from","send","allowanceToken","allowance","call","getTokenBalanceForMax","balanceOf","getTokenBalance","getTokenBalanceFull","getDecimals","getTokenName","getTokenSymbol","getBNBBalanceForMax","getBalance","getBNBBalance","setWalletType","walletType","getTotalSupply","totalSupply","web3ErrorHandle","indexOf","getLiquidity100Value","ContractServices"],"sources":["/data/test/saitaClientGit/src/services/ContractServices.js"],"sourcesContent":["import Web3 from \"web3\";\nimport TOKEN_ABI from \"../assets/ABI/tokenContract.ABI.json\";\nimport { toast } from \"../components/Toast/Toast\";\nimport {\n  ERRORS,\n  LS_KEYS,\n  NETWORK_CHAIN_ID,\n  NETWORK_CHAIN_NAME,\n  NETWORK_LINK,\n  NETWORK_NATIVE_CURRENCY_DECIMALS,\n  NETWORK_NATIVE_CURRENCY_NAME,\n  NETWORK_NATIVE_CURRENCY_SYMBOL,\n  NETWORK_RPC_URL,\n  WALLET_TYPE,\n} from \"../constant\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n// import { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\n\nlet web3Object;\nlet contractOjbect;\nlet currentContractAddress;\nlet tokenContractObject;\nlet currentTokenAddress;\nconst selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\nlet walletTypeObject = selWalletType || WALLET_TYPE.NONE;\nlet walletConnectProvider;\n\n// const callWeb3ForCoinBase = async (provider) {\n\n// }\n\nconst callWeb3ForWalletConnect = async (provider) => {\n  // alert(\"in waaa\");\n  provider = new WalletConnectProvider({\n    rpc: {\n      // 97: \"https://data-seed-prebsc-2-s3.binance.org:8545/\",\n      // 56: \"https://bsc-dataseed.binance.org/\",\n      1: \"https://eth.getblock.io/dedicated/mainnet/1cd01716-7d96-44f5-9a90-7416a4ac657b/\",\n    },\n    // chainId: 1,\n    // network: \"mainnet\",\n    // qrcode: true,\n    // qrcodeModalOptions: {\n    //   mobileLinks: [\"metamask\", \"walletConnect\"],\n    //   desktopLinks: [\"encrypted ink\"],\n    // },\n  });\n  // debugger;\n  provider.on(\"accountsChanged\", (accounts) => {\n    console.log(accounts);\n  });\n\n  provider.on(\"chainChanged\", (chainId) => {\n    console.log(chainId);\n  });\n\n  provider.on(\"disconnect\", (code, reason) => {\n    console.log(code, reason);\n  });\n\n  const results = await provider.enable();\n  console.log(\"[tur461] setting web3object to walletconnect provider\");\n  web3Object = new Web3(provider);\n  // const contract = new web3Object.eth.Contract(\n  //   TOKEN_ABI,\n  //   \"0xaC0DBd7a6f4D50B51aca4e8D363875922CBBE29C\"\n  // );\n  // const txHash = await contract.methods\n  //   .approve(provider.accounts[0], \"1000000000000000000000\")\n  //   .send({\n  //     from: provider.accounts[0],\n  //   });\n  // const txHash = await web3Object.eth.sendTransaction({\n  //   from: provider.accounts[0],\n  //   data: web3Object.eth.abi.encodeFunctionCall(\n  //     TOKEN_ABI.filter((o) => o.type === \"function\" && o.name === \"approve\")[0],\n  //     [provider.accounts[0], \"1000000000000000000000\"]\n  //   ),\n  // });\n  // console.log(\"got an web3 instance and called approve:\", txHash);\n  return { provider, web3: web3Object };\n};\n\n//only for lp tokens\nconst convertToDecimals = async (value) => {\n  const decimals = 18;\n  return Number(value) / 10 ** decimals;\n};\n\nconst isMetamaskInstalled = async (type) => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const { ethereum, web3 } = window;\n  const result = Boolean(ethereum && ethereum.isMetaMask);\n  walletTypeObject = WALLET_TYPE.META_MASK;\n  if (result) {\n    //metamask\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (ethereum) {\n    //trust wallet\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else if (web3) {\n    //trustwallet\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n  } else {\n    if (type) {\n      toast.error(`Install ${type} extension first!`);\n    }\n    return false;\n  }\n};\n\nconst isBinanceChainInstalled = async () => {\n  //Have to check the ethereum binding on the window object to see if it's installed\n  const { BinanceChain } = window;\n  if (BinanceChain) {\n    walletTypeObject = WALLET_TYPE.BSC;\n    try {\n      const accounts = await BinanceChain.request({\n        method: \"eth_requestAccounts\",\n      });\n      return accounts[0];\n    } catch (err) {\n      toast.error(err.message);\n      return false;\n    }\n  } else {\n    toast.error(\"Install BinanceChain extension first!\");\n    return false;\n  }\n};\n\nconst walletWindowListener = async () => {\n  const { BinanceChain, ethereum } = window;\n  if (walletTypeObject === WALLET_TYPE.META_MASK) {\n    const result = Boolean(ethereum && ethereum.isMetaMask);\n    if (result) {\n      if (ethereum.chainId !== NETWORK_CHAIN_ID) {\n        try {\n          const chain = await ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: NETWORK_CHAIN_ID }],\n          });\n        } catch (error) {\n          console.log(\"metamask error\", error);\n          if (error?.code === 4902) {\n            try {\n              const addChain = await ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                  {\n                    chainId: NETWORK_CHAIN_ID,\n                    chainName: NETWORK_CHAIN_NAME,\n                    nativeCurrency: {\n                      name: NETWORK_NATIVE_CURRENCY_NAME,\n                      symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                      decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS),\n                    },\n                    rpcUrls: [NETWORK_RPC_URL],\n                    blockExplorerUrls: [NETWORK_LINK],\n                  },\n                ],\n              });\n              window.location.reload();\n            } catch (error) {}\n          }\n        }\n      }\n\n      ethereum.on(\"chainChanged\", async (chainId) => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await ethereum.request({\n              method: \"wallet_switchEthereumChain\",\n              params: [{ chainId: NETWORK_CHAIN_ID }],\n            });\n          } catch (error) {\n            console.log(\"metamask error\", error);\n            if (error?.code === 4902) {\n              try {\n                const addChain = await ethereum.request({\n                  method: \"wallet_addEthereumChain\",\n                  params: [\n                    {\n                      chainId: await window.ethereum.chainId,\n                      chainName: NETWORK_CHAIN_NAME,\n                      nativeCurrency: {\n                        name: NETWORK_NATIVE_CURRENCY_NAME,\n                        symbol: NETWORK_NATIVE_CURRENCY_SYMBOL,\n                        decimals: Number(NETWORK_NATIVE_CURRENCY_DECIMALS),\n                      },\n                      rpcUrls: [NETWORK_RPC_URL],\n                      blockExplorerUrls: [NETWORK_LINK],\n                    },\n                  ],\n                });\n              } catch (error) {}\n            }\n          }\n        }\n      });\n    }\n  }\n  if (walletTypeObject === WALLET_TYPE.BSC) {\n    if (BinanceChain) {\n      BinanceChain.on(\"chainChanged\", async (chainId) => {\n        if (chainId !== NETWORK_CHAIN_ID) {\n          // toast.error('Select Binance Smart Chain Mainnet Network in wallet!')\n          try {\n            const chain = await BinanceChain.request({\n              method: \"wallet_switchEthereumChain\",\n              params: [{ chainId: NETWORK_CHAIN_ID }],\n            });\n          } catch (error) {\n            console.log(\"binance error\", error);\n          }\n        }\n      });\n    }\n  }\n};\n\n// this function sets global provider\n\nconst callWeb3 = async () => {\n  if (web3Object) {\n    // if provider is already set\n    console.log(\"we already have web3Object\", web3Object);\n    return web3Object;\n  }\n\n  // if not, then set the provider as per wallet selected\n  const { ethereum, web3, BinanceChain } = window;\n  // if wallet type is metamask\n  if (walletTypeObject === WALLET_TYPE.META_MASK) {\n    console.log(\"[tur461] metamask\");\n    if (ethereum && ethereum.isMetaMask) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (ethereum) {\n      web3Object = new Web3(ethereum);\n      return web3Object;\n    } else if (web3) {\n      web3Object = new Web3(web3.currentProvider);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n    }\n  } else if (walletTypeObject === WALLET_TYPE.BSC) {\n    console.log(\"[tur461] bsc\");\n    if (BinanceChain) {\n      web3Object = new Web3(BinanceChain);\n      return web3Object;\n    } else {\n      toast.error(\"You have to install Wallet!\");\n      return null;\n    }\n  } else if (walletTypeObject === WALLET_TYPE.WALLET_CONNECT) {\n    web3Object = (await callWeb3ForWalletConnect()).web3;\n  } else {\n    console.log(\"[tur461] callWeb3 unhandled wallet type: \" + walletTypeObject);\n    return null;\n  }\n};\n\n// this function uses that global provider\n// by calling above function\n// this function is used to get contract instance\nconst callContract = async (contractAddress, contractABI) => {\n  if (\n    contractOjbect &&\n    currentContractAddress &&\n    currentContractAddress.toLowerCase() === contractAddress.toLowerCase()\n  ) {\n    return contractOjbect;\n  }\n  const web3Object = await callWeb3();\n  if (web3Object) {\n    currentContractAddress = contractAddress;\n    contractOjbect = new web3Object.eth.Contract(contractABI, contractAddress);\n    return contractOjbect;\n  }\n};\n\n// this function does same as the above function\n// but is for token contract instance\nconst callTokenContract = async (tokenAddress) => {\n  if (\n    tokenContractObject &&\n    currentContractAddress &&\n    currentTokenAddress.toLowerCase() === tokenAddress.toLowerCase()\n  ) {\n    return tokenContractObject;\n  }\n  const web3Object = await callWeb3();\n  if (web3Object) {\n    currentTokenAddress = tokenAddress;\n    tokenContractObject = new web3Object.eth.Contract(\n      TOKEN_ABI,\n      currentTokenAddress\n    );\n    return tokenContractObject;\n  }\n};\n\nconst calculateGasPrice = async () => {\n  const web3 = await callWeb3();\n  if (web3) {\n    const safeGasPrice = 1.2 * (await web3.eth.getGasPrice());\n    return safeGasPrice.toFixed();\n  }\n};\n\nconst getDefaultAccount = async () => {\n  const web3 = await callWeb3();\n  if (web3) {\n    const accounts = await web3.eth.getAccounts();\n    console.log(\"accounts sss\", accounts);\n    return accounts[0];\n  }\n};\n\nconst approveToken = async (\n  address,\n  value,\n  mainContractAddress,\n  tokenAddress\n) => {\n  try {\n    const gasPrice = await calculateGasPrice();\n    const contract = await callTokenContract(tokenAddress);\n    //calculate estimate gas limit\n    const gas = await contract.methods\n      .approve(mainContractAddress, value)\n      .estimateGas({ from: address });\n\n    return await contract.methods\n      .approve(mainContractAddress, value)\n      .send({ from: address, gasPrice, gas });\n  } catch (error) {\n    return error;\n  }\n};\n\nconst allowanceToken = async (tokenAddress, mainContractAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    return await contract.methods\n      .allowance(address, mainContractAddress)\n      .call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenBalanceForMax = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) {\n      console.log(\"### addr:\", tokenAddress, address);\n      const decimals = await contract.methods.decimals().call();\n      let result = await contract.methods.balanceOf(address).call();\n      result = Number(result) / 10 ** decimals;\n      return Number(result);\n    }\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return 0;\n  }\n};\n\nconst getTokenBalance = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    // if (!contract) return toast.error(ERRORS.SEL_WALLET);\n    if (contract) {\n      console.log(\"### addr:\", tokenAddress, address);\n      const decimals = await contract.methods.decimals().call();\n      let result = await contract.methods.balanceOf(address).call();\n      result = (Number(result) / 10 ** decimals).toFixed(5);\n      console.log(result);\n      return Number(result);\n    }\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return 0;\n  }\n};\nconst getTokenBalanceFull = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    const decimals = await contract.methods.decimals().call();\n\n    let result = await contract.methods.balanceOf(address).call();\n    result = result / 10 ** decimals;\n\n    return result;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return 0;\n  }\n};\n\nconst getDecimals = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.decimals().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenName = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.name().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenSymbol = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.symbol().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getBNBBalanceForMax = async (address) => {\n  try {\n    const web3 = await callWeb3();\n    if (web3) {\n      let result = await web3.eth.getBalance(address);\n      //result = (Number(result) / 10 ** 18).toFixed(5);\n      return Number(result);\n    }\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getBNBBalance = async (address) => {\n  try {\n    const web3 = await callWeb3();\n    if (web3) {\n      let result = await web3.eth.getBalance(address);\n      result = (Number(result) / 10 ** 18).toFixed(5);\n      return Number(result);\n    }\n  } catch (error) {\n    return error;\n  }\n};\n\nconst setWalletType = async (walletType) => {\n  walletTypeObject = walletType;\n};\n\nconst getTotalSupply = async (tokenAddress) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) {\n      let result = await contract.methods.totalSupply().call();\n      const decimals = await contract.methods.decimals().call();\n      result = Number(result) / 10 ** Number(decimals);\n      return result;\n    }\n  } catch (error) {\n    return error;\n  }\n};\n\nconst web3ErrorHandle = async (err) => {\n  let message = \"Transaction Reverted!\";\n  if (err.message.indexOf(\"Rejected\") > -1) {\n    message = \"User denied the transaction!\";\n  } else if (err.message && err.message.indexOf(\"User denied\") > -1) {\n    message = \"User denied the transaction!\";\n  } else if (err.message && err.message.indexOf(\"INSUFFICIENT_B\") > -1) {\n    message = \"Insufficient value of second token!\";\n  } else if (err.message && err.message.indexOf(\"INSUFFICIENT_A\") > -1) {\n    message = \"Insufficient value of first token!\";\n  } else {\n    console.log(err, err.message);\n  }\n  return message;\n};\n\nconst getLiquidity100Value = async (tokenAddress, address) => {\n  try {\n    const contract = await callTokenContract(tokenAddress);\n    if (contract) return await contract.methods.balanceOf(address).call();\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\n//exporting functions\nexport const ContractServices = {\n  isMetamaskInstalled,\n  isBinanceChainInstalled,\n  callWeb3,\n  web3Object,\n  callContract,\n  calculateGasPrice,\n  approveToken,\n  getTokenBalance,\n  getBNBBalanceForMax,\n  getTokenBalanceFull,\n  getDecimals,\n  getTokenName,\n  getTokenSymbol,\n  getBNBBalance,\n  setWalletType,\n  allowanceToken,\n  getTotalSupply,\n  convertToDecimals,\n  getTokenBalanceForMax,\n  web3ErrorHandle,\n  getDefaultAccount,\n  callTokenContract,\n  walletWindowListener,\n  walletTypeObject,\n  getLiquidity100Value,\n  callWeb3ForWalletConnect,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}