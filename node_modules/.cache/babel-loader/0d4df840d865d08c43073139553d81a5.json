{"ast":null,"code":"var _jsxFileName = \"/data/test/saitaClientGit/src/pages/PoolGalaxy/PoolGalaxy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@restart/ui/esm/Button\";\nimport { Container, Col, Row, Form, InputGroup, FormControl, Tabs, Tab } from \"react-bootstrap\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport PoolIcon from \"../../assets/images/Pool-Header-Logo.svg\";\nimport \"./PoolGalaxy.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport BigNumber from \"bignumber.js\";\nimport GalaxyCard from \"../../components/GalaxyCard/GalaxyCard\";\nimport SAITA from \"../../assets/images/token_icons/SAITA.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport ReturnInvest from \"../../components/ReturnInvest/ReturnInvest\";\nimport { TOKEN_LIST, ANCHOR_BUSD_LP } from \"../../assets/tokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PoolGalaxy(props) {\n  _s();\n\n  const {\n    match: {\n      params\n    },\n    history\n  } = props;\n  const {\n    tab\n  } = params; // const handleTab = (data) => {\n  //   history.push(`${rootName}/farmplanets/${data}`);\n  // };\n\n  const handleClose = () => {\n    setStakeValue(null);\n    setShowStake(false);\n  };\n\n  const handleWithdrawClose = () => {\n    setStakeValue(null);\n    setShowStakeWithdraw(false);\n  };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const referralAddress = useSelector(state => state.persist.referralAddress);\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState(\"0x0000000000000000000000000000000000000000\");\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [saitaStats, setSaitaStats] = useState(null); //staking only\n\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  };\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  };\n\n  const handleRoiModal = (data, lpDetails, saitaId) => {\n    // console.log(data, lpDetails);\n    setSaitaStats(saitaId);\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  };\n\n  const handleIndex = index => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n  const getValue = async address => {\n    if (address != undefined) {\n      try {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        return val.toFixed(3);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }; //this will re-arrange locked pool to desired position\n\n\n  const getSortedPools = (array, from, to) => {\n    if (to === from) return array;\n    let target = array[from];\n    let increment = to < from ? -1 : 1;\n\n    for (let k = from; k != to; k += increment) {\n      array[k] = array[k + increment];\n    }\n\n    array[to] = target;\n    return array;\n  };\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    };\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n\n      if (ref === \"0x0000000000000000000000000000000000000000\") {\n        if (referralAddress && referralAddress !== \"0x0000000000000000000000000000000000000000\") {\n          ref = referralAddress;\n        }\n\n        setReferrer(ref);\n      }\n\n      const pL = Number(await FarmService.poolLength()); // console.log('qq', pL);\n\n      setPoolLength(pL); // let farmsTemp = [];\n\n      dispatch(stopLoading());\n      let activePoolsToSort = [];\n      let stakingOnlyArrayToSort = [];\n\n      for (let i = 0; i < pL; i++) {\n        const poolInfo = await FarmService.poolInfo(i, \"2\");\n        const saitaId = await FarmService.saitaId();\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        const dollarVal = await getValue(poolInfo.lpToken);\n\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms(inactiveFarms => [...inactiveFarms, {\n              poolInfo,\n              userInfo,\n              pid: i,\n              isLocked: saitaId == i ? true : false,\n              dollarVal\n            }]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // stakingOnlyArrayToSort.push({ poolInfo, userInfo, pid: i, saitaId })\n              setStakingOnly(stakingOnly => [...stakingOnly, {\n                poolInfo,\n                userInfo,\n                pid: i,\n                isLocked: false,\n                dollarVal\n              }]);\n            } // activePoolsToSort.push({ poolInfo, userInfo, pid: i, saitaId })\n\n\n            setFarms(farms => [...farms, {\n              poolInfo,\n              userInfo,\n              pid: i,\n              saitaId,\n              isLocked: false,\n              dollarVal\n            }]);\n          }\n        }\n      } // // this x is the current postion of lockedSaitaPool which we use to change it's position up to second later\n      // let lockedSaitaIndex =  activePoolsToSort.findIndex(x => x.pid == x.saitaId)\n      // // this will change position of lockedSaitaPool to index 1\n      // let sortedAllPools = getSortedPools(activePoolsToSort, lockedSaitaIndex, 1);\n      // //Now get unlocked saita pool details\n      // const unlockedSaitaPool = sortedAllPools.find(pool => pool.pid == '6');\n      // // again get index of lockedSaitaPool\n      // let newlockedSaitaIndex =  sortedAllPools.findIndex(x => x.pid == x.saitaId)\n      // //firstly lets fix realAllocPoint of lockedSaitaPool\n      // let realAllocPointOfLockedPool = sortedAllPools[newlockedSaitaIndex].poolInfo.allocPoint;\n      // //Now attach unlockedSaita pool's allocPoint to lockedSaitaPool\n      // sortedAllPools[newlockedSaitaIndex].poolInfo.allocPoint = unlockedSaitaPool.poolInfo.allocPoint;\n      // sortedAllPools[newlockedSaitaIndex].poolInfo.displayAllocPoint = realAllocPointOfLockedPool;\n      // // these are the total (also active) farms\n      // // setFarms(sortedAllPools);\n      // // these are the staked pools\n      // let lockedSaitaIndexStakedOnly =  stakingOnlyArrayToSort.findIndex(x => x.pid == x.saitaId);\n      // // this will change position of lockedSaitaPool to index 1\n      // // check if user has staked locked pool, if yes only then sort the pools\n      // let sortedStakingOnlyPools;\n      // if (lockedSaitaIndexStakedOnly !== -1 && stakingOnlyArrayToSort.length > 1) {\n      //      sortedStakingOnlyPools = getSortedPools(stakingOnlyArrayToSort, lockedSaitaIndexStakedOnly, 1);\n      //     //  setStakingOnly(sortedStakingOnlyPools);\n      // }\n      // // else set the stakingOnly array as it is\n      // else {\n      //   // setStakingOnly(stakingOnlyArrayToSort);\n      // }\n      // these are the inactive pools\n\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n\n  const handleROIModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n\n  const stakeHandle = (data, type) => {\n    if (type === \"withdraw\") {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n\n    if (type === \"deposit\") {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  };\n\n  const handleStakeValue = e => {\n    const value = e.target.value;\n    setStakeValue(value);\n  };\n\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected\n    };\n\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  };\n\n  const depositWithdraw = async (type, isLocked) => {\n    const acc = await ContractServices.getDefaultAccount();\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    const value = Number(stakeValue);\n\n    if (isNaN(value)) {\n      return toast.error(\"Enter vaild amount!\");\n    }\n\n    if (value <= 0) {\n      return toast.error(\"Enter amount greater than zero!\");\n    }\n\n    if (value > stakeData.balance) {\n      return toast.error(\"Value is greater than max value!\");\n    }\n\n    if (!stakeData) {\n      return toast.info(\"Reload page try again!\");\n    }\n\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n\n    setStakeConfimation(true);\n\n    if (type === \"deposit\") {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed(); // const deposit = '10000';\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected\n      }; // console.log(data, 'before deposit----------farm--------------');\n\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp deposit\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n\n    if (type === \"withdraw\") {\n      const amount = BigNumber(value * 10 ** stakeData.lpTokenDetails.decimals).toFixed();\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected\n      }; // console.log(data, 'before withdraw----------farm--------------');\n\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        let result;\n\n        if (isLocked) {\n          console.log(\"zzz\", data);\n          result = await FarmService.withdrawSaita(data);\n        } else {\n          result = await FarmService.withdraw(data);\n        }\n\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp withdraw\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container_wrap farmpln poolGalaxy_cont\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upper_text\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xl: 6,\n            className: \"pl-0\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"farm_title\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"farm_icon\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: PoolIcon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"desc\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"title_hd\",\n                  children: \"Pool Galaxy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Stake SAITA to earn new tokens. You can unstake at any time! Rewards are calculated per block.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"farm_srchbar\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contain_area\",\n          children: [/*#__PURE__*/_jsxDEV(Form, {\n            className: \"srchbar_area\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"serch_field\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  id: \"search\",\n                  placeholder: \"Saita\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"search_btn\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: Searchicon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"staked_only\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                id: \"stakecheck\",\n                label: \"Staked only\",\n                checked: checked,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn harvest_btn\",\n                children: \"Harvest all\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"frm_plnet_list\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"farm_tabs\",\n              children: /*#__PURE__*/_jsxDEV(Tabs, {\n                activeKey: tab,\n                id: \"frmplanet_tab\",\n                variant: \"pills\" //   onSelect={handleTab}\n                ,\n                children: [/*#__PURE__*/_jsxDEV(Tab, {\n                  eventKey: \"active\",\n                  title: \"Active\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"planet_list active\",\n                    children: /*#__PURE__*/_jsxDEV(Row, {\n                      children: /*#__PURE__*/_jsxDEV(Col, {\n                        xl: 12,\n                        children: [checked && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"planet_list_view\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"headingStyle\",\n                            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Token\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 479,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"APR\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 480,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Total Staked\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 481,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              className: \"earnTxt\",\n                              children: \"Earned\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 482,\n                              columnNumber: 33\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 478,\n                            columnNumber: 31\n                          }, this), stakingOnly.map((farm, index) => /*#__PURE__*/_jsxDEV(GalaxyCard, {\n                            index: index,\n                            harvestOnClick: harvest,\n                            currentIndex: currentIndex,\n                            handleChange: () => handleIndex(index),\n                            stakeHandle: stakeHandle,\n                            handleRoiModal: handleRoiModal,\n                            status: true,\n                            farm: farm,\n                            icon1: SAITA,\n                            icon2: BUSD,\n                            title: `SAITA`,\n                            title1: `BUSD`\n                          }, index, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 485,\n                            columnNumber: 33\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 477,\n                          columnNumber: 29\n                        }, this), !checked && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"planet_list_view\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"headingStyle\",\n                            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Token\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 506,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"APR\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 507,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Total Staked\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 508,\n                              columnNumber: 33\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              className: \"earnTxt\",\n                              children: \"Earned\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 509,\n                              columnNumber: 33\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 505,\n                            columnNumber: 31\n                          }, this), farms.map((farm, index) => /*#__PURE__*/_jsxDEV(GalaxyCard, {\n                            index: index,\n                            harvestOnClick: harvest,\n                            currentIndex: currentIndex,\n                            handleChange: () => handleIndex(index),\n                            stakeHandle: stakeHandle,\n                            handleRoiModal: handleRoiModal,\n                            status: true,\n                            farm: farm,\n                            icon1: SAITA,\n                            icon2: BUSD,\n                            title: `SAITA`,\n                            title1: `BUSD`\n                          }, index, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 512,\n                            columnNumber: 33\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 504,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 475,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 474,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 473,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                  eventKey: \"inactive\",\n                  title: \"Inactive\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"planet_list active\",\n                    children: /*#__PURE__*/_jsxDEV(Row, {\n                      children: /*#__PURE__*/_jsxDEV(Col, {\n                        xl: 12,\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"planet_list_view\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"headingStyle\",\n                            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Token\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 541,\n                              columnNumber: 31\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"APR\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 542,\n                              columnNumber: 31\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: \"Total Staked\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 543,\n                              columnNumber: 31\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              className: \"earnTxt\",\n                              children: \"Earned\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 544,\n                              columnNumber: 31\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 540,\n                            columnNumber: 29\n                          }, this), inactiveFarms.map((farm, index) => /*#__PURE__*/_jsxDEV(GalaxyCard, {\n                            index: index,\n                            harvestOnClick: harvest,\n                            currentIndex: currentIndex,\n                            handleChange: () => handleIndex(index),\n                            stakeHandle: stakeHandle,\n                            handleRoiModal: handleRoiModal,\n                            status: false,\n                            farm: farm,\n                            icon1: SAITA,\n                            icon2: BUSD,\n                            title: `SAITA`,\n                            title1: `BUSD`\n                          }, index, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 547,\n                            columnNumber: 31\n                          }, this))]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 539,\n                          columnNumber: 27\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 538,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 537,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 536,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetLPToken, {\n      stakeValue: stakeValue,\n      stakeData: stakeData,\n      stakeConfirmation: stakeConfirmation,\n      handleStakeValue: handleStakeValue,\n      depositWithdraw: depositWithdraw,\n      setMaxValue: setMaxValue,\n      show: showStake,\n      closeStakeModal: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WithDrawLPToken, {\n      stakeValue: stakeValue,\n      stakeData: stakeData,\n      stakeConfirmation: stakeConfirmation,\n      handleStakeValue: handleStakeValue,\n      depositWithdraw: depositWithdraw,\n      setMaxValue: setMaxValue,\n      show: showStakeWithdraw,\n      closeStakeModal: handleWithdrawClose,\n      address: isUserConnected,\n      isSaitaWithdrawabe: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionalModal, {\n      show: showTransactionModal,\n      handleClose: closeTransactionModal,\n      txHash: txHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 7\n    }, this), showAPY && /*#__PURE__*/_jsxDEV(ReturnInvest, {\n      show: showAPY,\n      saitaId: saitaStats,\n      roiModalData: roiModalData,\n      lpDetails: lpDetails,\n      handleClose: cloaseRoiModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PoolGalaxy, \"tn60zQQRFeF46P58F++D6VLaS+s=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PoolGalaxy;\nexport default PoolGalaxy;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolGalaxy\");","map":{"version":3,"names":["React","useEffect","useState","Button","Container","Col","Row","Form","InputGroup","FormControl","Tabs","Tab","Searchicon","useDispatch","useSelector","addTransaction","startLoading","stopLoading","ReferralsServices","FarmService","ContractServices","ExchangeService","toast","BigNumber","GalaxyCard","GetLPToken","WithDrawLPToken","TransactionalModal","ReturnInvest","TOKEN_LIST","ANCHOR_BUSD_LP","PoolGalaxy","props","match","params","history","tab","handleClose","setStakeValue","setShowStake","handleWithdrawClose","setShowStakeWithdraw","dispatch","isUserConnected","state","persist","referralAddress","checked","setChecked","active","setActive","currentIndex","setCurrentIndex","showStake","showStakeWithdraw","showAPY","setShowAPY","roiModalData","setRoiModalData","poolLength","setPoolLength","farms","setFarms","inactiveFarms","setInactiveFarms","stakingOnly","setStakingOnly","stakeData","setStakeData","stakeValue","referrer","setReferrer","stakeConfirmation","setStakeConfimation","showTransactionModal","setShowTransactionModal","txHash","setTxHash","lpDetails","setLpTokenDetails","saitaStats","setSaitaStats","handleChange","closeTransactionModal","init","window","location","reload","cloaseRoiModal","handleRoiModal","data","saitaId","handleIndex","index","getValue","address","undefined","reserves","getReserves","val","toFixed","error","console","log","getSortedPools","array","from","to","target","increment","k","ref","getReferrer","pL","Number","activePoolsToSort","stakingOnlyArrayToSort","i","poolInfo","userInfo","dollarVal","lpToken","allocPoint","pid","isLocked","amount","err","closeStakeModal","handleROIModal","stakeHandle","type","handleStakeValue","e","value","setMaxValue","balance","harvest","lpTokenName","acc","getDefaultAccount","toLowerCase","info","toString","result","deposit","message","tx","web3ErrorHandle","depositWithdraw","isNaN","lpTokenDetails","decimals","withdrawSaita","withdraw","PoolIcon","map","farm","SAITA","BUSD"],"sources":["/data/test/saitaClientGit/src/pages/PoolGalaxy/PoolGalaxy.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Button from \"@restart/ui/esm/Button\";\nimport {\n  Container,\n  Col,\n  Row,\n  Form,\n  InputGroup,\n  FormControl,\n  Tabs,\n  Tab,\n} from \"react-bootstrap\";\nimport Searchicon from \"../../assets/images/search.png\";\nimport PoolIcon from \"../../assets/images/Pool-Header-Logo.svg\";\nimport \"./PoolGalaxy.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTransaction, startLoading, stopLoading } from \"../../redux/actions\";\nimport { ReferralsServices } from \"../../services/ReferralsServices\";\nimport { FarmService } from \"../../services/FarmService\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport BigNumber from \"bignumber.js\";\nimport GalaxyCard from \"../../components/GalaxyCard/GalaxyCard\";\nimport SAITA from \"../../assets/images/token_icons/SAITA.svg\";\nimport BUSD from \"../../assets/images/token_icons/BUSD-Token.svg\";\nimport GetLPToken from \"../../components/GetLPToken/GetLPToken\";\nimport WithDrawLPToken from \"../../components/GetLPToken/WithDrawLPToken\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport ReturnInvest from \"../../components/ReturnInvest/ReturnInvest\";\nimport { TOKEN_LIST, ANCHOR_BUSD_LP } from \"../../assets/tokens\";\n\nfunction PoolGalaxy(props) {\n  const {\n    match: { params },\n    history,\n  } = props;\n  const { tab } = params;\n  // const handleTab = (data) => {\n  //   history.push(`${rootName}/farmplanets/${data}`);\n  // };\n\n  const handleClose = () => {\n    setStakeValue(null);\n    setShowStake(false);\n  };\n  const handleWithdrawClose = () => {\n    setStakeValue(null);\n    setShowStakeWithdraw(false);\n  };\n\n  const dispatch = useDispatch();\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const referralAddress = useSelector((state) => state.persist.referralAddress);\n\n  const [checked, setChecked] = useState(false);\n  const [active, setActive] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [showStake, setShowStake] = useState(false);\n  const [showStakeWithdraw, setShowStakeWithdraw] = useState(false);\n  const [showAPY, setShowAPY] = useState(false);\n  const [roiModalData, setRoiModalData] = useState(null);\n\n  const [poolLength, setPoolLength] = useState(0);\n  const [farms, setFarms] = useState([]);\n  const [inactiveFarms, setInactiveFarms] = useState([]);\n  const [stakingOnly, setStakingOnly] = useState([]);\n  const [stakeData, setStakeData] = useState(null);\n  const [stakeValue, setStakeValue] = useState(0);\n  const [referrer, setReferrer] = useState(\n    \"0x0000000000000000000000000000000000000000\"\n  );\n\n  const [stakeConfirmation, setStakeConfimation] = useState(0);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [lpDetails, setLpTokenDetails] = useState(null);\n  const [saitaStats, setSaitaStats] = useState(null);\n\n  //staking only\n  const handleChange = () => setChecked(!checked);\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    setFarms([]);\n    setInactiveFarms([]);\n    setStakingOnly([]);\n    init();\n    window.location.reload();\n  };\n\n  const cloaseRoiModal = () => {\n    setShowAPY(false);\n  };\n  const handleRoiModal = (data, lpDetails, saitaId) => {\n    // console.log(data, lpDetails);\n    setSaitaStats(saitaId);\n    setRoiModalData(data);\n    setLpTokenDetails(lpDetails);\n    setShowAPY(true);\n  };\n\n  const handleIndex = (index) => {\n    if (currentIndex === index) {\n      setCurrentIndex(-1);\n    } else {\n      setCurrentIndex(index);\n    }\n  };\n\n  const getValue = async (address) => {\n    if (address != undefined) {\n      try {\n        const reserves = await ExchangeService.getReserves(ANCHOR_BUSD_LP);\n        let val = reserves[1] / reserves[0];\n        val = val || 0;\n        return val.toFixed(3);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  //this will re-arrange locked pool to desired position\n  const getSortedPools = (array, from, to) => {\n    if (to === from) return array;\n\n    let target = array[from];\n    let increment = to < from ? -1 : 1;\n\n    for (let k = from; k != to; k += increment) {\n      array[k] = array[k + increment];\n    }\n    array[to] = target;\n    return array;\n  };\n\n  useEffect(() => {\n    init();\n    return () => {\n      setFarms([]);\n      setInactiveFarms([]);\n    };\n  }, [isUserConnected]);\n\n  const init = async () => {\n    try {\n      dispatch(startLoading());\n      let ref = await ReferralsServices.getReferrer(isUserConnected);\n      if (ref === \"0x0000000000000000000000000000000000000000\") {\n        if (\n          referralAddress &&\n          referralAddress !== \"0x0000000000000000000000000000000000000000\"\n        ) {\n          ref = referralAddress;\n        }\n        setReferrer(ref);\n      }\n      const pL = Number(await FarmService.poolLength());\n      // console.log('qq', pL);\n      setPoolLength(pL);\n      // let farmsTemp = [];\n      dispatch(stopLoading());\n      let activePoolsToSort = [];\n      let stakingOnlyArrayToSort = [];\n      for (let i = 0; i < pL; i++) {\n        const poolInfo = await FarmService.poolInfo(i, \"2\");\n        const saitaId = await FarmService.saitaId();\n        const userInfo = await FarmService.userInfo(i, isUserConnected);\n        const dollarVal = await getValue(poolInfo.lpToken);\n        if (poolInfo) {\n          if (Number(poolInfo.allocPoint) === 0) {\n            setInactiveFarms((inactiveFarms) => [\n              ...inactiveFarms,\n              {\n                poolInfo,\n                userInfo,\n                pid: i,\n                isLocked: saitaId == i ? true : false,\n                dollarVal,\n              },\n            ]);\n          } else {\n            if (Number(userInfo.amount) > 0) {\n              // stakingOnlyArrayToSort.push({ poolInfo, userInfo, pid: i, saitaId })\n              setStakingOnly((stakingOnly) => [\n                ...stakingOnly,\n                { poolInfo, userInfo, pid: i, isLocked: false, dollarVal },\n              ]);\n            }\n            // activePoolsToSort.push({ poolInfo, userInfo, pid: i, saitaId })\n            setFarms((farms) => [\n              ...farms,\n              {\n                poolInfo,\n                userInfo,\n                pid: i,\n                saitaId,\n                isLocked: false,\n                dollarVal,\n              },\n            ]);\n          }\n        }\n      }\n\n      // // this x is the current postion of lockedSaitaPool which we use to change it's position up to second later\n      // let lockedSaitaIndex =  activePoolsToSort.findIndex(x => x.pid == x.saitaId)\n      // // this will change position of lockedSaitaPool to index 1\n      // let sortedAllPools = getSortedPools(activePoolsToSort, lockedSaitaIndex, 1);\n      // //Now get unlocked saita pool details\n      // const unlockedSaitaPool = sortedAllPools.find(pool => pool.pid == '6');\n      // // again get index of lockedSaitaPool\n      // let newlockedSaitaIndex =  sortedAllPools.findIndex(x => x.pid == x.saitaId)\n      // //firstly lets fix realAllocPoint of lockedSaitaPool\n      // let realAllocPointOfLockedPool = sortedAllPools[newlockedSaitaIndex].poolInfo.allocPoint;\n\n      // //Now attach unlockedSaita pool's allocPoint to lockedSaitaPool\n      // sortedAllPools[newlockedSaitaIndex].poolInfo.allocPoint = unlockedSaitaPool.poolInfo.allocPoint;\n      // sortedAllPools[newlockedSaitaIndex].poolInfo.displayAllocPoint = realAllocPointOfLockedPool;\n      // // these are the total (also active) farms\n      // // setFarms(sortedAllPools);\n\n      // // these are the staked pools\n      // let lockedSaitaIndexStakedOnly =  stakingOnlyArrayToSort.findIndex(x => x.pid == x.saitaId);\n      // // this will change position of lockedSaitaPool to index 1\n      // // check if user has staked locked pool, if yes only then sort the pools\n      // let sortedStakingOnlyPools;\n      // if (lockedSaitaIndexStakedOnly !== -1 && stakingOnlyArrayToSort.length > 1) {\n      //      sortedStakingOnlyPools = getSortedPools(stakingOnlyArrayToSort, lockedSaitaIndexStakedOnly, 1);\n      //     //  setStakingOnly(sortedStakingOnlyPools);\n      // }\n      // // else set the stakingOnly array as it is\n      // else {\n      //   // setStakingOnly(stakingOnlyArrayToSort);\n      // }\n\n      // these are the inactive pools\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const closeStakeModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n  const handleROIModal = () => {\n    setShowStakeWithdraw(false);\n    setShowStake(false);\n    setStakeData(null);\n    setStakeValue(0);\n  };\n  const stakeHandle = (data, type) => {\n    if (type === \"withdraw\") {\n      setStakeData(data);\n      setShowStakeWithdraw(true);\n    }\n    if (type === \"deposit\") {\n      setStakeData(data);\n      setShowStake(true);\n    }\n  };\n\n  const handleStakeValue = (e) => {\n    const value = e.target.value;\n    setStakeValue(value);\n  };\n  const setMaxValue = () => setStakeValue(stakeData.balance);\n\n  const harvest = async (pid, lpTokenName) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setStakeConfimation(true);\n    const data = {\n      pid: pid.toString(),\n      amount: 0,\n      referrer: referrer,\n      from: isUserConnected,\n    };\n    try {\n      dispatch(startLoading());\n      const result = await FarmService.deposit(data);\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      if (result) {\n        setTxHash(result);\n        setShowTransactionModal(true);\n\n        const data = {\n          message: `Harvest ${lpTokenName}`,\n          tx: result,\n        };\n        dispatch(addTransaction(data));\n      }\n    } catch (err) {\n      dispatch(stopLoading());\n      setStakeConfimation(false);\n\n      const message = await ContractServices.web3ErrorHandle(err);\n      toast.error(message);\n    }\n  };\n\n  const depositWithdraw = async (type, isLocked) => {\n    const acc = await ContractServices.getDefaultAccount();\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    const value = Number(stakeValue);\n    if (isNaN(value)) {\n      return toast.error(\"Enter vaild amount!\");\n    }\n    if (value <= 0) {\n      return toast.error(\"Enter amount greater than zero!\");\n    }\n    if (value > stakeData.balance) {\n      return toast.error(\"Value is greater than max value!\");\n    }\n    if (!stakeData) {\n      return toast.info(\"Reload page try again!\");\n    }\n    if (stakeConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setStakeConfimation(true);\n    if (type === \"deposit\") {\n      const amount = BigNumber(\n        value * 10 ** stakeData.lpTokenDetails.decimals\n      ).toFixed();\n      // const deposit = '10000';\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        referrer: referrer,\n        from: isUserConnected,\n      };\n      // console.log(data, 'before deposit----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        const result = await FarmService.deposit(data);\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Deposit ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp deposit\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n    if (type === \"withdraw\") {\n      const amount = BigNumber(\n        value * 10 ** stakeData.lpTokenDetails.decimals\n      ).toFixed();\n\n      const data = {\n        pid: stakeData.pid.toString(),\n        amount,\n        from: isUserConnected,\n      };\n      // console.log(data, 'before withdraw----------farm--------------');\n      try {\n        closeStakeModal();\n        dispatch(startLoading());\n        let result;\n        if (isLocked) {\n          console.log(\"zzz\", data);\n          result = await FarmService.withdrawSaita(data);\n        } else {\n          result = await FarmService.withdraw(data);\n        }\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n\n          const data = {\n            message: `Withdraw ${stakeData.lpTokenDetails.lpTokenName}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n        }\n      } catch (err) {\n        console.log(err, \"lp withdraw\");\n        dispatch(stopLoading());\n        setStakeConfimation(false);\n\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n      }\n    }\n  };\n  return (\n    <div className=\"container_wrap farmpln poolGalaxy_cont\">\n      <div className=\"upper_text\">\n        <Container>\n          <Row>\n            <Col xl={6} className=\"pl-0\">\n              <div className=\"farm_title\">\n                <div className=\"farm_icon\">\n                  <img src={PoolIcon} />\n                </div>\n                <div className=\"desc\">\n                  <h1 className=\"title_hd\">Pool Galaxy</h1>\n                  <p>\n                    Stake SAITA to earn new tokens. You can unstake at any time!\n                    Rewards are calculated per block.\n                  </p>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div className=\"farm_srchbar\">\n        <Container>\n          <div className=\"contain_area\">\n            <Form className=\"srchbar_area\">\n              <div className=\"serch_field\">\n                <Form.Label>Search</Form.Label>\n                <InputGroup>\n                  <FormControl id=\"search\" placeholder=\"Saita\" />\n                  <Button className=\"search_btn\">\n                    <img src={Searchicon} />\n                  </Button>\n                </InputGroup>\n              </div>\n              <div className=\"staked_only\">\n                <Form.Check\n                  type=\"checkbox\"\n                  id=\"stakecheck\"\n                  label=\"Staked only\"\n                  checked={checked}\n                  onChange={handleChange}\n                />\n                <Button className=\"btn harvest_btn\">Harvest all</Button>\n              </div>\n            </Form>\n            <div className=\"frm_plnet_list\">\n              <div className=\"farm_tabs\">\n                <Tabs\n                  activeKey={tab}\n                  id=\"frmplanet_tab\"\n                  variant=\"pills\"\n                  //   onSelect={handleTab}\n                >\n                  <Tab eventKey=\"active\" title=\"Active\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          {checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {stakingOnly.map((farm, index) => (\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={SAITA}\n                                  icon2={BUSD}\n                                  title={`SAITA`}\n                                  title1={`BUSD`}\n                                />\n                              ))}\n                            </div>\n                          )}\n                          {!checked && (\n                            <div className=\"planet_list_view\">\n                              <div className=\"headingStyle\">\n                                <h6>Token</h6>\n                                <h6>APR</h6>\n                                <h6>Total Staked</h6>\n                                <h6 className=\"earnTxt\">Earned</h6>\n                              </div>\n                              {farms.map((farm, index) => (\n                                <GalaxyCard\n                                  key={index}\n                                  index={index}\n                                  harvestOnClick={harvest}\n                                  currentIndex={currentIndex}\n                                  handleChange={() => handleIndex(index)}\n                                  stakeHandle={stakeHandle}\n                                  handleRoiModal={handleRoiModal}\n                                  status={true}\n                                  farm={farm}\n                                  icon1={SAITA}\n                                  icon2={BUSD}\n                                  title={`SAITA`}\n                                  title1={`BUSD`}\n                                />\n                              ))}\n                            </div>\n                          )}\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n\n                  <Tab eventKey=\"inactive\" title=\"Inactive\">\n                    <div className=\"planet_list active\">\n                      <Row>\n                        <Col xl={12}>\n                          <div className=\"planet_list_view\">\n                            <div className=\"headingStyle\">\n                              <h6>Token</h6>\n                              <h6>APR</h6>\n                              <h6>Total Staked</h6>\n                              <h6 className=\"earnTxt\">Earned</h6>\n                            </div>\n                            {inactiveFarms.map((farm, index) => (\n                              <GalaxyCard\n                                key={index}\n                                index={index}\n                                harvestOnClick={harvest}\n                                currentIndex={currentIndex}\n                                handleChange={() => handleIndex(index)}\n                                stakeHandle={stakeHandle}\n                                handleRoiModal={handleRoiModal}\n                                status={false}\n                                farm={farm}\n                                icon1={SAITA}\n                                icon2={BUSD}\n                                title={`SAITA`}\n                                title1={`BUSD`}\n                              />\n                            ))}\n                          </div>\n                        </Col>\n                      </Row>\n                    </div>\n                  </Tab>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </div>\n      <GetLPToken\n        stakeValue={stakeValue}\n        stakeData={stakeData}\n        stakeConfirmation={stakeConfirmation}\n        handleStakeValue={handleStakeValue}\n        depositWithdraw={depositWithdraw}\n        setMaxValue={setMaxValue}\n        show={showStake}\n        closeStakeModal={handleClose}\n      />\n      <WithDrawLPToken\n        stakeValue={stakeValue}\n        stakeData={stakeData}\n        stakeConfirmation={stakeConfirmation}\n        handleStakeValue={handleStakeValue}\n        depositWithdraw={depositWithdraw}\n        setMaxValue={setMaxValue}\n        show={showStakeWithdraw}\n        closeStakeModal={handleWithdrawClose}\n        address={isUserConnected}\n        isSaitaWithdrawabe={true}\n      />\n      <TransactionalModal\n        show={showTransactionModal}\n        handleClose={closeTransactionModal}\n        txHash={txHash}\n      />\n      {showAPY && (\n        <ReturnInvest\n          show={showAPY}\n          saitaId={saitaStats}\n          roiModalData={roiModalData}\n          lpDetails={lpDetails}\n          handleClose={cloaseRoiModal}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default PoolGalaxy;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}