{"ast":null,"code":"import { ContractServices } from \"../../services/ContractServices\";\nimport default_icon from \"../../assets/images/token_icons/default.svg\";\nimport { UserService } from \"../../services/UserService\";\nimport { checkUserLpTokens, saveUserLpTokens } from \"./PersistActions\";\nimport { WETH } from \"../../assets/tokens\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nexport const searchTokenByNameOrAddress = address => async (dispatch, getState) => {\n  try {\n    const {\n      persist: {\n        tokenList\n      }\n    } = getState();\n\n    if (address.length === 42) {\n      const filteredTokenList = tokenList.filter(token => token.address.toLowerCase().includes(address.toLowerCase()));\n\n      if (filteredTokenList.length > 0) {\n        return filteredTokenList;\n      }\n\n      const tokenDecimal = await ContractServices.getDecimals(address);\n      const tokenName = await ContractServices.getTokenName(address);\n      const tokenSymbol = await ContractServices.getTokenSymbol(address);\n      const tokenBalance = await ContractServices.getTokenBalance(address);\n      const obj = {\n        icon: default_icon,\n        name: tokenName,\n        address,\n        isAdd: true,\n        isDel: false,\n        decimals: tokenDecimal,\n        symbol: tokenSymbol\n      };\n      tokenList.push(obj);\n      return tokenList;\n    }\n\n    return tokenList.filter(token => token.name.toLowerCase().includes(address.toLowerCase()));\n  } catch (error) {\n    console.log(\"Error: \", error);\n    return error;\n  }\n};\nexport const delTokenFromList = data => async (dispatch, getState) => {\n  try {\n    const {\n      persist: {\n        tokenList\n      }\n    } = getState();\n    tokenList.splice(tokenList.findIndex(a => a.address.toLowerCase() === data.address.toLowerCase()), 1);\n    return tokenList;\n  } catch (error) {\n    console.log(\"Error: \", error);\n    return error;\n  }\n};\nexport const getUserLPTokens = () => async (dispatch, getState) => {\n  try {\n    const {\n      persist: {\n        updateUserLpTokens\n      }\n    } = getState();\n\n    if (!updateUserLpTokens) {\n      dispatch(saveUserLpTokens([]));\n      let lpTokensCount = await UserService.getPairsCount();\n      lpTokensCount = lpTokensCount.data.count;\n      const limit = 100;\n      const totalPages = Math.ceil(lpTokensCount / limit); // let lpTokensArr = [];\n\n      for (let page = 1; page <= totalPages; page++) {\n        let lpTokens = await UserService.getPairs({\n          page,\n          limit\n        });\n        lpTokens = lpTokens.data; // lpTokensArr = lpTokensArr.concat(lpTokens);\n\n        for (let lp of lpTokens) {\n          await dispatch(commonLpToken(lp));\n        } // console.log(\"LPTOKENS:\", lpTokens);\n\n      }\n    }\n  } catch (error) {\n    console.log(\"Error: \", error);\n    return error;\n  }\n};\nexport const commonLpToken = lp => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: {\n          isUserConnected,\n          tokenList,\n          userLpTokens\n        }\n      } = getState();\n      const balance = await ContractServices.getTokenBalanceFull(lp.pair, isUserConnected);\n\n      if (balance > 0) {\n        let userLpTokensArr = userLpTokens;\n        let token0Obj = {},\n            token1Obj = {},\n            token0Deposit = 0,\n            token1Deposit = 0,\n            poolShare = \"0\",\n            ratio = 0;\n        const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n        ratio = balance / totalSupply;\n        poolShare = (balance / totalSupply * 100).toFixed(2);\n        const reserves = await ExchangeService.getReserves(lp.pair);\n\n        if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n          token0Obj = tokenList.find(d => d.address === \"BNB\");\n        } else {\n          token0Obj = tokenList.find(d => d.address.toLowerCase() === lp.token0.toLowerCase());\n        }\n\n        if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n          token1Obj = tokenList.find(d => d.address === \"BNB\");\n        } else {\n          token1Obj = tokenList.find(d => d.address.toLowerCase() === lp.token1.toLowerCase());\n        } //lp deposit\n\n\n        token0Deposit = ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n        token1Deposit = ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n        const data = { ...lp,\n          token0Obj,\n          token1Obj,\n          token0Deposit,\n          token1Deposit,\n          balance,\n          poolShare\n        };\n        userLpTokensArr = [...userLpTokensArr, data];\n        dispatch(saveUserLpTokens(userLpTokensArr));\n      }\n    } catch (error) {}\n  };\n};\nexport const addLpToken = lp => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: {\n          isUserConnected,\n          tokenList,\n          userLpTokens\n        }\n      } = getState();\n\n      if (lp) {\n        dispatch(checkUserLpTokens(true));\n        let userLpTokensArr = userLpTokens;\n        const balance = await ContractServices.getTokenBalanceFull(lp.pair, isUserConnected);\n\n        if (balance > 0) {\n          let token0Obj = {},\n              token1Obj = {},\n              token0Deposit = 0,\n              token1Deposit = 0,\n              poolShare = \"0\",\n              ratio = 0;\n          const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n          ratio = balance / totalSupply;\n          poolShare = (balance / totalSupply * 100).toFixed(2);\n          const reserves = await ExchangeService.getReserves(lp.pair);\n\n          if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n            lp.token0 = \"BNB\";\n            token0Obj = tokenList.find(d => d.address === \"BNB\");\n          } else {\n            token0Obj = tokenList.find(d => d.address.toLowerCase() === lp.token0.toLowerCase());\n          }\n\n          if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n            lp.token1 = \"BNB\";\n            token1Obj = tokenList.find(d => d.address === \"BNB\");\n          } else {\n            token1Obj = tokenList.find(d => d.address.toLowerCase() === lp.token1.toLowerCase());\n          }\n\n          console.log(token0Obj, token1Obj); //lp deposit\n\n          token0Deposit = ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n          token1Deposit = ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n          const data = { ...lp,\n            token0Obj,\n            token1Obj,\n            token0Deposit,\n            token1Deposit,\n            balance,\n            poolShare\n          };\n          let check = true;\n\n          for (let oldLp of userLpTokens) {\n            if (oldLp.pair.toLowerCase() === lp.pair.toLowerCase() && oldLp.balance === lp.balance) {\n              check = false;\n            }\n          }\n\n          if (check) {\n            userLpTokensArr = [...userLpTokensArr, data];\n            await dispatch(saveUserLpTokens(userLpTokensArr));\n          }\n\n          return data;\n        } else {\n          return null;\n        }\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n};\nexport const updateLpToken = lp => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: {\n          isUserConnected,\n          tokenList,\n          userLpTokens\n        }\n      } = getState();\n\n      if (lp) {\n        dispatch(checkUserLpTokens(true));\n        let userLpTokensArr = userLpTokens;\n        const balance = await ContractServices.getTokenBalanceFull(lp.pair, isUserConnected);\n\n        if (balance > 0) {\n          let token0Obj = {},\n              token1Obj = {},\n              token0Deposit = 0,\n              token1Deposit = 0,\n              poolShare = \"0\",\n              ratio = 0;\n          const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n          ratio = balance / totalSupply;\n          poolShare = (balance / totalSupply * 100).toFixed(2);\n          const reserves = await ExchangeService.getReserves(lp.pair);\n\n          if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n            lp.token0 = \"BNB\";\n            token0Obj = tokenList.find(d => d.address === \"BNB\");\n          } else {\n            token0Obj = tokenList.find(d => d.address.toLowerCase() === lp.token0.toLowerCase());\n          }\n\n          if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n            lp.token1 = \"BNB\";\n            token1Obj = tokenList.find(d => d.address === \"BNB\");\n          } else {\n            token1Obj = tokenList.find(d => d.address.toLowerCase() === lp.token1.toLowerCase());\n          } //lp deposit\n\n\n          token0Deposit = ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n          token1Deposit = ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n          const data = { ...lp,\n            token0Obj,\n            token1Obj,\n            token0Deposit,\n            token1Deposit,\n            balance,\n            poolShare\n          };\n          let realIndex = userLpTokens.findIndex(item => item.pair === lp.pair);\n          userLpTokens[realIndex].balance = balance;\n          userLpTokens[realIndex].poolShare = poolShare;\n          userLpTokens[realIndex].token0Deposit = token0Deposit;\n          userLpTokens[realIndex].token1Deposit = token1Deposit;\n          await dispatch(saveUserLpTokens(userLpTokensArr));\n          return;\n        } else {\n          return null;\n        }\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n};","map":{"version":3,"names":["ContractServices","UserService","checkUserLpTokens","saveUserLpTokens","WETH","ExchangeService","searchTokenByNameOrAddress","address","dispatch","getState","persist","tokenList","length","filteredTokenList","filter","token","toLowerCase","includes","tokenDecimal","getDecimals","tokenName","getTokenName","tokenSymbol","getTokenSymbol","tokenBalance","getTokenBalance","obj","icon","default_icon","name","isAdd","isDel","decimals","symbol","push","error","console","log","delTokenFromList","data","splice","findIndex","a","getUserLPTokens","updateUserLpTokens","lpTokensCount","getPairsCount","count","limit","totalPages","Math","ceil","page","lpTokens","getPairs","lp","commonLpToken","isUserConnected","userLpTokens","balance","getTokenBalanceFull","pair","userLpTokensArr","token0Obj","token1Obj","token0Deposit","token1Deposit","poolShare","ratio","totalSupply","getTotalSupply","toFixed","reserves","getReserves","token0","find","d","token1","addLpToken","check","oldLp","updateLpToken","realIndex","item"],"sources":["/data/test/saitaClientGit/src/redux/actions/ExchangeActions.js"],"sourcesContent":["import { ContractServices } from \"../../services/ContractServices\";\nimport default_icon from \"../../assets/images/token_icons/default.svg\";\nimport { UserService } from \"../../services/UserService\";\nimport { checkUserLpTokens, saveUserLpTokens } from \"./PersistActions\";\nimport { WETH } from \"../../assets/tokens\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\n\nexport const searchTokenByNameOrAddress =\n  (address) => async (dispatch, getState) => {\n    try {\n      const {\n        persist: { tokenList },\n      } = getState();\n\n      if (address.length === 42) {\n        const filteredTokenList = tokenList.filter((token) =>\n          token.address.toLowerCase().includes(address.toLowerCase())\n        );\n        if (filteredTokenList.length > 0) {\n          return filteredTokenList;\n        }\n        const tokenDecimal = await ContractServices.getDecimals(address);\n        const tokenName = await ContractServices.getTokenName(address);\n        const tokenSymbol = await ContractServices.getTokenSymbol(address);\n        const tokenBalance = await ContractServices.getTokenBalance(address);\n        const obj = {\n          icon: default_icon,\n          name: tokenName,\n          address,\n          isAdd: true,\n          isDel: false,\n          decimals: tokenDecimal,\n          symbol: tokenSymbol,\n        };\n        tokenList.push(obj);\n        return tokenList;\n      }\n      return tokenList.filter((token) =>\n        token.name.toLowerCase().includes(address.toLowerCase())\n      );\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n\nexport const delTokenFromList = (data) => async (dispatch, getState) => {\n  try {\n    const {\n      persist: { tokenList },\n    } = getState();\n    tokenList.splice(\n      tokenList.findIndex(\n        (a) => a.address.toLowerCase() === data.address.toLowerCase()\n      ),\n      1\n    );\n    return tokenList;\n  } catch (error) {\n    console.log(\"Error: \", error);\n    return error;\n  }\n};\n\nexport const getUserLPTokens = () => async (dispatch, getState) => {\n  try {\n    const {\n      persist: { updateUserLpTokens },\n    } = getState();\n    if (!updateUserLpTokens) {\n      dispatch(saveUserLpTokens([]));\n      let lpTokensCount = await UserService.getPairsCount();\n      lpTokensCount = lpTokensCount.data.count;\n\n      const limit = 100;\n      const totalPages = Math.ceil(lpTokensCount / limit);\n      // let lpTokensArr = [];\n      for (let page = 1; page <= totalPages; page++) {\n        let lpTokens = await UserService.getPairs({ page, limit });\n\n        lpTokens = lpTokens.data;\n        // lpTokensArr = lpTokensArr.concat(lpTokens);\n        for (let lp of lpTokens) {\n          await dispatch(commonLpToken(lp));\n        }\n\n        // console.log(\"LPTOKENS:\", lpTokens);\n      }\n    }\n  } catch (error) {\n    console.log(\"Error: \", error);\n    return error;\n  }\n};\nexport const commonLpToken = (lp) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: { isUserConnected, tokenList, userLpTokens },\n      } = getState();\n      const balance = await ContractServices.getTokenBalanceFull(\n        lp.pair,\n        isUserConnected\n      );\n      if (balance > 0) {\n        let userLpTokensArr = userLpTokens;\n        let token0Obj = {},\n          token1Obj = {},\n          token0Deposit = 0,\n          token1Deposit = 0,\n          poolShare = \"0\",\n          ratio = 0;\n        const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n\n        ratio = balance / totalSupply;\n        poolShare = ((balance / totalSupply) * 100).toFixed(2);\n\n        const reserves = await ExchangeService.getReserves(lp.pair);\n\n        if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n          token0Obj = tokenList.find((d) => d.address === \"BNB\");\n        } else {\n          token0Obj = tokenList.find(\n            (d) => d.address.toLowerCase() === lp.token0.toLowerCase()\n          );\n        }\n        if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n          token1Obj = tokenList.find((d) => d.address === \"BNB\");\n        } else {\n          token1Obj = tokenList.find(\n            (d) => d.address.toLowerCase() === lp.token1.toLowerCase()\n          );\n        }\n        //lp deposit\n        token0Deposit =\n          ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n        token1Deposit =\n          ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n\n        const data = {\n          ...lp,\n          token0Obj,\n          token1Obj,\n          token0Deposit,\n          token1Deposit,\n          balance,\n          poolShare,\n        };\n        userLpTokensArr = [...userLpTokensArr, data];\n        dispatch(saveUserLpTokens(userLpTokensArr));\n      }\n    } catch (error) {}\n  };\n};\n\nexport const addLpToken = (lp) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: { isUserConnected, tokenList, userLpTokens },\n      } = getState();\n      if (lp) {\n        dispatch(checkUserLpTokens(true));\n        let userLpTokensArr = userLpTokens;\n\n        const balance = await ContractServices.getTokenBalanceFull(\n          lp.pair,\n          isUserConnected\n        );\n\n        if (balance > 0) {\n          let token0Obj = {},\n            token1Obj = {},\n            token0Deposit = 0,\n            token1Deposit = 0,\n            poolShare = \"0\",\n            ratio = 0;\n          const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n\n          ratio = balance / totalSupply;\n          poolShare = ((balance / totalSupply) * 100).toFixed(2);\n\n          const reserves = await ExchangeService.getReserves(lp.pair);\n\n          if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n            lp.token0 = \"BNB\";\n            token0Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token0Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token0.toLowerCase()\n            );\n          }\n          if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n            lp.token1 = \"BNB\";\n            token1Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token1Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token1.toLowerCase()\n            );\n          }\n          console.log(token0Obj, token1Obj);\n          //lp deposit\n          token0Deposit =\n            ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n          token1Deposit =\n            ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n\n          const data = {\n            ...lp,\n            token0Obj,\n            token1Obj,\n            token0Deposit,\n            token1Deposit,\n            balance,\n            poolShare,\n          };\n          let check = true;\n          for (let oldLp of userLpTokens) {\n            if (\n              oldLp.pair.toLowerCase() === lp.pair.toLowerCase() &&\n              oldLp.balance === lp.balance\n            ) {\n              check = false;\n            }\n          }\n          if (check) {\n            userLpTokensArr = [...userLpTokensArr, data];\n\n            await dispatch(saveUserLpTokens(userLpTokensArr));\n          }\n          return data;\n        } else {\n          return null;\n        }\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n};\n\nexport const updateLpToken = (lp) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        persist: { isUserConnected, tokenList, userLpTokens },\n      } = getState();\n      if (lp) {\n        dispatch(checkUserLpTokens(true));\n        let userLpTokensArr = userLpTokens;\n\n        const balance = await ContractServices.getTokenBalanceFull(\n          lp.pair,\n          isUserConnected\n        );\n        if (balance > 0) {\n          let token0Obj = {},\n            token1Obj = {},\n            token0Deposit = 0,\n            token1Deposit = 0,\n            poolShare = \"0\",\n            ratio = 0;\n          const totalSupply = await ContractServices.getTotalSupply(lp.pair);\n\n          ratio = balance / totalSupply;\n          poolShare = ((balance / totalSupply) * 100).toFixed(2);\n\n          const reserves = await ExchangeService.getReserves(lp.pair);\n\n          if (lp.token0.toLowerCase() === WETH.toLowerCase()) {\n            lp.token0 = \"BNB\";\n            token0Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token0Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token0.toLowerCase()\n            );\n          }\n          if (lp.token1.toLowerCase() === WETH.toLowerCase()) {\n            lp.token1 = \"BNB\";\n            token1Obj = tokenList.find((d) => d.address === \"BNB\");\n          } else {\n            token1Obj = tokenList.find(\n              (d) => d.address.toLowerCase() === lp.token1.toLowerCase()\n            );\n          }\n          //lp deposit\n          token0Deposit =\n            ratio * (reserves[\"_reserve0\"] / 10 ** token0Obj.decimals);\n          token1Deposit =\n            ratio * (reserves[\"_reserve1\"] / 10 ** token1Obj.decimals);\n\n          const data = {\n            ...lp,\n            token0Obj,\n            token1Obj,\n            token0Deposit,\n            token1Deposit,\n            balance,\n            poolShare,\n          };\n          let realIndex = userLpTokens.findIndex(\n            (item) => item.pair === lp.pair\n          );\n          userLpTokens[realIndex].balance = balance;\n          userLpTokens[realIndex].poolShare = poolShare;\n          userLpTokens[realIndex].token0Deposit = token0Deposit;\n          userLpTokens[realIndex].token1Deposit = token1Deposit;\n          await dispatch(saveUserLpTokens(userLpTokensArr));\n          return;\n        } else {\n          return null;\n        }\n      }\n    } catch (error) {\n      console.log(\"Error: \", error);\n      return error;\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}