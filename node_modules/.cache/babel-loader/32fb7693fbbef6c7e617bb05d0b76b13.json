{"ast":null,"code":"var _jsxFileName = \"/data/test/saitaClientGit/src/components/ConnectWallet/ConnectWallet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\nimport \"./ConnectWallet.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { login } from \"../../redux/actions\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport iconMatamask from \"../../assets/images/metamask_icon.png\";\nimport iconCoinbase from \"../../assets/images/coinbase_icon.svg\";\nimport iconWallet from \"../../assets/images/wallet_icon.svg\";\nimport TokenPocket from \"../../assets/images/tp.png\";\nimport TrustWallet from \"../../assets/images/trust-wallet.png\";\nimport Binance from \"../../assets/images/Binance-chain.png\";\nimport MathWallet from \"../../assets/images/mathwallet.png\";\nimport { LS_KEYS, WALLET_TYPE } from \"../../constant\"; // 3;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConnectWallet = _ref => {\n  _s();\n\n  let {\n    show,\n    handleClose\n  } = _ref;\n  const dispatch = useDispatch();\n\n  const loginCall = async (walletType, type) => {\n    try {\n      localStorage.setItem(LS_KEYS.WALLET_TYPE, walletType);\n\n      if (walletType === WALLET_TYPE.COIN_BASE) {// const CoinbaseWallet = new WalletLinkConnector({\n        //   url: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\n        //   appName: \"Web3-react Demo\",\n        //   supportedChainIds: [1, 3, 4, 5, 42],\n        //  });\n      } else if (walletType === WALLET_TYPE.BSC) {\n        const account = await ContractServices.isBinanceChainInstalled();\n\n        if (account) {\n          dispatch(login({\n            account,\n            walletType\n          }));\n          handleClose(false);\n          window.location.reload();\n        }\n      } else if (walletType === WALLET_TYPE.WALLET_CONNECT) {\n        try {\n          const d = await ContractServices.callWeb3ForWalletConnect();\n          const account = d.provider.accounts[0];\n          console.log(\"in connect wallet\", account, d);\n          d.provider.on(\"connect\", _ => console.log(\"congrats u r connected..\"));\n          d.provider.on(\"accountsChanged\", async accounts => {\n            console.log(\"account changed on remote\");\n            setTimeout(function () {\n              window.location.reload();\n            }, 500);\n            let account = accounts[0];\n            console.log(\"in connect wallet1\", account);\n            dispatch(login({\n              account,\n              walletType\n            }));\n            handleClose(false); //return;\n\n            window.location.reload();\n          });\n          dispatch(login({\n            account,\n            walletType\n          }));\n          handleClose(false); //  window.location.reload();\n        } catch (error) {\n          console.log(error, \"wallet error\");\n        }\n      } else if (walletType === WALLET_TYPE.META_MASK) {\n        const account = await ContractServices.isMetamaskInstalled(type);\n\n        if (account) {\n          dispatch(login({\n            account,\n            walletType\n          }));\n          handleClose(false); // window.location.reload();\n        }\n      } else {\n        console.log(\"Wallet type invalid\");\n      }\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      const selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\n\n      if (selWalletType) {\n        console.log(\"[tur461] connecting to wallet connect found in LS\");\n        loginCall(selWalletType);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    centered: true,\n    scrollable: true,\n    className: \"connect_wallet\",\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Connect to a wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"baseToken_style token_strut\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => loginCall(WALLET_TYPE.META_MASK),\n                children: [\"MetaMask\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: iconMatamask\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 19\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => loginCall(WALLET_TYPE.WALLET_CONNECT),\n                children: [\"WalletConnect\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: iconWallet\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 19\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConnectWallet, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ConnectWallet;\nexport default ConnectWallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"names":["React","useEffect","Col","Row","Modal","Button","useDispatch","ContractServices","login","toast","WalletConnectProvider","iconMatamask","TokenPocket","TrustWallet","Binance","MathWallet","LS_KEYS","WALLET_TYPE","ConnectWallet","show","handleClose","dispatch","loginCall","walletType","type","localStorage","setItem","COIN_BASE","BSC","account","isBinanceChainInstalled","window","location","reload","WALLET_CONNECT","d","callWeb3ForWalletConnect","provider","accounts","console","log","on","_","setTimeout","error","META_MASK","isMetamaskInstalled","err","message","selWalletType","getItem","iconWallet"],"sources":["/data/test/saitaClientGit/src/components/ConnectWallet/ConnectWallet.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { Col, Row, Modal, Button } from \"react-bootstrap\";\nimport \"./ConnectWallet.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { login } from \"../../redux/actions\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport iconMatamask from \"../../assets/images/metamask_icon.png\";\nimport iconCoinbase from \"../../assets/images/coinbase_icon.svg\";\nimport iconWallet from \"../../assets/images/wallet_icon.svg\";\nimport TokenPocket from \"../../assets/images/tp.png\";\nimport TrustWallet from \"../../assets/images/trust-wallet.png\";\nimport Binance from \"../../assets/images/Binance-chain.png\";\nimport MathWallet from \"../../assets/images/mathwallet.png\";\nimport { LS_KEYS, WALLET_TYPE } from \"../../constant\";\n// 3;\n\nconst ConnectWallet = ({ show, handleClose }) => {\n  const dispatch = useDispatch();\n\n  const loginCall = async (walletType, type) => {\n    try {\n      localStorage.setItem(LS_KEYS.WALLET_TYPE, walletType);\n      if (walletType === WALLET_TYPE.COIN_BASE) {\n        // const CoinbaseWallet = new WalletLinkConnector({\n        //   url: `https://mainnet.infura.io/v3/${process.env.INFURA_KEY}`,\n        //   appName: \"Web3-react Demo\",\n        //   supportedChainIds: [1, 3, 4, 5, 42],\n        //  });\n      } else if (walletType === WALLET_TYPE.BSC) {\n        const account = await ContractServices.isBinanceChainInstalled();\n        if (account) {\n          dispatch(login({ account, walletType }));\n          handleClose(false);\n          window.location.reload();\n        }\n      } else if (walletType === WALLET_TYPE.WALLET_CONNECT) {\n        try {\n          const d = await ContractServices.callWeb3ForWalletConnect();\n          const account = d.provider.accounts[0];\n          console.log(\"in connect wallet\", account, d);\n          d.provider.on(\"connect\", (_) =>\n            console.log(\"congrats u r connected..\")\n          );\n          d.provider.on(\"accountsChanged\", async (accounts) => {\n            console.log(\"account changed on remote\");\n            setTimeout(function () {\n              window.location.reload();\n            }, 500);\n            let account = accounts[0];\n            console.log(\"in connect wallet1\", account);\n            dispatch(login({ account, walletType }));\n            handleClose(false);\n            //return;\n            window.location.reload();\n          });\n          dispatch(login({ account, walletType }));\n\n          handleClose(false);\n          //  window.location.reload();\n        } catch (error) {\n          console.log(error, \"wallet error\");\n        }\n      } else if (walletType === WALLET_TYPE.META_MASK) {\n        const account = await ContractServices.isMetamaskInstalled(type);\n        if (account) {\n          dispatch(login({ account, walletType }));\n          handleClose(false);\n          // window.location.reload();\n        }\n      } else {\n        console.log(\"Wallet type invalid\");\n      }\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n  useEffect(() => {\n    (async () => {\n      const selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\n      if (selWalletType) {\n        console.log(\"[tur461] connecting to wallet connect found in LS\");\n        loginCall(selWalletType);\n      }\n    })();\n  }, []);\n\n  return (\n    <Modal\n      centered\n      scrollable={true}\n      className=\"connect_wallet\"\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Connect to a wallet</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n          <Col className=\"baseToken_style token_strut\">\n            <ul>\n              <li>\n                <Button onClick={() => loginCall(WALLET_TYPE.META_MASK)}>\n                  MetaMask\n                  <span>\n                    <img src={iconMatamask} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              {/* <li>\n                <Button onClick={() => loginCall(\"coinBase\", \"coinBase\")}>\n                  CoinBase Wallet\n                  <span>\n                    <img src={iconCoinbase} />\n                  </span>{\" \"}\n                </Button>\n              </li> */}\n              <li>\n                <Button onClick={() => loginCall(WALLET_TYPE.WALLET_CONNECT)}>\n                  WalletConnect\n                  <span>\n                    <img src={iconWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n\n              {/* <li>\n                <Button>\n                  TrustWallet\n                  <span>\n                    <img src={TrustWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  MathWallet\n                  <span>\n                    <img src={MathWallet} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  TokenPocket\n                  <span>\n                    <img src={TokenPocket} />\n                  </span>{\" \"}\n                </Button>\n              </li>\n              <li>\n                <Button>\n                  Binance Chain Wallet\n                  <span>\n                    <img src={Binance} />\n                  </span>{\" \"}\n                </Button>\n              </li> */}\n            </ul>\n          </Col>\n        </Row>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ConnectWallet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}