{"ast":null,"code":"// import Web3 from \"web3\"\nimport { MAIN_CONTRACT_LIST, WETH, BURN_ADDRESS, DEFLATIONNARY_TOKENS, TOKEN_LIST, pancakeFactory, USD, Saitama } from \"../assets/tokens\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { ContractServices } from \"./ContractServices\";\nimport { BigNumber } from \"bignumber.js\";\nimport { formatDown, formatUp, isAddr } from \"../utils\";\nimport { ERRORS } from \"../constant\";\n\nconst allPairs = async () => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.factory.address, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.allPairs().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPair = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.factory.address, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPairFromPancakeFactory = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(pancakeFactory, MAIN_CONTRACT_LIST.factory.abi);\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenZero = async currentPairAddress => {\n  try {\n    const contract = await ContractServices.callContract(currentPairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.token0().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenOne = async currentPairAddress => {\n  try {\n    const contract = await ContractServices.callContract(currentPairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.token1().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsOutWithoutDecimal = async (amountIn, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountIn = amountIn * 10 ** decimals1;\n    let calAmount = BigNumber(addAmountIn).toFixed();\n    calAmount.toString();\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    const result = await contract.methods.getAmountsOut(calAmount, pair).call();\n    let pushArray = [];\n\n    for (let i = 0; i < result.length; i++) {\n      const path = result[i];\n      pushArray.push(path);\n    }\n\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsOut = async (amountIn, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountIn = amountIn * 10 ** decimals1;\n    let calAmount = BigNumber(addAmountIn).toFixed();\n    calAmount.toString();\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    const result = await contract.methods.getAmountsOut(calAmount, pair).call();\n    let pushArray = [];\n\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals;\n      pushArray.push(path);\n    }\n\n    console.log(\"get amounts out push array\", pushArray);\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsIn = async (amountOut, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[1]);\n    const addAmountOut = amountOut * 10 ** decimals1;\n    let calAmount = addAmountOut.toLocaleString(\"fullwide\", {\n      useGrouping: !1\n    }); // let calAmount = BigNumber(addAmountOut).toFixed();\n\n    calAmount.toString();\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    const result = await contract.methods.getAmountsIn(calAmount, pair).call();\n    const decimals = await ContractServices.getDecimals(pair[0]);\n    return Number(result[0]) / 10 ** decimals;\n    console.log(\"this is the main result-------\", result);\n    let pushArray = [];\n\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals;\n      pushArray.push(path);\n    }\n\n    console.log(\"this is push array\", pushArray);\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getReserves = async pairAddress => {\n  try {\n    const contract = await ContractServices.callContract(pairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    return await contract.methods.getReserves().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTotalSupply = async pairAddress => {\n  try {\n    const contract = await ContractServices.callContract(pairAddress, MAIN_CONTRACT_LIST.pair.abi);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.totalSupply().call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenStaked = async pairAddress => {\n  try {\n    const contract = await ContractServices.callTokenContract(pairAddress);\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.balanceOf(MAIN_CONTRACT_LIST.farm.address).call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getBurnedToken = async () => {\n  try {\n    const contract = await ContractServices.callTokenContract(MAIN_CONTRACT_LIST.anchorNew.address);\n\n    if (contract) {\n      const decimals = await contract.methods.decimals().call();\n      let result = await contract.methods.balanceOf(BURN_ADDRESS).call();\n      result = (Number(result) / 10 ** decimals).toFixed(2);\n      return Number(result);\n    }\n\n    return 0;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst addLiquidity = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline).estimateGas({\n        from: to\n      });\n      value = await web3.utils.toHex(value);\n      contract.methods.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on(\"transactionHash\", hash => {\n        resolve(hash);\n      }).on(\"receipt\", receipt => {\n        toast.success(\"Liquidity added successfully.\");\n      }).on(\"error\", (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst addLiquidityETH = async data => {\n  // alert(\"in add liquidity\");\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      value = await web3.utils.toHex(value);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice(); // value = await web3.utils.toHex(value);\n\n      const gas = await contract.methods.addLiquidityETH(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline).estimateGas({\n        from: to,\n        value\n      });\n      contract.methods.addLiquidityETH(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on(\"transactionHash\", hash => {\n        resolve(hash);\n      }).on(\"receipt\", receipt => {\n        toast.success(\"Liquidity added successfully.\");\n      }).on(\"error\", (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst removeLiquidityWithPermit = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        liquidity,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value,\n        approveMax,\n        v,\n        r,\n        s,\n        checkSignature\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      console.log(\"##value:\", value, liquidity, v, r, s);\n\n      if (checkSignature) {\n        const gas = await contract.methods.removeLiquidityWithPermit(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.removeLiquidityWithPermit(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on(\"transactionHash\", hash => {\n          resolve(hash);\n        }).on(\"receipt\", receipt => {\n          console.log(receipt, \"in service add liquidity\");\n          toast.success(\"Liquidity removed successfully.\");\n        }).on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n      } else {\n        const gas = await contract.methods.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on(\"transactionHash\", hash => {\n          resolve(hash);\n        }).on(\"receipt\", receipt => {\n          console.log(receipt, \"in service add liquidity\");\n          toast.success(\"Liquidity removed successfully.\");\n        }).on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst removeLiquidityETHWithPermit = async (data, updateLpTokens) => {\n  console.log(\"###Data:\", data); // alert(\"removeLiquidityETHWithPermit\");\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        liquidity,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value,\n        approveMax,\n        v,\n        r,\n        s,\n        checkSignature\n      } = data;\n      console.log(liquidity, value, v, r, s); // value = \"0\";\n\n      console.log(\"rsv:\", r, s, v);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      if (checkSignature) {\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(ele => ele.toLowerCase() === token.toLowerCase());\n\n        if (supportingCheck) {\n          // alert(\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\");\n          // liquidity = \"1\";\n          const gas = await contract.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).estimateGas({\n            from: to,\n            liquidity\n          });\n          contract.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).send({\n            from: to,\n            gasPrice,\n            gas,\n            liquidity\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            console.log(receipt, \"in service add liquidity\");\n            updateLpTokens();\n            toast.success(\"Liquidity removed successfully.\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        } else {\n          // alert(\"removeLiquidityETHWithPermit\");\n          const gas = await contract.methods.removeLiquidityETHWithPermit(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).estimateGas({\n            from: to,\n            value\n          });\n          contract.methods.removeLiquidityETHWithPermit(token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            console.log(receipt, \"in service add liquidity\");\n            updateLpTokens();\n            toast.success(\"Liquidity removed successfully.\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        }\n      } else {\n        //without permit\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(ele => ele.toLowerCase() === token.toLowerCase());\n\n        if (supportingCheck) {\n          const gas = await contract.methods.removeLiquidityETHSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline).estimateGas({\n            from: to,\n            value\n          });\n          contract.methods.removeLiquidityETHSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            console.log(receipt, \"in service add liquidity\");\n            updateLpTokens();\n            toast.success(\"Liquidity removed successfully.\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        } else {\n          const gas = await contract.methods.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline).estimateGas({\n            from: to,\n            value\n          });\n          contract.methods.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            console.log(receipt, \"in service add liquidity\");\n            updateLpTokens();\n            toast.success(\"Liquidity removed successfully.\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        }\n      }\n    } catch (error) {\n      console.log(\"remove liquidity issue\", \"------------\", error);\n      reject(error);\n    }\n  });\n};\n\nconst swapExactTokensForTokens = async (data, a1, a2) => {\n  debugger;\n  return new Promise(async (resolve, reject) => {\n    let {\n      amountIn,\n      amountOutMin,\n      path,\n      to,\n      deadline,\n      value\n    } = data;\n    const web3 = await ContractServices.callWeb3();\n    if (!web3) return toast.error(ERRORS.SEL_WALLET);\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    const gasPrice = await ContractServices.calculateGasPrice();\n    const checkDeflationnaryTokens = DEFLATIONNARY_TOKENS.find(element => element.toLowerCase() === a1.toLowerCase());\n\n    if (checkDeflationnaryTokens) {\n      try {\n        const gas = await contract.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on(\"transactionHash\", hash => {\n          resolve(hash);\n        }).on(\"receipt\", receipt => {\n          console.log(receipt, \"in service add liquidity\");\n          toast.success(\"Swap transaction executed successfully\");\n        }).on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      try {\n        const gas = await contract.methods.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n          from: to\n        });\n        value = await web3.utils.toHex(value);\n        contract.methods.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline).send({\n          from: to,\n          gasPrice,\n          gas,\n          value\n        }).on(\"transactionHash\", hash => {\n          resolve(hash);\n        }).on(\"receipt\", receipt => {\n          console.log(receipt, \"in service add liquidity\");\n          toast.success(\"Swap transaction executed successfully\");\n        }).on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    }\n  });\n};\n\nconst swapTokensForExactTokens = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods.swapTokensForExactTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n        from: to\n      });\n      value = await web3.utils.toHex(value);\n      contract.methods.swapTokensForExactTokens(amountIn, amountOutMin, path, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on(\"transactionHash\", hash => {\n        resolve(hash);\n      }).on(\"receipt\", receipt => {\n        console.log(receipt, \"in service add liquidity\");\n        toast.success(\"Swap transaction executed successfully\");\n      }).on(\"error\", (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapExactETHForTokens = async (data, handleBalance, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // debugger;\n      console.log(\"isUserConnected\");\n      let {\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      console.log(\",,,,,,,,,,--------\", data);\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const checkDeflationnaryTokens = DEFLATIONNARY_TOKENS.find(element => element.toLowerCase() === a2.toLowerCase());\n      console.log(\"checkDeflationnaryTokens\", checkDeflationnaryTokens);\n\n      if (checkDeflationnaryTokens) {\n        console.log(\"hello\", to);\n\n        try {\n          const gasPrice = await ContractServices.calculateGasPrice();\n          console.log(\"----------hhhh-----------\", deadline);\n          const gas = await contract.methods.swapExactETHForTokensSupportingFeeOnTransferTokens(amountOutMin, path, to, deadline).estimateGas({\n            from: to,\n            value\n          });\n          console.log(\"bbbbbbbbb\", value, amountOutMin, path, to, deadline);\n          contract.methods.swapExactETHForTokensSupportingFeeOnTransferTokens(amountOutMin, path, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            console.log(receipt, \"in service add liquidity\");\n            toast.success(\"Swap transaction executed successfully.\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        } catch (error) {\n          // alert(\"hello\");\n          reject(error);\n        }\n      } else {\n        try {\n          const gasPrice = await ContractServices.calculateGasPrice();\n          const gas = await contract.methods.swapExactETHForTokens(amountOutMin, path, to, deadline).estimateGas({\n            from: to,\n            value\n          }); // console.log(\"est gas---------\", gas);\n          // console.log(\"----------\", contract.methods);\n\n          value = await web3.utils.toHex(value);\n          contract.methods.swapExactETHForTokens(amountOutMin, path, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas,\n            value\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            handleBalance();\n            toast.success(\"Swap transaction executed successfully\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        } catch (error) {\n          toast.error(error);\n        }\n      } //=====================\n\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapETHForExactTokens = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value); // console.log(\"Checking here:\", data);\n\n      const gas = await contract.methods.swapETHForExactTokens(amountOutMin, path, to, deadline).estimateGas({\n        from: to,\n        value\n      });\n      contract.methods.swapETHForExactTokens(amountOutMin, path, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas,\n        value\n      }).on(\"transactionHash\", hash => {\n        resolve(hash);\n      }).on(\"receipt\", receipt => {\n        // console.log(receipt, \"in service add liquidity\");\n        toast.success(\"Swap transaction executed successfully\");\n      }).on(\"error\", (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst getPairNonces = async (pair, address) => {\n  try {\n    const contract = await ContractServices.callContract(pair, MAIN_CONTRACT_LIST.pair.abi);\n    return contract.methods.nonces(address).call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst signRemoveTransaction = async (d, pair) => {\n  try {\n    const {\n      owner,\n      spender,\n      deadline,\n      value\n    } = d;\n    const web3 = await ContractServices.callWeb3();\n    if (!web3) return toast.error(ERRORS.SEL_WALLET);\n    let chainId = await web3.currentProvider.chainId;\n    chainId = await web3.utils.hexToNumber(chainId);\n    const nonce = await getPairNonces(pair, owner);\n    console.log(\"Data:\", nonce, owner, value, spender, deadline);\n    const EIP712Domain = [{\n      name: \"name\",\n      type: \"string\"\n    }, {\n      name: \"version\",\n      type: \"string\"\n    }, {\n      name: \"chainId\",\n      type: \"uint256\"\n    }, {\n      name: \"verifyingContract\",\n      type: \"address\"\n    }];\n    const domain = {\n      name: \"SaitaSwap LPs\",\n      version: \"1\",\n      value,\n      chainId,\n      verifyingContract: pair\n    };\n    const Permit = [{\n      name: \"owner\",\n      type: \"address\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"value\",\n      type: \"uint256\"\n    }, {\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      name: \"deadline\",\n      type: \"uint256\"\n    }];\n    const message = {\n      owner,\n      spender,\n      value,\n      nonce: web3.utils.toHex(nonce),\n      deadline\n    };\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit\n      },\n      domain,\n      primaryType: \"Permit\",\n      message\n    }); //old function\n    // const res = await web3.currentProvider.send('eth_signTypedData_v4', [owner, data]);\n    // console.log(data, res, 'before---------------')\n\n    const from = owner;\n    const params = [from, data];\n    const method = \"eth_signTypedData_v4\";\n    const res = await web3.currentProvider.request({\n      method,\n      params,\n      from\n    });\n    const splits = await splitSignature(res);\n    console.log(\"splits:\", splits);\n    return splits;\n  } catch (err) {\n    return err;\n  }\n}; ///////////////////////////////\n\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(Array.prototype.slice.apply(array, args));\n  };\n\n  return array;\n}\n\nfunction isBytesLike(value) {\n  return isHexString(value) && !(value.length % 2) || isBytes(value);\n}\n\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (value.length == null) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (typeof v !== \"number\" || v < 0 || v >= 256 || v % 1) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    // throw new Error(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(result);\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(result);\n  }\n\n  if (isBytes(value)) {\n    return addSlice(value);\n  }\n\n  return new Error(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    throw new Error(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = [length];\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nconst HexCharacters = \"0123456789abcdef\";\n\nfunction hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    // logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n\n    while (value) {\n      hex = HexCharacters[value & 0xf] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (typeof value === \"bigint\") {\n    value = value.toString(16);\n\n    if (value.length % 2) {\n      return \"0x0\" + value;\n    }\n\n    return \"0x\" + value;\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.toString().substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    return value.toString().toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    return result;\n  }\n\n  return new Error(\"invalid hexlify value\", \"value\", value);\n}\n\nfunction hexZeroPad(value, length) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    throw new Error(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    throw new Error(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n\n  return value;\n}\n\nconst splitSignature = async signature => {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n\n    if (bytes.length !== 65) {\n      throw new Error(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n    } // Get the r, s and v\n\n\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64]; // Allow a recid to be used as the v\n\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        throw new Error(\"signature invalid v byte\", \"signature\", signature);\n      }\n    } // Compute recoveryParam from v\n\n\n    result.recoveryParam = 1 - result.v % 2; // Compute _vs from recoveryParam and s\n\n    if (result.recoveryParam) {\n      bytes[32] |= 0x80;\n    }\n\n    result._vs = hexlify(bytes.slice(32, 64));\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs); // Set or check the recid\n\n      const recoveryParam = vs[0] >= 128 ? 1 : 0;\n\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        throw new Error(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n      } // Set or check the s\n\n\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        throw new Error(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    } // Use recid and v to populate each other\n\n\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        throw new Error(\"signature missing v and recoveryParam\", \"signature\", signature);\n      } else if (result.v === 0 || result.v === 1) {\n        result.recoveryParam = result.v;\n      } else {\n        result.recoveryParam = 1 - result.v % 2;\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else if (result.recoveryParam !== 1 - result.v % 2) {\n        throw new Error(\"signature recoveryParam mismatch v\", \"signature\", signature);\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      throw new Error(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      throw new Error(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n\n    if (vs[0] >= 128) {\n      throw new Error(\"signature s out of range\", \"signature\", signature);\n    }\n\n    if (result.recoveryParam) {\n      vs[0] |= 0x80;\n    }\n\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        throw new Error(\"signature invalid _vs\", \"signature\", signature);\n      }\n\n      result._vs = hexZeroPad(result._vs, 32);\n    } // Set or check the _vs\n\n\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      throw new Error(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n\n  return result;\n};\n\nconst swapTokensForExactETH = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountOut,\n        amountInMax,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n      const gas = await contract.methods.swapTokensForExactETH(amountOut, amountInMax, path, to, deadline).estimateGas({\n        from: to\n      });\n      contract.methods.swapTokensForExactETH(amountOut, amountInMax, path, to, deadline).send({\n        from: to,\n        gasPrice,\n        gas\n      }).on(\"transactionHash\", hash => {\n        resolve(hash);\n      }).on(\"receipt\", receipt => {\n        console.log(receipt, \"in service add liquidity\");\n        toast.success(\"Swap transaction executed successfully\");\n      }).on(\"error\", (error, receipt) => {\n        reject(error);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapExactTokensForETH = async (data, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        amountIn,\n        amountOutMin,\n        path,\n        to,\n        deadline,\n        value\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n      const checkDeflationnaryToken = DEFLATIONNARY_TOKENS.find(element => element.toLowerCase() == a1.toLowerCase());\n\n      if (checkDeflationnaryToken && a2.toLowerCase() === WETH.toLowerCase()) {\n        try {\n          const gas = await contract.methods.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).estimateGas({\n            from: to\n          });\n          contract.methods.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            console.log(receipt, \"in service add liquidity\");\n            toast.success(\"Swap transaction executed successfully\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      } else {\n        // (\"HEREEEEEE ELSE:\", data);\n        try {\n          const gas = await contract.methods.swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline).estimateGas({\n            from: to\n          });\n          contract.methods.swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline).send({\n            from: to,\n            gasPrice,\n            gas\n          }).on(\"transactionHash\", hash => {\n            resolve(hash);\n          }).on(\"receipt\", receipt => {\n            console.log(receipt, \"in service add liquidity\");\n            toast.success(\"Swap transaction executed successfully\");\n          }).on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst getAmountsOutForDValue = async (amountIn, pair) => {\n  try {\n    const contract = await ContractServices.callContract(MAIN_CONTRACT_LIST.router.address, MAIN_CONTRACT_LIST.router.abi);\n    return await contract.methods.getAmountsOut(amountIn, pair).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPathToUsdtForToken = async token => {\n  const weth = WETH;\n  const usdt = USD;\n  const sma = Saitama;\n  const getPair = ExchangeService.getPair; // if(isAddr(await get))\n\n  const isWithUsdtViaSma = async _ => isAddr(await getPair(token, sma));\n\n  const isWithUsdtDirect = async _ => isAddr(await getPair(token, usdt));\n\n  const isWithUsdtViaWeth = async _ => isAddr(await getPair(token, weth));\n\n  return (await isWithUsdtDirect()) ? [token, usdt] : (await isWithUsdtViaSma()) ? [token, sma, usdt] : (await isWithUsdtViaWeth()) ? [token, weth, usdt] : null;\n};\n\nconst tryGetPossiblePathToUSDT = async (token1, token2) => {\n  return [await getPathToUsdtForToken(token1), await getPathToUsdtForToken(token2)];\n};\n\nconst tryGetDollarDenomination = async (token1, token2, v1, v2) => {\n  console.log(v1, v2, \"kkkk==============\");\n  const amountsOut = getAmountsOutWithoutDecimal;\n  const decimals = await ContractServices.getDecimals;\n  const decimal = [await decimals(token1), await decimals(token2)];\n  console.log(decimal, \"decimals------------------\");\n  const paths = await tryGetPossiblePathToUSDT(token1, token2);\n  console.log(\"usdt paths:\", paths);\n  const amountOuts1 = await amountsOut(formatUp(1, decimal[0]), paths[0]);\n  const amountOuts2 = await amountsOut(formatUp(1, decimal[1]), paths[1]);\n  console.log(amountOuts1, \"amountOuts1\", amountOuts2, \"amountOuts2\");\n  const usdtAmountPerEachToken = [formatDown(amountOuts1[amountOuts1.length - 1], 6) * v1, formatDown(amountOuts2[amountOuts2.length - 1], 6) * v2];\n  return usdtAmountPerEachToken;\n}; //exporting functions vckoiiiii\n\n\nexport const ExchangeService = {\n  getPair,\n  getAmountsOut,\n  getReserves,\n  addLiquidity,\n  addLiquidityETH,\n  removeLiquidityWithPermit,\n  removeLiquidityETHWithPermit,\n  allPairs,\n  swapExactTokensForTokens,\n  swapTokensForExactTokens,\n  swapExactETHForTokens,\n  swapETHForExactTokens,\n  signRemoveTransaction,\n  swapTokensForExactETH,\n  swapExactTokensForETH,\n  getTokenZero,\n  getTokenOne,\n  getTotalSupply,\n  getTokenStaked,\n  getBurnedToken,\n  getAmountsIn,\n  getPairFromPancakeFactory,\n  getAmountsOutForDValue,\n  tryGetDollarDenomination\n};","map":{"version":3,"names":["MAIN_CONTRACT_LIST","WETH","BURN_ADDRESS","DEFLATIONNARY_TOKENS","TOKEN_LIST","pancakeFactory","USD","Saitama","toast","ContractServices","BigNumber","formatDown","formatUp","isAddr","ERRORS","allPairs","contract","callContract","factory","address","abi","methods","call","error","getPair","token1","token2","getPairFromPancakeFactory","getTokenZero","currentPairAddress","pair","token0","getTokenOne","getAmountsOutWithoutDecimal","amountIn","decimals1","getDecimals","addAmountIn","calAmount","toFixed","toString","router","result","getAmountsOut","pushArray","i","length","path","push","decimals","Number","console","log","getAmountsIn","amountOut","addAmountOut","toLocaleString","useGrouping","getReserves","pairAddress","getTotalSupply","totalSupply","getTokenStaked","callTokenContract","balanceOf","farm","getBurnedToken","anchorNew","addLiquidity","data","Promise","resolve","reject","tokenA","tokenB","amountADesired","amountBDesired","amountAMin","amountBMin","to","deadline","value","web3","callWeb3","SEL_WALLET","gasPrice","calculateGasPrice","gas","estimateGas","from","utils","toHex","send","on","hash","receipt","success","addLiquidityETH","token","amountTokenDesired","amountTokenMin","amountETHMin","removeLiquidityWithPermit","liquidity","approveMax","v","r","s","checkSignature","removeLiquidity","removeLiquidityETHWithPermit","updateLpTokens","supportingCheck","find","ele","toLowerCase","removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","removeLiquidityETHSupportingFeeOnTransferTokens","removeLiquidityETH","swapExactTokensForTokens","a1","a2","amountOutMin","checkDeflationnaryTokens","element","swapExactTokensForTokensSupportingFeeOnTransferTokens","swapTokensForExactTokens","swapExactETHForTokens","handleBalance","swapExactETHForTokensSupportingFeeOnTransferTokens","swapETHForExactTokens","getPairNonces","nonces","err","signRemoveTransaction","d","owner","spender","chainId","currentProvider","hexToNumber","nonce","EIP712Domain","name","type","domain","version","verifyingContract","Permit","message","JSON","stringify","types","primaryType","params","method","res","request","splits","splitSignature","isHexable","toHexString","addSlice","array","slice","args","Array","prototype","arguments","apply","isBytesLike","isHexString","isBytes","arrayify","options","unshift","parseInt","String","allowMissingPrefix","substring","hex","hexPad","Error","zeroPad","set","match","HexCharacters","hexlify","Math","floor","hexZeroPad","signature","_vs","recoveryParam","bytes","vs","swapTokensForExactETH","amountInMax","swapExactTokensForETH","checkDeflationnaryToken","swapExactTokensForETHSupportingFeeOnTransferTokens","getAmountsOutForDValue","getPathToUsdtForToken","weth","usdt","sma","ExchangeService","isWithUsdtViaSma","_","isWithUsdtDirect","isWithUsdtViaWeth","tryGetPossiblePathToUSDT","tryGetDollarDenomination","v1","v2","amountsOut","decimal","paths","amountOuts1","amountOuts2","usdtAmountPerEachToken"],"sources":["/data/test/saitaClientGit/src/services/ExchangeService.js"],"sourcesContent":["// import Web3 from \"web3\"\nimport {\n  MAIN_CONTRACT_LIST,\n  WETH,\n  BURN_ADDRESS,\n  DEFLATIONNARY_TOKENS,\n  TOKEN_LIST,\n  pancakeFactory,\n  USD,\n  Saitama,\n} from \"../assets/tokens\";\nimport { toast } from \"../components/Toast/Toast\";\nimport { ContractServices } from \"./ContractServices\";\nimport { BigNumber } from \"bignumber.js\";\nimport { formatDown, formatUp, isAddr } from \"../utils\";\nimport { ERRORS } from \"../constant\";\n\nconst allPairs = async () => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.factory.address,\n      MAIN_CONTRACT_LIST.factory.abi\n    );\n    return await contract.methods.allPairs().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPair = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.factory.address,\n      MAIN_CONTRACT_LIST.factory.abi\n    );\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPairFromPancakeFactory = async (token1, token2) => {\n  try {\n    const contract = await ContractServices.callContract(\n      pancakeFactory,\n      MAIN_CONTRACT_LIST.factory.abi\n    );\n    return await contract.methods.getPair(token1, token2).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenZero = async (currentPairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(\n      currentPairAddress,\n      MAIN_CONTRACT_LIST.pair.abi\n    );\n    return await contract.methods.token0().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenOne = async (currentPairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(\n      currentPairAddress,\n      MAIN_CONTRACT_LIST.pair.abi\n    );\n    return await contract.methods.token1().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsOutWithoutDecimal = async (amountIn, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountIn = amountIn * 10 ** decimals1;\n\n    let calAmount = BigNumber(addAmountIn).toFixed();\n    calAmount.toString();\n\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.router.address,\n      MAIN_CONTRACT_LIST.router.abi\n    );\n\n    const result = await contract.methods.getAmountsOut(calAmount, pair).call();\n\n    let pushArray = [];\n    for (let i = 0; i < result.length; i++) {\n      const path = result[i];\n      pushArray.push(path);\n    }\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsOut = async (amountIn, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[0]);\n    const addAmountIn = amountIn * 10 ** decimals1;\n\n    let calAmount = BigNumber(addAmountIn).toFixed();\n    calAmount.toString();\n\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.router.address,\n      MAIN_CONTRACT_LIST.router.abi\n    );\n\n    const result = await contract.methods.getAmountsOut(calAmount, pair).call();\n\n    let pushArray = [];\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals;\n      pushArray.push(path);\n    }\n    console.log(\"get amounts out push array\", pushArray);\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getAmountsIn = async (amountOut, pair) => {\n  try {\n    const decimals1 = await ContractServices.getDecimals(pair[1]);\n    const addAmountOut = amountOut * 10 ** decimals1;\n    let calAmount = addAmountOut.toLocaleString(\"fullwide\", {\n      useGrouping: !1,\n    });\n\n    // let calAmount = BigNumber(addAmountOut).toFixed();\n    calAmount.toString();\n\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.router.address,\n      MAIN_CONTRACT_LIST.router.abi\n    );\n    const result = await contract.methods.getAmountsIn(calAmount, pair).call();\n    const decimals = await ContractServices.getDecimals(pair[0]);\n    return Number(result[0]) / 10 ** decimals;\n\n    console.log(\"this is the main result-------\", result);\n    let pushArray = [];\n    for (let i = 0; i < result.length; i++) {\n      const decimals = await ContractServices.getDecimals(pair[i]);\n      const path = Number(result[i]) / 10 ** decimals;\n      pushArray.push(path);\n    }\n    console.log(\"this is push array\", pushArray);\n    return pushArray;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getReserves = async (pairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(\n      pairAddress,\n      MAIN_CONTRACT_LIST.pair.abi\n    );\n    return await contract.methods.getReserves().call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTotalSupply = async (pairAddress) => {\n  try {\n    const contract = await ContractServices.callContract(\n      pairAddress,\n      MAIN_CONTRACT_LIST.pair.abi\n    );\n    const decimals = await contract.methods.decimals().call();\n    let result = await contract.methods.totalSupply().call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getTokenStaked = async (pairAddress) => {\n  try {\n    const contract = await ContractServices.callTokenContract(pairAddress);\n    const decimals = await contract.methods.decimals().call();\n\n    let result = await contract.methods\n      .balanceOf(MAIN_CONTRACT_LIST.farm.address)\n      .call();\n    result = (Number(result) / 10 ** decimals).toFixed(5);\n    return Number(result);\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst getBurnedToken = async () => {\n  try {\n    const contract = await ContractServices.callTokenContract(\n      MAIN_CONTRACT_LIST.anchorNew.address\n    );\n    if (contract) {\n      const decimals = await contract.methods.decimals().call();\n\n      let result = await contract.methods.balanceOf(BURN_ADDRESS).call();\n      result = (Number(result) / 10 ** decimals).toFixed(2);\n      return Number(result);\n    }\n    return 0;\n  } catch (error) {\n    console.log(\"Error:\", error);\n    return error;\n  }\n};\n\nconst addLiquidity = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value,\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      const gas = await contract.methods\n        .addLiquidity(\n          tokenA,\n          tokenB,\n          amountADesired,\n          amountBDesired,\n          amountAMin,\n          amountBMin,\n          to,\n          deadline\n        )\n        .estimateGas({ from: to });\n      value = await web3.utils.toHex(value);\n\n      contract.methods\n        .addLiquidity(\n          tokenA,\n          tokenB,\n          amountADesired,\n          amountBDesired,\n          amountAMin,\n          amountBMin,\n          to,\n          deadline\n        )\n        .send({ from: to, gasPrice, gas, value })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          toast.success(\"Liquidity added successfully.\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst addLiquidityETH = async (data) => {\n  // alert(\"in add liquidity\");\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value,\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      value = await web3.utils.toHex(value);\n\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n      // value = await web3.utils.toHex(value);\n\n      const gas = await contract.methods\n        .addLiquidityETH(\n          token,\n          amountTokenDesired,\n          amountTokenMin,\n          amountETHMin,\n          to,\n          deadline\n        )\n        .estimateGas({ from: to, value });\n\n      contract.methods\n        .addLiquidityETH(\n          token,\n          amountTokenDesired,\n          amountTokenMin,\n          amountETHMin,\n          to,\n          deadline\n        )\n        .send({ from: to, gasPrice, gas, value })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          toast.success(\"Liquidity added successfully.\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst removeLiquidityWithPermit = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        tokenA,\n        tokenB,\n        liquidity,\n        amountAMin,\n        amountBMin,\n        to,\n        deadline,\n        value,\n        approveMax,\n        v,\n        r,\n        s,\n        checkSignature,\n      } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      console.log(\"##value:\", value, liquidity, v, r, s);\n      if (checkSignature) {\n        const gas = await contract.methods\n          .removeLiquidityWithPermit(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline,\n            approveMax,\n            v,\n            r,\n            s\n          )\n          .estimateGas({ from: to });\n\n        value = await web3.utils.toHex(value);\n\n        contract.methods\n          .removeLiquidityWithPermit(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline,\n            approveMax,\n            v,\n            r,\n            s\n          )\n          .send({ from: to, gasPrice, gas, value })\n          .on(\"transactionHash\", (hash) => {\n            resolve(hash);\n          })\n          .on(\"receipt\", (receipt) => {\n            console.log(receipt, \"in service add liquidity\");\n            toast.success(\"Liquidity removed successfully.\");\n          })\n          .on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n      } else {\n        const gas = await contract.methods\n          .removeLiquidity(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n          )\n          .estimateGas({ from: to });\n        value = await web3.utils.toHex(value);\n\n        contract.methods\n          .removeLiquidity(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n          )\n          .send({ from: to, gasPrice, gas, value })\n          .on(\"transactionHash\", (hash) => {\n            resolve(hash);\n          })\n          .on(\"receipt\", (receipt) => {\n            console.log(receipt, \"in service add liquidity\");\n            toast.success(\"Liquidity removed successfully.\");\n          })\n          .on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst removeLiquidityETHWithPermit = async (data, updateLpTokens) => {\n  console.log(\"###Data:\", data);\n  // alert(\"removeLiquidityETHWithPermit\");\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        token,\n        liquidity,\n        amountTokenMin,\n        amountETHMin,\n        to,\n        deadline,\n        value,\n        approveMax,\n        v,\n        r,\n        s,\n        checkSignature,\n      } = data;\n      console.log(liquidity, value, v, r, s);\n      // value = \"0\";\n      console.log(\"rsv:\", r, s, v);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n\n      if (checkSignature) {\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(\n          (ele) => ele.toLowerCase() === token.toLowerCase()\n        );\n\n        if (supportingCheck) {\n          // alert(\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\");\n          // liquidity = \"1\";\n          const gas = await contract.methods\n            .removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline,\n              approveMax,\n              v,\n              r,\n              s\n            )\n            .estimateGas({ from: to, liquidity });\n\n          contract.methods\n            .removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline,\n              approveMax,\n              v,\n              r,\n              s\n            )\n            .send({ from: to, gasPrice, gas, liquidity })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              console.log(receipt, \"in service add liquidity\");\n              updateLpTokens();\n              toast.success(\"Liquidity removed successfully.\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        } else {\n          // alert(\"removeLiquidityETHWithPermit\");\n          const gas = await contract.methods\n            .removeLiquidityETHWithPermit(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline,\n              approveMax,\n              v,\n              r,\n              s\n            )\n            .estimateGas({ from: to, value });\n\n          contract.methods\n            .removeLiquidityETHWithPermit(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline,\n              approveMax,\n              v,\n              r,\n              s\n            )\n            .send({ from: to, gasPrice, gas, value })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              console.log(receipt, \"in service add liquidity\");\n              updateLpTokens();\n              toast.success(\"Liquidity removed successfully.\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        }\n      } else {\n        //without permit\n        // for Anchor Tokens\n        const supportingCheck = DEFLATIONNARY_TOKENS.find(\n          (ele) => ele.toLowerCase() === token.toLowerCase()\n        );\n\n        if (supportingCheck) {\n          const gas = await contract.methods\n            .removeLiquidityETHSupportingFeeOnTransferTokens(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline\n            )\n            .estimateGas({ from: to, value });\n\n          contract.methods\n            .removeLiquidityETHSupportingFeeOnTransferTokens(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline\n            )\n            .send({ from: to, gasPrice, gas, value })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              console.log(receipt, \"in service add liquidity\");\n              updateLpTokens();\n              toast.success(\"Liquidity removed successfully.\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        } else {\n          const gas = await contract.methods\n            .removeLiquidityETH(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline\n            )\n            .estimateGas({ from: to, value });\n\n          contract.methods\n            .removeLiquidityETH(\n              token,\n              liquidity,\n              amountTokenMin,\n              amountETHMin,\n              to,\n              deadline\n            )\n\n            .send({ from: to, gasPrice, gas, value })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              console.log(receipt, \"in service add liquidity\");\n              updateLpTokens();\n              toast.success(\"Liquidity removed successfully.\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        }\n      }\n    } catch (error) {\n      console.log(\"remove liquidity issue\", \"------------\", error);\n      reject(error);\n    }\n  });\n};\nconst swapExactTokensForTokens = async (data, a1, a2) => {\n  debugger;\n  return new Promise(async (resolve, reject) => {\n    let { amountIn, amountOutMin, path, to, deadline, value } = data;\n\n    const web3 = await ContractServices.callWeb3();\n    if (!web3) return toast.error(ERRORS.SEL_WALLET);\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.router.address,\n      MAIN_CONTRACT_LIST.router.abi\n    );\n    const gasPrice = await ContractServices.calculateGasPrice();\n    const checkDeflationnaryTokens = DEFLATIONNARY_TOKENS.find(\n      (element) => element.toLowerCase() === a1.toLowerCase()\n    );\n\n    if (checkDeflationnaryTokens) {\n      try {\n        const gas = await contract.methods\n          .swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            to,\n            deadline\n          )\n          .estimateGas({ from: to });\n\n        value = await web3.utils.toHex(value);\n\n        contract.methods\n          .swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            to,\n            deadline\n          )\n          .send({ from: to, gasPrice, gas, value })\n          .on(\"transactionHash\", (hash) => {\n            resolve(hash);\n          })\n          .on(\"receipt\", (receipt) => {\n            console.log(receipt, \"in service add liquidity\");\n            toast.success(\"Swap transaction executed successfully\");\n          })\n          .on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      try {\n        const gas = await contract.methods\n          .swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline)\n          .estimateGas({ from: to });\n\n        value = await web3.utils.toHex(value);\n\n        contract.methods\n          .swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline)\n          .send({ from: to, gasPrice, gas, value })\n          .on(\"transactionHash\", (hash) => {\n            resolve(hash);\n          })\n          .on(\"receipt\", (receipt) => {\n            console.log(receipt, \"in service add liquidity\");\n            toast.success(\"Swap transaction executed successfully\");\n          })\n          .on(\"error\", (error, receipt) => {\n            reject(error);\n          });\n      } catch (error) {\n        reject(error);\n      }\n    }\n  });\n};\n\nconst swapTokensForExactTokens = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let { amountIn, amountOutMin, path, to, deadline, value } = data;\n\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n      const gas = await contract.methods\n        .swapTokensForExactTokens(amountIn, amountOutMin, path, to, deadline)\n        .estimateGas({ from: to });\n      value = await web3.utils.toHex(value);\n      contract.methods\n        .swapTokensForExactTokens(amountIn, amountOutMin, path, to, deadline)\n        .send({ from: to, gasPrice, gas, value })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(receipt, \"in service add liquidity\");\n          toast.success(\"Swap transaction executed successfully\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapExactETHForTokens = async (data, handleBalance, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // debugger;\n      console.log(\"isUserConnected\");\n      let { amountOutMin, path, to, deadline, value } = data;\n      console.log(\",,,,,,,,,,--------\", data);\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const checkDeflationnaryTokens = DEFLATIONNARY_TOKENS.find(\n        (element) => element.toLowerCase() === a2.toLowerCase()\n      );\n      console.log(\"checkDeflationnaryTokens\", checkDeflationnaryTokens);\n      if (checkDeflationnaryTokens) {\n        console.log(\"hello\", to);\n        try {\n          const gasPrice = await ContractServices.calculateGasPrice();\n          console.log(\"----------hhhh-----------\", deadline);\n          const gas = await contract.methods\n            .swapExactETHForTokensSupportingFeeOnTransferTokens(\n              amountOutMin,\n              path,\n              to,\n              deadline\n            )\n            .estimateGas({ from: to, value });\n          console.log(\"bbbbbbbbb\", value, amountOutMin, path, to, deadline);\n          contract.methods\n            .swapExactETHForTokensSupportingFeeOnTransferTokens(\n              amountOutMin,\n              path,\n              to,\n              deadline\n            )\n            .send({ from: to, gasPrice, gas, value })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              console.log(receipt, \"in service add liquidity\");\n              toast.success(\"Swap transaction executed successfully.\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        } catch (error) {\n          // alert(\"hello\");\n          reject(error);\n        }\n      } else {\n        try {\n          const gasPrice = await ContractServices.calculateGasPrice();\n          const gas = await contract.methods\n            .swapExactETHForTokens(amountOutMin, path, to, deadline)\n            .estimateGas({ from: to, value });\n          // console.log(\"est gas---------\", gas);\n          // console.log(\"----------\", contract.methods);\n          value = await web3.utils.toHex(value);\n          contract.methods\n            .swapExactETHForTokens(amountOutMin, path, to, deadline)\n            .send({ from: to, gasPrice, gas, value })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              handleBalance();\n              toast.success(\"Swap transaction executed successfully\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        } catch (error) {\n          toast.error(error);\n        }\n      }\n      //=====================\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapETHForExactTokens = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let { amountOutMin, path, to, deadline, value } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n      // console.log(\"Checking here:\", data);\n      const gas = await contract.methods\n        .swapETHForExactTokens(amountOutMin, path, to, deadline)\n        .estimateGas({ from: to, value });\n      contract.methods\n        .swapETHForExactTokens(amountOutMin, path, to, deadline)\n        .send({ from: to, gasPrice, gas, value })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          // console.log(receipt, \"in service add liquidity\");\n          toast.success(\"Swap transaction executed successfully\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst getPairNonces = async (pair, address) => {\n  try {\n    const contract = await ContractServices.callContract(\n      pair,\n      MAIN_CONTRACT_LIST.pair.abi\n    );\n    return contract.methods.nonces(address).call();\n  } catch (err) {\n    return err;\n  }\n};\n\nconst signRemoveTransaction = async (d, pair) => {\n  try {\n    const { owner, spender, deadline, value } = d;\n    const web3 = await ContractServices.callWeb3();\n    if (!web3) return toast.error(ERRORS.SEL_WALLET);\n    let chainId = await web3.currentProvider.chainId;\n    chainId = await web3.utils.hexToNumber(chainId);\n\n    const nonce = await getPairNonces(pair, owner);\n    console.log(\"Data:\", nonce, owner, value, spender, deadline);\n    const EIP712Domain = [\n      { name: \"name\", type: \"string\" },\n      { name: \"version\", type: \"string\" },\n      { name: \"chainId\", type: \"uint256\" },\n      { name: \"verifyingContract\", type: \"address\" },\n    ];\n    const domain = {\n      name: \"SaitaSwap LPs\",\n      version: \"1\",\n      value,\n      chainId,\n      verifyingContract: pair,\n    };\n    const Permit = [\n      { name: \"owner\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ];\n    const message = {\n      owner,\n      spender,\n      value,\n      nonce: web3.utils.toHex(nonce),\n      deadline,\n    };\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit,\n      },\n      domain,\n      primaryType: \"Permit\",\n      message,\n    });\n\n    //old function\n    // const res = await web3.currentProvider.send('eth_signTypedData_v4', [owner, data]);\n    // console.log(data, res, 'before---------------')\n\n    const from = owner;\n    const params = [from, data];\n    const method = \"eth_signTypedData_v4\";\n\n    const res = await web3.currentProvider.request({\n      method,\n      params,\n      from,\n    });\n    const splits = await splitSignature(res);\n    console.log(\"splits:\", splits);\n    return splits;\n  } catch (err) {\n    return err;\n  }\n};\n\n///////////////////////////////\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(Array.prototype.slice.apply(array, args));\n  };\n  return array;\n}\nfunction isBytesLike(value) {\n  return (isHexString(value) && !(value.length % 2)) || isBytes(value);\n}\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n  if (value.length == null) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    if (typeof v !== \"number\" || v < 0 || v >= 256 || v % 1) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    // throw new Error(value, \"invalid arrayify value\");\n\n    const result = [];\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(result);\n  }\n\n  if (\n    options.allowMissingPrefix &&\n    typeof value === \"string\" &&\n    value.substring(0, 2) !== \"0x\"\n  ) {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(result);\n  }\n\n  if (isBytes(value)) {\n    return addSlice(value);\n  }\n\n  return new Error(\"invalid arrayify value\", \"value\", value);\n}\n\nfunction zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    throw new Error(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = [length];\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\n\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\n\nconst HexCharacters = \"0123456789abcdef\";\n\nfunction hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    // logger.checkSafeUint53(value, \"invalid hexlify value\");\n\n    let hex = \"\";\n    while (value) {\n      hex = HexCharacters[value & 0xf] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (typeof value === \"bigint\") {\n    value = value.toString(16);\n    if (value.length % 2) {\n      return \"0x0\" + value;\n    }\n    return \"0x\" + value;\n  }\n\n  if (\n    options.allowMissingPrefix &&\n    typeof value === \"string\" &&\n    value.substring(0, 2) !== \"0x\"\n  ) {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.toString().substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        throw new Error(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n    return value.toString().toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n  }\n\n  return new Error(\"invalid hexlify value\", \"value\", value);\n}\n\nfunction hexZeroPad(value, length) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    throw new Error(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    throw new Error(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  return value;\n}\n\nconst splitSignature = async (signature) => {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0,\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n    if (bytes.length !== 65) {\n      throw new Error(\n        \"invalid signature string; must be 65 bytes\",\n        \"signature\",\n        signature\n      );\n    }\n\n    // Get the r, s and v\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64];\n\n    // Allow a recid to be used as the v\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        throw new Error(\"signature invalid v byte\", \"signature\", signature);\n      }\n    }\n\n    // Compute recoveryParam from v\n    result.recoveryParam = 1 - (result.v % 2);\n\n    // Compute _vs from recoveryParam and s\n    if (result.recoveryParam) {\n      bytes[32] |= 0x80;\n    }\n    result._vs = hexlify(bytes.slice(32, 64));\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs;\n\n    // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs);\n\n      // Set or check the recid\n      const recoveryParam = vs[0] >= 128 ? 1 : 0;\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        throw new Error(\n          \"signature recoveryParam mismatch _vs\",\n          \"signature\",\n          signature\n        );\n      }\n\n      // Set or check the s\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        throw new Error(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    }\n\n    // Use recid and v to populate each other\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        throw new Error(\n          \"signature missing v and recoveryParam\",\n          \"signature\",\n          signature\n        );\n      } else if (result.v === 0 || result.v === 1) {\n        result.recoveryParam = result.v;\n      } else {\n        result.recoveryParam = 1 - (result.v % 2);\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else if (result.recoveryParam !== 1 - (result.v % 2)) {\n        throw new Error(\n          \"signature recoveryParam mismatch v\",\n          \"signature\",\n          signature\n        );\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      throw new Error(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      throw new Error(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n    if (vs[0] >= 128) {\n      throw new Error(\"signature s out of range\", \"signature\", signature);\n    }\n    if (result.recoveryParam) {\n      vs[0] |= 0x80;\n    }\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        throw new Error(\"signature invalid _vs\", \"signature\", signature);\n      }\n      result._vs = hexZeroPad(result._vs, 32);\n    }\n\n    // Set or check the _vs\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      throw new Error(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n  return result;\n};\n\nconst swapTokensForExactETH = async (data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let { amountOut, amountInMax, path, to, deadline, value } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n\n      const gas = await contract.methods\n        .swapTokensForExactETH(amountOut, amountInMax, path, to, deadline)\n        .estimateGas({ from: to });\n      contract.methods\n        .swapTokensForExactETH(amountOut, amountInMax, path, to, deadline)\n        .send({ from: to, gasPrice, gas })\n        .on(\"transactionHash\", (hash) => {\n          resolve(hash);\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(receipt, \"in service add liquidity\");\n          toast.success(\"Swap transaction executed successfully\");\n        })\n        .on(\"error\", (error, receipt) => {\n          reject(error);\n        });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst swapExactTokensForETH = async (data, a1, a2) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let { amountIn, amountOutMin, path, to, deadline, value } = data;\n      const web3 = await ContractServices.callWeb3();\n      if (!web3) return toast.error(ERRORS.SEL_WALLET);\n      const contract = await ContractServices.callContract(\n        MAIN_CONTRACT_LIST.router.address,\n        MAIN_CONTRACT_LIST.router.abi\n      );\n      const gasPrice = await ContractServices.calculateGasPrice();\n      value = await web3.utils.toHex(value);\n\n      const checkDeflationnaryToken = DEFLATIONNARY_TOKENS.find(\n        (element) => element.toLowerCase() == a1.toLowerCase()\n      );\n\n      if (checkDeflationnaryToken && a2.toLowerCase() === WETH.toLowerCase()) {\n        try {\n          const gas = await contract.methods\n            .swapExactTokensForETHSupportingFeeOnTransferTokens(\n              amountIn,\n              amountOutMin,\n              path,\n              to,\n              deadline\n            )\n            .estimateGas({ from: to });\n\n          contract.methods\n            .swapExactTokensForETHSupportingFeeOnTransferTokens(\n              amountIn,\n              amountOutMin,\n              path,\n              to,\n              deadline\n            )\n            .send({ from: to, gasPrice, gas })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              console.log(receipt, \"in service add liquidity\");\n              toast.success(\"Swap transaction executed successfully\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        } catch (error) {\n          reject(error);\n        }\n      } else {\n        // (\"HEREEEEEE ELSE:\", data);\n        try {\n          const gas = await contract.methods\n            .swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline)\n            .estimateGas({ from: to });\n\n          contract.methods\n            .swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline)\n            .send({ from: to, gasPrice, gas })\n            .on(\"transactionHash\", (hash) => {\n              resolve(hash);\n            })\n            .on(\"receipt\", (receipt) => {\n              console.log(receipt, \"in service add liquidity\");\n              toast.success(\"Swap transaction executed successfully\");\n            })\n            .on(\"error\", (error, receipt) => {\n              reject(error);\n            });\n        } catch (error) {\n          reject(error);\n        }\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nconst getAmountsOutForDValue = async (amountIn, pair) => {\n  try {\n    const contract = await ContractServices.callContract(\n      MAIN_CONTRACT_LIST.router.address,\n      MAIN_CONTRACT_LIST.router.abi\n    );\n\n    return await contract.methods.getAmountsOut(amountIn, pair).call();\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getPathToUsdtForToken = async (token) => {\n  const weth = WETH;\n  const usdt = USD;\n  const sma = Saitama;\n\n  const getPair = ExchangeService.getPair;\n  // if(isAddr(await get))\n  const isWithUsdtViaSma = async (_) => isAddr(await getPair(token, sma));\n  const isWithUsdtDirect = async (_) => isAddr(await getPair(token, usdt));\n  const isWithUsdtViaWeth = async (_) => isAddr(await getPair(token, weth));\n\n  return (await isWithUsdtDirect())\n    ? [token, usdt]\n    : (await isWithUsdtViaSma())\n    ? [token, sma, usdt]\n    : (await isWithUsdtViaWeth())\n    ? [token, weth, usdt]\n    : null;\n};\n\nconst tryGetPossiblePathToUSDT = async (token1, token2) => {\n  return [\n    await getPathToUsdtForToken(token1),\n    await getPathToUsdtForToken(token2),\n  ];\n};\n\nconst tryGetDollarDenomination = async (token1, token2, v1, v2) => {\n  console.log(v1, v2, \"kkkk==============\");\n  const amountsOut = getAmountsOutWithoutDecimal;\n  const decimals = await ContractServices.getDecimals;\n  const decimal = [await decimals(token1), await decimals(token2)];\n  console.log(decimal, \"decimals------------------\");\n  const paths = await tryGetPossiblePathToUSDT(token1, token2);\n  console.log(\"usdt paths:\", paths);\n  const amountOuts1 = await amountsOut(formatUp(1, decimal[0]), paths[0]);\n  const amountOuts2 = await amountsOut(formatUp(1, decimal[1]), paths[1]);\n  console.log(amountOuts1, \"amountOuts1\", amountOuts2, \"amountOuts2\");\n  const usdtAmountPerEachToken = [\n    formatDown(amountOuts1[amountOuts1.length - 1], 6) * v1,\n    formatDown(amountOuts2[amountOuts2.length - 1], 6) * v2,\n  ];\n  return usdtAmountPerEachToken;\n};\n\n//exporting functions vckoiiiii\n\nexport const ExchangeService = {\n  getPair,\n  getAmountsOut,\n  getReserves,\n  addLiquidity,\n  addLiquidityETH,\n  removeLiquidityWithPermit,\n  removeLiquidityETHWithPermit,\n  allPairs,\n  swapExactTokensForTokens,\n  swapTokensForExactTokens,\n  swapExactETHForTokens,\n  swapETHForExactTokens,\n  signRemoveTransaction,\n  swapTokensForExactETH,\n  swapExactTokensForETH,\n  getTokenZero,\n  getTokenOne,\n  getTotalSupply,\n  getTokenStaked,\n  getBurnedToken,\n  getAmountsIn,\n  getPairFromPancakeFactory,\n  getAmountsOutForDValue,\n  tryGetDollarDenomination,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}