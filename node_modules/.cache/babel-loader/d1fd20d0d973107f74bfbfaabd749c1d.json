{"ast":null,"code":"var _jsxFileName = \"/data/test/saitaClientGit/src/pages/Trade/AddLiquidity.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Col } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport Plusicon from \"../../assets/images/plus_yellow.png\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport ButtonBack from \"../../components/buttonBack/ButtonBack\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport TimerIcon from \"../../assets/images/ionic-ios-timer.svg\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH } from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport { addTransaction, checkUserLpTokens, searchTokenByNameOrAddress, startLoading, stopLoading } from \"../../redux/actions\";\nimport { BigNumber } from \"bignumber.js\";\nimport SupplyModal from \"../../components/SupplyModal/SupplyModal\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport { ConsoleView } from \"react-device-detect\";\nimport { ERRORS, EVENTS, LS_KEYS } from \"../../constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddLiquidity = props => {\n  _s();\n\n  var _Number;\n\n  const tokenList = useSelector(state => state.persist.tokenList);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const [show1, setShow1] = useState(false);\n\n  const handleClose1 = () => setShow1(false);\n\n  const handleShow1 = () => setShow1(true);\n\n  const [settingShow, setsettingShow] = useState(false);\n\n  const settingClose = () => setsettingShow(false);\n\n  const [showRecent, setShowRecent] = useState(false);\n\n  const supplyModalClose = () => setShowSupplyModal(false);\n\n  const recentTransactionsClose = () => setShowRecent(false);\n\n  const settinghandleShow = () => setsettingShow(true);\n\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(true);\n  const dispatch = useDispatch();\n  const MINIMUM_LIQUIDITY = 10 ** 3;\n  const isUserConnected = useSelector(state => state.persist.isUserConnected);\n  const walletType = useSelector(state => state.persist.walletType);\n  const deadline = useSelector(state => state.persist.deadline);\n  const slippagePercentage = useSelector(state => state.persist.slippagePercentage);\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(0);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(TOKEN_LIST[0].symbol);\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] = useState(\"Select a token\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneDeposit, setTokenOneDeposit] = useState(0);\n  const [tokenTwoDeposit, setTokenTwoDeposit] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n  const [isWalletSelected, setIsWalletSelected] = useState(!1);\n  useEffect(_ => {\n    // onload check if wallet is selected\n    const selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\n\n    if (!selWalletType) {\n      setIsWalletSelected(!1);\n    } else {\n      setIsWalletSelected(!0);\n    }\n  }, []);\n  useEffect(() => {\n    if (isWalletSelected) {\n      setFilteredTokenList(tokenList.filter(token => token.name.toLowerCase().includes(search.toLowerCase())));\n      init();\n    }\n  }, [search, tokenList]);\n  document.addEventListener(EVENTS.LOGIN_SUCCESS, async e => {\n    e.preventDefault();\n    await init();\n  });\n\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n      const {\n        lptoken\n      } = props;\n      console.log(lptoken, \"lptoken\");\n\n      if (lptoken) {\n        // console.log(lptoken, \"Lpztoken\");\n        setCurrentPairAddress(lptoken.pair);\n        setLpTokenBalance(lptoken.balance);\n        setSharePoolValue(lptoken.poolShare);\n\n        if (lptoken.token0Obj) {\n          // console.log(\"hahah\", lptoken);\n          setTokenOne(lptoken.token0Obj);\n          setCurrencyNameForTokenOne(lptoken.token0Obj.symbol);\n          setTokenOneDeposit(lptoken.token0Deposit);\n          let tokenBal = 0;\n\n          if (lptoken.token0Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(lptoken.token0Obj.address, isUserConnected);\n          }\n\n          setTokenOneBalance(tokenBal);\n        }\n\n        if (lptoken.token1Obj) {\n          setTokenTwo(lptoken.token1Obj);\n          setCurrencyNameForTokenTwo(lptoken.token1Obj.symbol);\n          setTokenTwoDeposit(lptoken.token1Deposit);\n          let tokenBal = 0;\n\n          if (lptoken.token1Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(lptoken.token1Obj.address, isUserConnected);\n          }\n\n          setTokenTwoBalance(tokenBal);\n        }\n      }\n    }\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    props.backBtn();\n    window.location.reload();\n  };\n\n  const onHandleOpenModal = tokenType => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n\n    setShow(true);\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency);\n    setModalCurrency({\n      modalCurrency: true\n    });\n    setTokenType(tokenType);\n  };\n\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const {\n      address,\n      symbol\n    } = token;\n\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n\n    let a1,\n        a2,\n        oneBalance = 0,\n        twoBalance = 0;\n\n    if (selecting === \"TK1\") {\n      handleClose();\n      a1 = address;\n\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n\n    if (selecting === \"TK2\") {\n      handleClose();\n      a2 = address;\n\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(address, isUserConnected);\n      }\n\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n        const d1 = await ContractServices.getDecimals(a1);\n        const d2 = await ContractServices.getDecimals(a2);\n        const reserves = await ExchangeService.getReserves(currentPairAddress); // console.log(\"d1\", d1, \"d2\", d2);\n\n        calculateLiquidityPercentageWithSelectCurrency(reserves, d1, d2, lpTokenBalance, currentPairAddress);\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true); // xxxxxxxxx\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log('qqqqq', currentPairAddress);\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // console.log('aaaaa', reserves);\n        // await calculateLiquidityPercentage(reserves, 0.1, 0.02);\n        // console.log('wwww', result);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(tokenOne.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals); // console.log(tokenOne.decimals, \"token 1 decimals---------------\");\n\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(tokenTwo.address, MAIN_CONTRACT_LIST.router.address, isUserConnected);\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals); // console.log(allowance, 'token 2')\n\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n\n    return true;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    let amt1, amt2;\n\n    if (tokenOne.address.toLowerCase() !== TOKEN_LIST[0].address.toLowerCase() && tokenOne.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase() && tokenTwo.address.toLowerCase() !== TOKEN_LIST[0].address.toLowerCase() && tokenTwo.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase()) {\n      toast.error(\"One token should be either Eth or Saitama\");\n      return;\n    }\n\n    if (tokenType === \"TK1\") {\n      setTokenOneValue(amount);\n      amt1 = amount;\n      const r = await getAllowance(amount, tokenType);\n\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenOne.address;\n\n        if (tokenOne.address === \"BNB\") {\n          tokenAddress = WETH;\n        } // console.log(\"EEEEEE\", currentPairAddress);\n\n\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(currentPairAddress);\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (reserves[0] !== \"0\" && reserves[1] !== \"0\") {\n            if (tk0 && reserves) {\n              let a;\n\n              if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n                a = (amount * (reserves[1] / 10 ** token1Decimal / (reserves[0] / 10 ** token0Decimal))).toFixed(5);\n              } else {\n                a = (amount * (reserves[0] / 10 ** token0Decimal / (reserves[1] / 10 ** token1Decimal))).toFixed(5);\n              } // console.log(\"a\", Number(a));\n\n\n              setTokenTwoValue(a);\n              amt2 = a;\n\n              if (!tokenTwoApproval) {\n                const r = await getAllowance(a, \"TK2\");\n                handleApprovalButton(\"TK2\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (tokenType === \"TK2\") {\n      setTokenTwoValue(amount);\n      amt2 = amount;\n      const r = await getAllowance(amount, tokenType);\n\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenTwo.address;\n\n        if (tokenTwo.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(currentPairAddress);\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (reserves[0] !== \"0\" && reserves[1] !== \"0\") {\n            if (tk0 && reserves) {\n              let a;\n\n              if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n                a = (amount * (reserves[1] / 10 ** token1Decimal / (reserves[0] / 10 ** token0Decimal))).toFixed(5);\n              } else {\n                a = (amount * (reserves[0] / 10 ** token0Decimal / (reserves[1] / 10 ** token1Decimal))).toFixed(5);\n              }\n\n              setTokenOneValue(a);\n              amt1 = a;\n\n              if (!tokenOneApproval) {\n                const r = await getAllowance(a, \"TK1\");\n                handleApprovalButton(\"TK1\");\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (tokenOne.address && tokenTwo.address) {\n      let a1 = tokenOne.address,\n          a2 = tokenTwo.address;\n      let currentPairAddress;\n\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(currentPairAddress, isUserConnected);\n        setLpTokenBalance(lpTokenBalance);\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        const ratio = await calculateLiquidityPercentage(reserves, amt1, amt2); // console.log(reserves, ratio, '---------------------------ratio');\n\n        setSharePoolValue(ratio);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  }; //call web3 approval function\n\n\n  const handleTokenApproval = async tokenType => {\n    const acc = isUserConnected; // console.log(\"isUserConnected\", isUserConnected);\n    // if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n    //   return toast.error(\"Wallet address doesn`t match!\");\n    // }\n\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    } // const value = (2*256 - 1).toString();\n\n\n    const value = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n\n    try {\n      dispatch(startLoading());\n      const r = await ContractServices.approveToken(isUserConnected, value, MAIN_CONTRACT_LIST.router.address, tokenAddress);\n\n      if (r.code == 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash\n        };\n\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n\n      dispatch(stopLoading());\n    } catch (err) {\n      // console.log(\"***********err*\", err);\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n\n  const handleSearchToken = async data => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n\n  const handleApprovalButton = tokenType => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col button_unlockWallet\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenOne.symbol}`,\n          disabled: approvalConfirmation,\n          onClick: () => handleTokenApproval(tokenType)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col button_unlockWallet\",\n        children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          className: \"swapBtn\",\n          title: `Approve ${tokenTwo.symbol}`,\n          disabled: approvalConfirmation,\n          onClick: () => handleTokenApproval(tokenType)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this);\n    } //dead code\n\n\n    return null;\n  };\n\n  const calculateLiquidityPercentageWithSelectCurrency = async (reserve, d1, d2, lpBalance, currentPairAddress) => {\n    // console.log(\"HIIIIIIIIIIIIIIIIIIIIII\", d1, d2);\n    const _reserve0 = Number(reserve[\"_reserve0\"]) / 10 ** d2;\n\n    const _reserve1 = Number(reserve[\"_reserve1\"]) / 10 ** d1;\n\n    let _totalSupply = await ContractServices.getTotalSupply(currentPairAddress);\n\n    let ratio = lpBalance / _totalSupply;\n\n    const t0 = (ratio * _reserve0).toFixed(5); // console.log(\"tototo\", t0);\n\n\n    setTokenOneDeposit(t0);\n\n    const t1 = (ratio * _reserve1).toFixed(5);\n\n    setTokenTwoDeposit(t1); // console.log(\"ratio\", ratio, \"reserve0\", _reserve0, \"reserve1\", _reserve1);\n  };\n\n  const calculateLiquidityPercentage = async (reserve, amount0, amount1) => {\n    const _reserve0 = reserve[\"_reserve0\"] / 10 ** tokenOne.decimals;\n\n    const _reserve1 = reserve[\"_reserve1\"] / 10 ** tokenTwo.decimals;\n\n    let liquidity = 0;\n\n    let _totalSupply = await ContractServices.getTotalSupply(currentPairAddress);\n\n    let ratio = lpTokenBalance / _totalSupply;\n\n    const t0 = (ratio * _reserve0).toFixed(5);\n\n    setTokenOneDeposit(t0);\n\n    const t1 = (ratio * _reserve1).toFixed(5);\n\n    setTokenTwoDeposit(t1);\n\n    if (_totalSupply === 0) {\n      liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n      return 100;\n    } else {\n      liquidity = Math.min(amount0 * _totalSupply / _reserve0, amount1 * _totalSupply / _reserve1);\n    }\n\n    liquidity = (liquidity / (_totalSupply + liquidity) * 100).toFixed(2);\n  };\n\n  const checkAddLiquidity = async () => {\n    if (!isUserConnected) {\n      handleShow1();\n    } else {\n      var _address;\n\n      let address = isUserConnected; //address has assigned a value now.\n\n      if (walletType === \"Metamask\") {\n        // address = await ContractServices.isMetamaskInstalled(\"\");\n        address = await isUserConnected;\n        console.log(address, \"address\");\n      }\n\n      if (walletType === \"BinanceChain\") {\n        address = await ContractServices.isBinanceChainInstalled();\n      }\n\n      console.log(isUserConnected, address, \"####\");\n\n      if ((isUserConnected === null || isUserConnected === void 0 ? void 0 : isUserConnected.toLowerCase()) !== ((_address = address) === null || _address === void 0 ? void 0 : _address.toLowerCase())) {\n        return toast.error(\"Mismatch wallet address!\");\n      }\n\n      if (!tokenOne.address) {\n        return toast.error(\"Select first token!\");\n      }\n\n      if (!tokenTwo.address) {\n        return toast.error(\"Select second token!\");\n      }\n\n      if (tokenOneValue <= 0) {\n        return toast.error(\"Enter first token value!\");\n      }\n\n      if (tokenTwoValue <= 0) {\n        return toast.error(\"Enter second token value!\");\n      }\n\n      if (!tokenOneApproved) {\n        return toast.error(\"First Token approval is pending!\");\n      }\n\n      if (!tokenTwoApproved) {\n        return toast.error(\"Second Token approval is pending!\");\n      } // console.log(\n      //   tokenOneBalance < tokenOneValue,\n      //   tokenOneBalance,\n      //   tokenOneValue\n      // );\n\n\n      if (tokenOneBalance < tokenOneValue) {\n        return toast.error(`Wallet have insufficient ${tokenOne.symbol} balance!`);\n      }\n\n      if (tokenTwoBalance < tokenTwoValue) {\n        return toast.error(`Wallet have insufficient ${tokenTwo.symbol} balance!`);\n      }\n\n      setShowSupplyModal(true);\n    }\n  };\n\n  const addLiquidity = async () => {\n    debugger;\n    console.log(\"isUserConnected\", isUserConnected);\n    const acc = isUserConnected;\n\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n\n    if (liquidityConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n\n    setLiquidityConfirmation(true);\n    let value = 0,\n        checkBNB = false,\n        token;\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (tokenOne.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenOneValue;\n      token = tokenTwo.address;\n    }\n\n    if (tokenTwo.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenTwoValue;\n      token = tokenOne.address;\n    }\n\n    if (value > 0) {\n      value = value * 10 ** 18;\n    }\n\n    if (checkBNB) {\n      let amountETHMin = BigNumber(Math.floor(Number(value) - Number(value) * slippagePercentage / 100)).toFixed();\n      let amountTokenMin = \"\";\n      let amountTokenDesired = 0;\n\n      if (tokenOne.address === \"BNB\") {\n        amountTokenDesired = tokenTwoValue;\n        amountTokenMin = BigNumber(Math.floor((amountTokenDesired - amountTokenDesired * slippagePercentage / 100) * 10 ** tokenTwo.decimals)).toFixed();\n        amountTokenDesired = BigNumber(amountTokenDesired * 10 ** tokenTwo.decimals).toFixed();\n      }\n\n      if (tokenTwo.address === \"BNB\") {\n        amountTokenDesired = tokenOneValue;\n        amountTokenMin = BigNumber(Math.floor((amountTokenDesired - amountTokenDesired * slippagePercentage / 100) * 10 ** tokenOne.decimals)).toFixed();\n        amountTokenDesired = BigNumber(amountTokenDesired * 10 ** tokenOne.decimals).toFixed();\n      }\n\n      value = value.toString();\n      const data = {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n\n      try {\n        dispatch(startLoading()); // console.log(data, \"ye hai data\");\n\n        const result = await ExchangeService.addLiquidityETH(data); // alert(\"ddd\");\n        // console.log(result, \"add liquidity transaction\");\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      let amountADesired = tokenOneValue;\n      let amountBDesired = tokenTwoValue;\n      let amountAMin = Math.floor(amountADesired - amountADesired * slippagePercentage / 100);\n      let amountBMin = Math.floor(amountBDesired - amountBDesired * slippagePercentage / 100);\n      amountADesired = BigNumber(amountADesired * 10 ** tokenOne.decimals).toFixed();\n      amountBDesired = BigNumber(amountBDesired * 10 ** tokenTwo.decimals).toFixed();\n      amountAMin = BigNumber(amountAMin * 10 ** tokenOne.decimals).toFixed();\n      amountBMin = BigNumber(amountBMin * 10 ** tokenTwo.decimals).toFixed();\n      let dl = Math.floor(new Date().getTime() / 1000);\n      dl = dl + deadline * 60;\n      const data = {\n        tokenA: tokenOne.address,\n        tokenB: tokenTwo.address,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to: isUserConnected,\n        deadline: dl,\n        value\n      };\n\n      try {\n        dispatch(startLoading());\n        const result = await ExchangeService.addLiquidity(data); // console.log(result, \"add liquidity transaction\");\n\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        console.log(err);\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n\n  const calculateFraction = tokenType => {\n    let r = 0;\n\n    if (tokenOneValue && tokenTwoValue) {\n      // console.log(\n      //   \"tokenOneValue\",\n      //   tokenOneValue,\n      //   \"tokenTwoValue\",\n      //   tokenTwoValue\n      // );\n      if (tokenType === \"TK1\") {\n        if (tokenOneValue === 0) return 0;\n        r = tokenTwoValue / tokenOneValue;\n      }\n\n      if (tokenType === \"TK2\") {\n        if (tokenTwoValue === 0) return 0;\n        r = tokenOneValue / tokenTwoValue;\n      }\n\n      return Number(r.toFixed(6));\n    } else {\n      return 0;\n    }\n  };\n\n  const handleMaxBalance = async amountIn => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n\n    if (tokenOne.address === \"BNB\") {\n      // .002 BNB is reserved for saving gas fee\n      const bnbBalance = (await ContractServices.getBNBBalance(isUserConnected)) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed\n      const tokenBalance = await ContractServices.getTokenBalance(tokenOne.address, isUserConnected);\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"swapScreen comnSection\",\n      children: /*#__PURE__*/_jsxDEV(CardCustom, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settingSec\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"in_title\",\n            children: [/*#__PURE__*/_jsxDEV(ButtonBack, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 898,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"ps-5\",\n              children: \"Add Liquidity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settingIcon\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: TimerIcon,\n              onClick: () => setShowRecent(true),\n              className: \"timerImg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: SettingIcon,\n              onClick: () => settinghandleShow(true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 907,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 11\n        }, this), firstProvider && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"firstPro_Note\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You are the first liquidity provider.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"The ratio of tokens you add will set the price of this pool.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Once you are happy with the rate click supply to review.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"liquidtySec\",\n          children: [/*#__PURE__*/_jsxDEV(SelectCoin, {\n            label: `Balance: ${tokenOneBalance}`,\n            coinImage: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon,\n            value: tokenOneCurrency,\n            onClick: () => onHandleOpenModal(\"TK1\"),\n            inputLabel: \"Input\",\n            className: \"mb-0\",\n            placeholder: \"0.0\",\n            onChange: e => handleTokenValue(e.target.value, \"TK1\"),\n            defaultValue: tokenOneValue,\n            max: max,\n            onMax: () => handleMaxBalance(\"TK1\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 921,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"convert_plus\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: Plusicon,\n              style: {\n                width: 22\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 935,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SelectCoin, {\n            label: `Balance: ${tokenTwoBalance}`,\n            coinImage: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon,\n            value: tokenTwoCurrency,\n            onClick: () => onHandleOpenModal(\"TK2\"),\n            inputLabel: \"Input\",\n            className: \"mb-0\",\n            placeholder: \"0.0\",\n            onChange: e => handleTokenValue(e.target.value, \"TK2\"),\n            defaultValue: tokenTwoValue,\n            max: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 15\n          }, this), showPoolShare && /*#__PURE__*/_jsxDEV(Col, {\n            className: \"poolSec\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"PRICES AND POOL SHARE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 954,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"poolDiv\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateFraction(\"TK1\"), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 958,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\" \", tokenTwoCurrency, \" per \", tokenOneCurrency]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 959,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 956,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateFraction(\"TK2\"), \" per\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 966,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\" \", tokenOneCurrency, \" per \", tokenTwoCurrency]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 967,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 964,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [sharePoolValue, \"% \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 973,\n                  columnNumber: 39\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Share of Pool\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 974,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 972,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 955,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 15\n          }, this), currentPairAddress && /*#__PURE__*/_jsxDEV(Col, {\n            className: \"lp-class\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"LP Tokens in your Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 981,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"LptokensList\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"sc-fWPcDo bUpjCL\",\n                    alt: \"icon 1\",\n                    src: tokenOne === null || tokenOne === void 0 ? void 0 : tokenOne.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 985,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"sc-fWPcDo bUpjCL\",\n                    alt: \"icon 2\",\n                    src: tokenTwo === null || tokenTwo === void 0 ? void 0 : tokenTwo.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 990,\n                    columnNumber: 23\n                  }, this), \"\\xA0\\xA0\", `${tokenOneCurrency}/${tokenTwoCurrency}`, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 984,\n                  columnNumber: 21\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: (_Number = Number(lpTokenBalance)) === null || _Number === void 0 ? void 0 : _Number.toFixed(5)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 998,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 983,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [tokenOne.symbol, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: tokenOneDeposit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1001,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1000,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\" \", tokenTwo.symbol, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: tokenTwoDeposit\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1005,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1003,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 982,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"swapBtn_col\",\n          children: [handleApprovalButton(\"TK1\"), handleApprovalButton(\"TK2\"), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            className: \"swapBtn dismissBtn\",\n            title: isUserConnected ? \"Supply\" : \"Unlock Wallet\" // onClick={() => handleShow1(true)}\n            ,\n            onClick: () => checkAddLiquidity()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1015,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalCurrency, {\n      show: show,\n      handleClose: handleClose,\n      tokenList: filteredTokenList,\n      searchToken: handleSearchToken,\n      searchByName: setSearch,\n      selectCurrency: onHandleSelectCurrency,\n      tokenType: tokenType,\n      currencyName: selectedCurrency,\n      handleOrder: setFilteredTokenList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1024,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConnectWallet, {\n      show: show1,\n      handleShow: handleShow1,\n      handleClose: handleClose1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingModal, {\n      show: settingShow,\n      handleShow: settinghandleShow,\n      handleClose: settingClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SupplyModal, {\n      show: showSupplyModal,\n      handleClose: supplyModalClose,\n      addLiquidity: addLiquidity,\n      liquidityConfirmation: liquidityConfirmation,\n      tokenOneCurrency: tokenOneCurrency,\n      tokenOneValue: tokenOneValue,\n      tokenTwoCurrency: tokenTwoCurrency,\n      tokenTwoValue: tokenTwoValue,\n      calculateFraction: calculateFraction,\n      sharePoolValue: sharePoolValue,\n      tokenOne: tokenOne,\n      tokenTwo: tokenTwo,\n      slippagePercentage: slippagePercentage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecentTransactions, {\n      show: showRecent,\n      handleClose: recentTransactionsClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1060,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionalModal, {\n      show: showTransactionModal,\n      handleClose: closeTransactionModal,\n      txHash: txHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddLiquidity, \"fZ2/ROUOZVoW7O6D0TdTS+0MpyM=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = AddLiquidity;\nexport default AddLiquidity;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquidity\");","map":{"version":3,"names":["React","useEffect","useState","Container","Col","ConnectWallet","CardCustom","ButtonPrimary","SelectCoin","Plusicon","ModalCurrency","ButtonBack","SettingModal","useSelector","useDispatch","MAIN_CONTRACT_LIST","TOKEN_LIST","WETH","ContractServices","toast","TransactionalModal","ExchangeService","addTransaction","checkUserLpTokens","searchTokenByNameOrAddress","startLoading","stopLoading","BigNumber","SupplyModal","RecentTransactions","ConsoleView","ERRORS","EVENTS","LS_KEYS","AddLiquidity","props","tokenList","state","persist","show","setShow","handleClose","show1","setShow1","handleClose1","handleShow1","settingShow","setsettingShow","settingClose","showRecent","setShowRecent","supplyModalClose","setShowSupplyModal","recentTransactionsClose","settinghandleShow","search","setSearch","max","setMax","dispatch","MINIMUM_LIQUIDITY","isUserConnected","walletType","deadline","slippagePercentage","modalCurrency","setModalCurrency","tokenOne","setTokenOne","tokenTwo","setTokenTwo","tokenOneValue","setTokenOneValue","tokenTwoValue","setTokenTwoValue","sharePoolValue","setSharePoolValue","tokenOneCurrency","setCurrencyNameForTokenOne","symbol","tokenTwoCurrency","setCurrencyNameForTokenTwo","tokenOneBalance","setTokenOneBalance","tokenTwoBalance","setTokenTwoBalance","tokenOneDeposit","setTokenOneDeposit","tokenTwoDeposit","setTokenTwoDeposit","tokenOneApproval","setTokenOneApproval","tokenTwoApproval","setTokenTwoApproval","tokenOneApproved","setTokenOneApproved","tokenTwoApproved","setTokenTwoApproved","lpTokenBalance","setLpTokenBalance","tokenType","setTokenType","showSupplyModal","filteredTokenList","setFilteredTokenList","approvalConfirmation","setApprovalConfirmation","liquidityConfirmation","setLiquidityConfirmation","selectedCurrency","setSelectedCurrency","currentPairAddress","setCurrentPairAddress","firstProvider","setFirstProvider","showPoolShare","setShowPoolShare","showTransactionModal","setShowTransactionModal","txHash","setTxHash","isWalletSelected","setIsWalletSelected","_","selWalletType","localStorage","getItem","WALLET_TYPE","filter","token","name","toLowerCase","includes","init","document","addEventListener","LOGIN_SUCCESS","e","preventDefault","oneBalance","getBNBBalance","lptoken","console","log","pair","balance","poolShare","token0Obj","token0Deposit","tokenBal","address","getTokenBalance","token1Obj","token1Deposit","closeTransactionModal","backBtn","window","location","reload","onHandleOpenModal","error","onHandleSelectCurrency","selecting","a1","a2","twoBalance","r","getAllowance","getPair","d1","getDecimals","d2","reserves","getReserves","calculateLiquidityPercentageWithSelectCurrency","amount","allowance","allowanceToken","router","Number","decimals","handleTokenValue","amt1","amt2","tokenAddress","tk0","getTokenZero","tk1","getTokenOne","token0Decimal","token1Decimal","a","toFixed","handleApprovalButton","ratio","calculateLiquidityPercentage","handleTokenApproval","acc","info","value","approveToken","code","data","message","tx","transactionHash","err","handleSearchToken","res","reserve","lpBalance","_reserve0","_reserve1","_totalSupply","getTotalSupply","t0","t1","amount0","amount1","liquidity","Math","sqrt","min","checkAddLiquidity","isBinanceChainInstalled","addLiquidity","checkBNB","dl","floor","Date","getTime","amountETHMin","amountTokenMin","amountTokenDesired","toString","to","result","addLiquidityETH","web3ErrorHandle","amountADesired","amountBDesired","amountAMin","amountBMin","tokenA","tokenB","calculateFraction","handleMaxBalance","amountIn","bnbBalance","tokenBalance","TimerIcon","SettingIcon","icon","target","width"],"sources":["/data/test/saitaClientGit/src/pages/Trade/AddLiquidity.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Col } from \"react-bootstrap\";\nimport ConnectWallet from \"../../components/ConnectWallet/ConnectWallet\";\nimport CardCustom from \"../../components/cardCustom/CardCustom\";\nimport ButtonPrimary from \"../../components/Button/Button\";\nimport SelectCoin from \"../../components/selectCoin/SelectCoin\";\nimport Plusicon from \"../../assets/images/plus_yellow.png\";\nimport ModalCurrency from \"../../components/Modal/ModalCurrency/ModalCurrency\";\nimport ButtonBack from \"../../components/buttonBack/ButtonBack\";\nimport \"./Trade.scss\";\nimport SettingModal from \"../../components/Modal/SettingModal/SettingModal\";\nimport SettingIcon from \"../../assets/images/Settings-Icon.svg\";\nimport TimerIcon from \"../../assets/images/ionic-ios-timer.svg\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { MAIN_CONTRACT_LIST, TOKEN_LIST, WETH } from \"../../assets/tokens\";\nimport { ContractServices } from \"../../services/ContractServices\";\nimport { toast } from \"../../components/Toast/Toast\";\nimport TransactionalModal from \"../../components/TransactionalModal/TransactionalModal\";\nimport { ExchangeService } from \"../../services/ExchangeService\";\nimport {\n  addTransaction,\n  checkUserLpTokens,\n  searchTokenByNameOrAddress,\n  startLoading,\n  stopLoading,\n} from \"../../redux/actions\";\nimport { BigNumber } from \"bignumber.js\";\nimport SupplyModal from \"../../components/SupplyModal/SupplyModal\";\nimport RecentTransactions from \"../../components/RecentTransactions/RecentTransactions\";\nimport { ConsoleView } from \"react-device-detect\";\nimport { ERRORS, EVENTS, LS_KEYS } from \"../../constant\";\n\nconst AddLiquidity = (props) => {\n  const tokenList = useSelector((state) => state.persist.tokenList);\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n  const [settingShow, setsettingShow] = useState(false);\n  const settingClose = () => setsettingShow(false);\n  const [showRecent, setShowRecent] = useState(false);\n  const supplyModalClose = () => setShowSupplyModal(false);\n  const recentTransactionsClose = () => setShowRecent(false);\n  const settinghandleShow = () => setsettingShow(true);\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const MINIMUM_LIQUIDITY = 10 ** 3;\n\n  const isUserConnected = useSelector((state) => state.persist.isUserConnected);\n  const walletType = useSelector((state) => state.persist.walletType);\n  const deadline = useSelector((state) => state.persist.deadline);\n  const slippagePercentage = useSelector(\n    (state) => state.persist.slippagePercentage\n  );\n\n  const [modalCurrency, setModalCurrency] = useState(false);\n  const [tokenOne, setTokenOne] = useState(TOKEN_LIST[0]);\n  const [tokenTwo, setTokenTwo] = useState({});\n  const [tokenOneValue, setTokenOneValue] = useState();\n  const [tokenTwoValue, setTokenTwoValue] = useState();\n  const [sharePoolValue, setSharePoolValue] = useState(0);\n  const [tokenOneCurrency, setCurrencyNameForTokenOne] = useState(\n    TOKEN_LIST[0].symbol\n  );\n  const [tokenTwoCurrency, setCurrencyNameForTokenTwo] =\n    useState(\"Select a token\");\n  const [tokenOneBalance, setTokenOneBalance] = useState(0);\n  const [tokenTwoBalance, setTokenTwoBalance] = useState(0);\n  const [tokenOneDeposit, setTokenOneDeposit] = useState(0);\n  const [tokenTwoDeposit, setTokenTwoDeposit] = useState(0);\n  const [tokenOneApproval, setTokenOneApproval] = useState(false);\n  const [tokenTwoApproval, setTokenTwoApproval] = useState(false);\n\n  const [tokenOneApproved, setTokenOneApproved] = useState(false);\n  const [tokenTwoApproved, setTokenTwoApproved] = useState(false);\n\n  const [lpTokenBalance, setLpTokenBalance] = useState(0);\n  const [tokenType, setTokenType] = useState(\"TK1\");\n  const [showSupplyModal, setShowSupplyModal] = useState(false);\n\n  const [filteredTokenList, setFilteredTokenList] = useState([]);\n  const [approvalConfirmation, setApprovalConfirmation] = useState(false);\n  const [liquidityConfirmation, setLiquidityConfirmation] = useState(false);\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\"\");\n\n  const [currentPairAddress, setCurrentPairAddress] = useState(\"\");\n  const [firstProvider, setFirstProvider] = useState(false);\n  const [showPoolShare, setShowPoolShare] = useState(false);\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [txHash, setTxHash] = useState(\"\");\n\n  const [isWalletSelected, setIsWalletSelected] = useState(!1);\n\n  useEffect((_) => {\n    // onload check if wallet is selected\n    const selWalletType = localStorage.getItem(LS_KEYS.WALLET_TYPE);\n    if (!selWalletType) {\n      setIsWalletSelected(!1);\n    } else {\n      setIsWalletSelected(!0);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isWalletSelected) {\n      setFilteredTokenList(\n        tokenList.filter((token) =>\n          token.name.toLowerCase().includes(search.toLowerCase())\n        )\n      );\n      init();\n    }\n  }, [search, tokenList]);\n  document.addEventListener(EVENTS.LOGIN_SUCCESS, async (e) => {\n    e.preventDefault();\n    await init();\n  });\n  const init = async () => {\n    if (isUserConnected) {\n      const oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n      setTokenOneBalance(oneBalance);\n\n      const { lptoken } = props;\n      console.log(lptoken, \"lptoken\");\n      if (lptoken) {\n        // console.log(lptoken, \"Lpztoken\");\n        setCurrentPairAddress(lptoken.pair);\n        setLpTokenBalance(lptoken.balance);\n        setSharePoolValue(lptoken.poolShare);\n        if (lptoken.token0Obj) {\n          // console.log(\"hahah\", lptoken);\n          setTokenOne(lptoken.token0Obj);\n          setCurrencyNameForTokenOne(lptoken.token0Obj.symbol);\n          setTokenOneDeposit(lptoken.token0Deposit);\n          let tokenBal = 0;\n          if (lptoken.token0Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token0Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenOneBalance(tokenBal);\n        }\n        if (lptoken.token1Obj) {\n          setTokenTwo(lptoken.token1Obj);\n          setCurrencyNameForTokenTwo(lptoken.token1Obj.symbol);\n          setTokenTwoDeposit(lptoken.token1Deposit);\n          let tokenBal = 0;\n          if (lptoken.token1Obj.address === \"BNB\") {\n            tokenBal = oneBalance;\n          } else {\n            tokenBal = await ContractServices.getTokenBalance(\n              lptoken.token1Obj.address,\n              isUserConnected\n            );\n          }\n          setTokenTwoBalance(tokenBal);\n        }\n      }\n    }\n  };\n\n  const closeTransactionModal = () => {\n    setShowTransactionModal(false);\n    props.backBtn();\n    window.location.reload();\n  };\n\n  const onHandleOpenModal = (tokenType) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    setShow(true);\n    setFilteredTokenList(tokenList);\n    setSelectedCurrency(\n      tokenType === \"TK1\" ? tokenTwoCurrency : tokenOneCurrency\n    );\n    setModalCurrency({\n      modalCurrency: true,\n    });\n    setTokenType(tokenType);\n  };\n  const onHandleSelectCurrency = async (token, selecting) => {\n    const { address, symbol } = token;\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    let a1,\n      a2,\n      oneBalance = 0,\n      twoBalance = 0;\n    if (selecting === \"TK1\") {\n      handleClose();\n      a1 = address;\n      if (address === \"BNB\") {\n        oneBalance = await ContractServices.getBNBBalance(isUserConnected);\n        setTokenOneApproved(true);\n      } else {\n        setTokenOneApproved(false);\n        oneBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenOne(token);\n      setCurrencyNameForTokenOne(symbol);\n      setTokenOneBalance(oneBalance);\n      if (tokenTwo.address) {\n        a2 = tokenTwo.address;\n      }\n      if (tokenOneValue > 0) {\n        const r = await getAllowance(tokenOneValue, \"TK1\");\n      }\n    }\n    if (selecting === \"TK2\") {\n      handleClose();\n      a2 = address;\n      if (address === \"BNB\") {\n        setTokenTwoApproved(true);\n        twoBalance = await ContractServices.getBNBBalance(isUserConnected);\n      } else {\n        setTokenTwoApproved(false);\n        twoBalance = await ContractServices.getTokenBalance(\n          address,\n          isUserConnected\n        );\n      }\n      setTokenTwo(token);\n      setCurrencyNameForTokenTwo(symbol);\n      setTokenTwoBalance(twoBalance);\n      if (tokenOne.address) {\n        a1 = tokenOne.address;\n      }\n      if (tokenTwoValue > 0) {\n        const r = await getAllowance(tokenTwoValue, \"TK2\");\n      }\n    }\n\n    setModalCurrency(!modalCurrency);\n    setSearch(\"\");\n    setFilteredTokenList(tokenList);\n\n    if (a1 && a2) {\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        const d1 = await ContractServices.getDecimals(a1);\n        const d2 = await ContractServices.getDecimals(a2);\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // console.log(\"d1\", d1, \"d2\", d2);\n        calculateLiquidityPercentageWithSelectCurrency(\n          reserves,\n          d1,\n          d2,\n          lpTokenBalance,\n          currentPairAddress\n        );\n\n        setLpTokenBalance(lpTokenBalance);\n        setFirstProvider(false);\n        setShowPoolShare(true);\n        // xxxxxxxxx\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log('qqqqq', currentPairAddress);\n        // const reserves = await ExchangeService.getReserves(currentPairAddress);\n        // console.log('aaaaa', reserves);\n        // await calculateLiquidityPercentage(reserves, 0.1, 0.02);\n        // console.log('wwww', result);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n\n  const getAllowance = async (amount, tokenType) => {\n    if (tokenType === \"TK1\") {\n      if (isUserConnected && tokenOne.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenOne.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenOne.decimals);\n        // console.log(tokenOne.decimals, \"token 1 decimals---------------\");\n        if (amount > allowance) {\n          setTokenOneApproval(true);\n        } else {\n          setTokenOneApproved(true);\n        }\n      } else {\n        setTokenOneApproved(true);\n      }\n    }\n    if (tokenType === \"TK2\") {\n      if (isUserConnected && tokenTwo.address !== \"BNB\") {\n        let allowance = await ContractServices.allowanceToken(\n          tokenTwo.address,\n          MAIN_CONTRACT_LIST.router.address,\n          isUserConnected\n        );\n        allowance = Number(allowance) / 10 ** Number(tokenTwo.decimals);\n        // console.log(allowance, 'token 2')\n        if (amount > allowance) {\n          setTokenTwoApproval(true);\n        } else {\n          setTokenTwoApproved(true);\n        }\n      } else {\n        setTokenTwoApproved(true);\n      }\n    }\n    return true;\n  };\n\n  const handleTokenValue = async (amount, tokenType) => {\n    let amt1, amt2;\n    if (\n      tokenOne.address.toLowerCase() !== TOKEN_LIST[0].address.toLowerCase() &&\n      tokenOne.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase() &&\n      tokenTwo.address.toLowerCase() !== TOKEN_LIST[0].address.toLowerCase() &&\n      tokenTwo.address.toLowerCase() !== TOKEN_LIST[1].address.toLowerCase()\n    ) {\n      toast.error(\"One token should be either Eth or Saitama\");\n      return;\n    }\n    if (tokenType === \"TK1\") {\n      setTokenOneValue(amount);\n      amt1 = amount;\n      const r = await getAllowance(amount, tokenType);\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenOne.address;\n        if (tokenOne.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n        // console.log(\"EEEEEE\", currentPairAddress);\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(\n            currentPairAddress\n          );\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n          if (reserves[0] !== \"0\" && reserves[1] !== \"0\") {\n            if (tk0 && reserves) {\n              let a;\n              if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n                a = (\n                  amount *\n                  (reserves[1] /\n                    10 ** token1Decimal /\n                    (reserves[0] / 10 ** token0Decimal))\n                ).toFixed(5);\n              } else {\n                a = (\n                  amount *\n                  (reserves[0] /\n                    10 ** token0Decimal /\n                    (reserves[1] / 10 ** token1Decimal))\n                ).toFixed(5);\n              }\n              // console.log(\"a\", Number(a));\n              setTokenTwoValue(a);\n              amt2 = a;\n              if (!tokenTwoApproval) {\n                const r = await getAllowance(a, \"TK2\");\n                handleApprovalButton(\"TK2\");\n              }\n            }\n          }\n        }\n      }\n    }\n    if (tokenType === \"TK2\") {\n      setTokenTwoValue(amount);\n      amt2 = amount;\n      const r = await getAllowance(amount, tokenType);\n      if (r && tokenOne.address && tokenTwo.address && amount > 0) {\n        let tokenAddress = tokenTwo.address;\n        if (tokenTwo.address === \"BNB\") {\n          tokenAddress = WETH;\n        }\n        if (currentPairAddress) {\n          const tk0 = await ExchangeService.getTokenZero(currentPairAddress);\n          const tk1 = await ExchangeService.getTokenOne(currentPairAddress);\n          const reserves = await ExchangeService.getReserves(\n            currentPairAddress\n          );\n          const token0Decimal = await ContractServices.getDecimals(tk0);\n          const token1Decimal = await ContractServices.getDecimals(tk1);\n\n          if (reserves[0] !== \"0\" && reserves[1] !== \"0\") {\n            if (tk0 && reserves) {\n              let a;\n              if (tokenAddress.toLowerCase() === tk0.toLowerCase()) {\n                a = (\n                  amount *\n                  (reserves[1] /\n                    10 ** token1Decimal /\n                    (reserves[0] / 10 ** token0Decimal))\n                ).toFixed(5);\n              } else {\n                a = (\n                  amount *\n                  (reserves[0] /\n                    10 ** token0Decimal /\n                    (reserves[1] / 10 ** token1Decimal))\n                ).toFixed(5);\n              }\n              setTokenOneValue(a);\n              amt1 = a;\n              if (!tokenOneApproval) {\n                const r = await getAllowance(a, \"TK1\");\n                handleApprovalButton(\"TK1\");\n              }\n            }\n          }\n        }\n      }\n    }\n    if (tokenOne.address && tokenTwo.address) {\n      let a1 = tokenOne.address,\n        a2 = tokenTwo.address;\n\n      let currentPairAddress;\n      if (a1 === \"BNB\") {\n        a1 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else if (a2 === \"BNB\") {\n        a2 = WETH; //WETH\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      } else {\n        currentPairAddress = await ExchangeService.getPair(a1, a2);\n      }\n      if (currentPairAddress !== \"0x0000000000000000000000000000000000000000\") {\n        setCurrentPairAddress(currentPairAddress);\n        const lpTokenBalance = await ContractServices.getTokenBalance(\n          currentPairAddress,\n          isUserConnected\n        );\n        setLpTokenBalance(lpTokenBalance);\n\n        const reserves = await ExchangeService.getReserves(currentPairAddress);\n        const ratio = await calculateLiquidityPercentage(reserves, amt1, amt2);\n        // console.log(reserves, ratio, '---------------------------ratio');\n        setSharePoolValue(ratio);\n\n        setFirstProvider(false);\n        setShowPoolShare(true);\n      } else {\n        setCurrentPairAddress(\"\");\n        setFirstProvider(true);\n        setShowPoolShare(true);\n        setLpTokenBalance(0);\n      }\n    }\n  };\n  //call web3 approval function\n  const handleTokenApproval = async (tokenType) => {\n    const acc = isUserConnected;\n    // console.log(\"isUserConnected\", isUserConnected);\n    // if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n    //   return toast.error(\"Wallet address doesn`t match!\");\n    // }\n    if (approvalConfirmation) {\n      return toast.info(\"Token approval is processing\");\n    }\n    // const value = (2*256 - 1).toString();\n    const value =\n      \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    let tokenAddress = \"BNB\";\n    if (tokenType === \"TK1\") {\n      tokenAddress = tokenOne.address;\n    }\n    if (tokenType === \"TK2\") {\n      tokenAddress = tokenTwo.address;\n    }\n    try {\n      dispatch(startLoading());\n\n      const r = await ContractServices.approveToken(\n        isUserConnected,\n        value,\n        MAIN_CONTRACT_LIST.router.address,\n        tokenAddress\n      );\n      if (r.code == 4001) {\n        toast.error(\"User denied transaction signature.\");\n      } else {\n        setApprovalConfirmation(true);\n        let data = {\n          message: `Approve`,\n          tx: r.transactionHash,\n        };\n        if (tokenType === \"TK1\") {\n          setTokenOneApproved(true);\n          setTokenOneApproval(false);\n\n          data.message = `Approve ${tokenOne.symbol}`;\n        }\n        if (tokenType === \"TK2\") {\n          setTokenTwoApproved(true);\n          setTokenTwoApproval(false);\n          data.message = `Approve ${tokenTwo.symbol}`;\n        }\n        dispatch(addTransaction(data));\n        setApprovalConfirmation(false);\n      }\n      dispatch(stopLoading());\n    } catch (err) {\n      // console.log(\"***********err*\", err);\n\n      setApprovalConfirmation(false);\n      dispatch(stopLoading());\n      console.log(err);\n      toast.error(\"Transaction Reverted!\");\n    }\n  };\n\n  const handleSearchToken = async (data) => {\n    try {\n      const res = await dispatch(searchTokenByNameOrAddress(data));\n      setFilteredTokenList(res);\n    } catch (error) {\n      toast.error(\"Something went wrong!\");\n    }\n  };\n  const handleApprovalButton = (tokenType) => {\n    if (tokenOneApproval && tokenType === \"TK1\") {\n      return (\n        <div className=\"col button_unlockWallet\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenOne.symbol}`}\n            disabled={approvalConfirmation}\n            onClick={() => handleTokenApproval(tokenType)}\n          />\n        </div>\n      );\n    }\n    if (tokenTwoApproval && tokenType === \"TK2\") {\n      return (\n        <div className=\"col button_unlockWallet\">\n          <ButtonPrimary\n            className=\"swapBtn\"\n            title={`Approve ${tokenTwo.symbol}`}\n            disabled={approvalConfirmation}\n            onClick={() => handleTokenApproval(tokenType)}\n          />\n        </div>\n      );\n    }\n    //dead code\n    return null;\n  };\n  const calculateLiquidityPercentageWithSelectCurrency = async (\n    reserve,\n    d1,\n    d2,\n    lpBalance,\n    currentPairAddress\n  ) => {\n    // console.log(\"HIIIIIIIIIIIIIIIIIIIIII\", d1, d2);\n    const _reserve0 = Number(reserve[\"_reserve0\"]) / 10 ** d2;\n    const _reserve1 = Number(reserve[\"_reserve1\"]) / 10 ** d1;\n\n    let _totalSupply = await ContractServices.getTotalSupply(\n      currentPairAddress\n    );\n\n    let ratio = lpBalance / _totalSupply;\n    const t0 = (ratio * _reserve0).toFixed(5);\n    // console.log(\"tototo\", t0);\n    setTokenOneDeposit(t0);\n    const t1 = (ratio * _reserve1).toFixed(5);\n    setTokenTwoDeposit(t1);\n    // console.log(\"ratio\", ratio, \"reserve0\", _reserve0, \"reserve1\", _reserve1);\n  };\n  const calculateLiquidityPercentage = async (reserve, amount0, amount1) => {\n    const _reserve0 = reserve[\"_reserve0\"] / 10 ** tokenOne.decimals;\n    const _reserve1 = reserve[\"_reserve1\"] / 10 ** tokenTwo.decimals;\n\n    let liquidity = 0;\n    let _totalSupply = await ContractServices.getTotalSupply(\n      currentPairAddress\n    );\n\n    let ratio = lpTokenBalance / _totalSupply;\n    const t0 = (ratio * _reserve0).toFixed(5);\n    setTokenOneDeposit(t0);\n    const t1 = (ratio * _reserve1).toFixed(5);\n    setTokenTwoDeposit(t1);\n\n    if (_totalSupply === 0) {\n      liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n      return 100;\n    } else {\n      liquidity = Math.min(\n        (amount0 * _totalSupply) / _reserve0,\n        (amount1 * _totalSupply) / _reserve1\n      );\n    }\n\n    liquidity = ((liquidity / (_totalSupply + liquidity)) * 100).toFixed(2);\n  };\n\n  const checkAddLiquidity = async () => {\n    if (!isUserConnected) {\n      handleShow1();\n    } else {\n      let address = isUserConnected; //address has assigned a value now.\n      if (walletType === \"Metamask\") {\n        // address = await ContractServices.isMetamaskInstalled(\"\");\n        address = await isUserConnected;\n        console.log(address, \"address\");\n      }\n      if (walletType === \"BinanceChain\") {\n        address = await ContractServices.isBinanceChainInstalled();\n      }\n      console.log(isUserConnected, address, \"####\");\n      if (isUserConnected?.toLowerCase() !== address?.toLowerCase()) {\n        return toast.error(\"Mismatch wallet address!\");\n      }\n      if (!tokenOne.address) {\n        return toast.error(\"Select first token!\");\n      }\n      if (!tokenTwo.address) {\n        return toast.error(\"Select second token!\");\n      }\n      if (tokenOneValue <= 0) {\n        return toast.error(\"Enter first token value!\");\n      }\n      if (tokenTwoValue <= 0) {\n        return toast.error(\"Enter second token value!\");\n      }\n      if (!tokenOneApproved) {\n        return toast.error(\"First Token approval is pending!\");\n      }\n      if (!tokenTwoApproved) {\n        return toast.error(\"Second Token approval is pending!\");\n      }\n      // console.log(\n      //   tokenOneBalance < tokenOneValue,\n      //   tokenOneBalance,\n      //   tokenOneValue\n      // );\n      if (tokenOneBalance < tokenOneValue) {\n        return toast.error(\n          `Wallet have insufficient ${tokenOne.symbol} balance!`\n        );\n      }\n      if (tokenTwoBalance < tokenTwoValue) {\n        return toast.error(\n          `Wallet have insufficient ${tokenTwo.symbol} balance!`\n        );\n      }\n      setShowSupplyModal(true);\n    }\n  };\n\n  const addLiquidity = async () => {\n    debugger;\n    console.log(\"isUserConnected\", isUserConnected);\n    const acc = isUserConnected;\n    if (acc && acc.toLowerCase() !== isUserConnected.toLowerCase()) {\n      return toast.error(\"Wallet address doesn`t match!\");\n    }\n    if (liquidityConfirmation) {\n      return toast.info(\"Transaction is processing!\");\n    }\n    setLiquidityConfirmation(true);\n    let value = 0,\n      checkBNB = false,\n      token;\n\n    let dl = Math.floor(new Date().getTime() / 1000);\n    dl = dl + deadline * 60;\n\n    if (tokenOne.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenOneValue;\n      token = tokenTwo.address;\n    }\n    if (tokenTwo.address === \"BNB\") {\n      checkBNB = true;\n      value = tokenTwoValue;\n      token = tokenOne.address;\n    }\n    if (value > 0) {\n      value = value * 10 ** 18;\n    }\n    if (checkBNB) {\n      let amountETHMin = BigNumber(\n        Math.floor(Number(value) - (Number(value) * slippagePercentage) / 100)\n      ).toFixed();\n      let amountTokenMin = \"\";\n      let amountTokenDesired = 0;\n      if (tokenOne.address === \"BNB\") {\n        amountTokenDesired = tokenTwoValue;\n        amountTokenMin = BigNumber(\n          Math.floor(\n            (amountTokenDesired -\n              (amountTokenDesired * slippagePercentage) / 100) *\n              10 ** tokenTwo.decimals\n          )\n        ).toFixed();\n        amountTokenDesired = BigNumber(\n          amountTokenDesired * 10 ** tokenTwo.decimals\n        ).toFixed();\n      }\n      if (tokenTwo.address === \"BNB\") {\n        amountTokenDesired = tokenOneValue;\n        amountTokenMin = BigNumber(\n          Math.floor(\n            (amountTokenDesired -\n              (amountTokenDesired * slippagePercentage) / 100) *\n              10 ** tokenOne.decimals\n          )\n        ).toFixed();\n        amountTokenDesired = BigNumber(\n          amountTokenDesired * 10 ** tokenOne.decimals\n        ).toFixed();\n      }\n      value = value.toString();\n\n      const data = {\n        token,\n        amountTokenDesired,\n        amountTokenMin,\n        amountETHMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n      try {\n        dispatch(startLoading());\n        // console.log(data, \"ye hai data\");\n        const result = await ExchangeService.addLiquidityETH(data);\n        // alert(\"ddd\");\n        // console.log(result, \"add liquidity transaction\");\n        dispatch(stopLoading());\n\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    } else {\n      let amountADesired = tokenOneValue;\n      let amountBDesired = tokenTwoValue;\n\n      let amountAMin = Math.floor(\n        amountADesired - (amountADesired * slippagePercentage) / 100\n      );\n      let amountBMin = Math.floor(\n        amountBDesired - (amountBDesired * slippagePercentage) / 100\n      );\n\n      amountADesired = BigNumber(\n        amountADesired * 10 ** tokenOne.decimals\n      ).toFixed();\n      amountBDesired = BigNumber(\n        amountBDesired * 10 ** tokenTwo.decimals\n      ).toFixed();\n      amountAMin = BigNumber(amountAMin * 10 ** tokenOne.decimals).toFixed();\n      amountBMin = BigNumber(amountBMin * 10 ** tokenTwo.decimals).toFixed();\n\n      let dl = Math.floor(new Date().getTime() / 1000);\n      dl = dl + deadline * 60;\n\n      const data = {\n        tokenA: tokenOne.address,\n        tokenB: tokenTwo.address,\n        amountADesired,\n        amountBDesired,\n        amountAMin,\n        amountBMin,\n        to: isUserConnected,\n        deadline: dl,\n        value,\n      };\n      try {\n        dispatch(startLoading());\n        const result = await ExchangeService.addLiquidity(data);\n        // console.log(result, \"add liquidity transaction\");\n\n        dispatch(stopLoading());\n        if (result) {\n          setTxHash(result);\n          setShowTransactionModal(true);\n          setShowSupplyModal(false);\n\n          const data = {\n            message: `Add ${tokenOne.symbol} and ${tokenTwo.symbol}`,\n            tx: result,\n          };\n          dispatch(addTransaction(data));\n          dispatch(checkUserLpTokens(false));\n        }\n        setLiquidityConfirmation(false);\n      } catch (err) {\n        console.log(err);\n        dispatch(stopLoading());\n        const message = await ContractServices.web3ErrorHandle(err);\n        toast.error(message);\n        setLiquidityConfirmation(false);\n      }\n    }\n  };\n  const calculateFraction = (tokenType) => {\n    let r = 0;\n    if (tokenOneValue && tokenTwoValue) {\n      // console.log(\n      //   \"tokenOneValue\",\n      //   tokenOneValue,\n      //   \"tokenTwoValue\",\n      //   tokenTwoValue\n      // );\n      if (tokenType === \"TK1\") {\n        if (tokenOneValue === 0) return 0;\n        r = tokenTwoValue / tokenOneValue;\n      }\n      if (tokenType === \"TK2\") {\n        if (tokenTwoValue === 0) return 0;\n        r = tokenOneValue / tokenTwoValue;\n      }\n      return Number(r.toFixed(6));\n    } else {\n      return 0;\n    }\n  };\n\n  const handleMaxBalance = async (amountIn) => {\n    if (!isUserConnected) {\n      return toast.error(\"Connect wallet first!\");\n    }\n    if (tokenOne.address === \"BNB\") {\n      // .002 BNB is reserved for saving gas fee\n      const bnbBalance =\n        (await ContractServices.getBNBBalance(isUserConnected)) - 0.1;\n      handleTokenValue(bnbBalance, amountIn);\n      setMax(false);\n    } else {\n      // __ amount of particular token must be reserved for saving -needs to be fixed\n      const tokenBalance = await ContractServices.getTokenBalance(\n        tokenOne.address,\n        isUserConnected\n      );\n      handleTokenValue(tokenBalance, amountIn);\n      setMax(false);\n    }\n  };\n  return (\n    <>\n      <Container fluid className=\"swapScreen comnSection\">\n        <CardCustom>\n          <div className=\"settingSec\">\n            <div className=\"in_title\">\n              <ButtonBack />\n              <h4 className=\"ps-5\">Add Liquidity</h4>\n            </div>\n            <div className=\"settingIcon\">\n              <img\n                src={TimerIcon}\n                onClick={() => setShowRecent(true)}\n                className=\"timerImg\"\n              />\n              <img src={SettingIcon} onClick={() => settinghandleShow(true)} />\n            </div>\n          </div>\n          {firstProvider && (\n            <div className=\"firstPro_Note\">\n              <p>You are the first liquidity provider.</p>\n              <p>\n                The ratio of tokens you add will set the price of this pool.\n              </p>\n              <p>Once you are happy with the rate click supply to review.</p>\n            </div>\n          )}\n          <div className=\"liquidtySec\">\n            {\n              <SelectCoin\n                label={`Balance: ${tokenOneBalance}`}\n                coinImage={tokenOne?.icon}\n                value={tokenOneCurrency}\n                onClick={() => onHandleOpenModal(\"TK1\")}\n                inputLabel=\"Input\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) => handleTokenValue(e.target.value, \"TK1\")}\n                defaultValue={tokenOneValue}\n                max={max}\n                onMax={() => handleMaxBalance(\"TK1\")}\n              />\n            }\n            <div className=\"convert_plus\">\n              <img src={Plusicon} style={{ width: 22 }} />\n            </div>\n            {\n              <SelectCoin\n                label={`Balance: ${tokenTwoBalance}`}\n                coinImage={tokenTwo?.icon}\n                value={tokenTwoCurrency}\n                onClick={() => onHandleOpenModal(\"TK2\")}\n                inputLabel=\"Input\"\n                className=\"mb-0\"\n                placeholder=\"0.0\"\n                onChange={(e) => handleTokenValue(e.target.value, \"TK2\")}\n                defaultValue={tokenTwoValue}\n                max={false}\n              />\n            }\n            {showPoolShare && (\n              <Col className=\"poolSec\">\n                <h6>PRICES AND POOL SHARE</h6>\n                <div className=\"poolDiv\">\n                  <span>\n                    {calculateFraction(\"TK1\")}\n                    <br />\n                    <small>\n                      {\" \"}\n                      {tokenTwoCurrency} per {tokenOneCurrency}\n                    </small>\n                  </span>\n                  <span>\n                    {calculateFraction(\"TK2\")} per\n                    <br />\n                    <small>\n                      {\" \"}\n                      {tokenOneCurrency} per {tokenTwoCurrency}\n                    </small>\n                  </span>\n                  <span>\n                    {sharePoolValue}% <br />\n                    <small>Share of Pool</small>\n                  </span>\n                </div>\n              </Col>\n            )}\n            {currentPairAddress && (\n              <Col className=\"lp-class\">\n                <h4>LP Tokens in your Wallet</h4>\n                <ul className=\"LptokensList\">\n                  <li>\n                    <span>\n                      <img\n                        className=\"sc-fWPcDo bUpjCL\"\n                        alt=\"icon 1\"\n                        src={tokenOne?.icon}\n                      />\n                      <img\n                        className=\"sc-fWPcDo bUpjCL\"\n                        alt=\"icon 2\"\n                        src={tokenTwo?.icon}\n                      />\n                      &nbsp;&nbsp;\n                      {`${tokenOneCurrency}/${tokenTwoCurrency}`}:\n                    </span>{\" \"}\n                    <span>{Number(lpTokenBalance)?.toFixed(5)}</span>\n                  </li>\n                  <li>\n                    {tokenOne.symbol}: <span>{tokenOneDeposit}</span>\n                  </li>\n                  <li>\n                    {\" \"}\n                    {tokenTwo.symbol}: <span>{tokenTwoDeposit}</span>\n                  </li>\n                </ul>\n              </Col>\n            )}\n          </div>\n          <Col className=\"swapBtn_col\">\n            {handleApprovalButton(\"TK1\")}\n            {handleApprovalButton(\"TK2\")}\n\n            <ButtonPrimary\n              className=\"swapBtn dismissBtn\"\n              title={isUserConnected ? \"Supply\" : \"Unlock Wallet\"}\n              // onClick={() => handleShow1(true)}\n              onClick={() => checkAddLiquidity()}\n            />\n          </Col>\n        </CardCustom>\n      </Container>\n      <ModalCurrency\n        show={show}\n        handleClose={handleClose}\n        tokenList={filteredTokenList}\n        searchToken={handleSearchToken}\n        searchByName={setSearch}\n        selectCurrency={onHandleSelectCurrency}\n        tokenType={tokenType}\n        currencyName={selectedCurrency}\n        handleOrder={setFilteredTokenList}\n      />\n      <ConnectWallet\n        show={show1}\n        handleShow={handleShow1}\n        handleClose={handleClose1}\n      />\n      <SettingModal\n        show={settingShow}\n        handleShow={settinghandleShow}\n        handleClose={settingClose}\n      />\n      <SupplyModal\n        show={showSupplyModal}\n        handleClose={supplyModalClose}\n        addLiquidity={addLiquidity}\n        liquidityConfirmation={liquidityConfirmation}\n        tokenOneCurrency={tokenOneCurrency}\n        tokenOneValue={tokenOneValue}\n        tokenTwoCurrency={tokenTwoCurrency}\n        tokenTwoValue={tokenTwoValue}\n        calculateFraction={calculateFraction}\n        sharePoolValue={sharePoolValue}\n        tokenOne={tokenOne}\n        tokenTwo={tokenTwo}\n        slippagePercentage={slippagePercentage}\n      />\n      <RecentTransactions\n        show={showRecent}\n        handleClose={recentTransactionsClose}\n      />\n      <TransactionalModal\n        show={showTransactionModal}\n        handleClose={closeTransactionModal}\n        txHash={txHash}\n      />\n    </>\n  );\n};\n\nexport default AddLiquidity;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}